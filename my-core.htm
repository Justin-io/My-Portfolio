<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NEXUS SECURE VAULT</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src='https://unpkg.com/tesseract.js@v4.0.2/dist/tesseract.min.js'></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Exo+2:wght@300;400;500;600;700&display=swap');
        
        * {
            font-family: 'Exo 2', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }
        
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }
        
        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 15s infinite linear;
        }
        
        @keyframes float {
            0% {
                transform: translateY(100vh) translateX(0);
                opacity: 0;
            }
            10% {
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                transform: translateY(-100vh) translateX(100px);
                opacity: 0;
            }
        }
        
        .main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 1;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px;
            position: relative;
        }
        
        .header h1 {
            font-family: 'Orbitron', monospace;
            font-weight: 900;
            font-size: 3rem;
            background: linear-gradient(90deg, #00d2ff, #3a47d5);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 30px rgba(0, 210, 255, 0.5);
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.2rem;
            color: #a0a0ff;
            font-weight: 300;
        }
        
        .auth-container, .vault-container, .blocked-container {
            background: rgba(20, 20, 40, 0.7);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(0, 210, 255, 0.3);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), inset 0 0 20px rgba(0, 210, 255, 0.1);
            padding: 40px;
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }
        
        .auth-container::before, .vault-container::before, .blocked-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 30%, rgba(0, 210, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(58, 71, 213, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }
        
        .vault-container, .blocked-container {
            display: none;
        }
        
        .form-control {
            background: rgba(10, 10, 30, 0.8);
            border: 1px solid rgba(0, 210, 255, 0.5);
            color: #fff;
            border-radius: 10px;
            padding: 15px;
            font-size: 1.1rem;
            transition: all 0.3s;
        }
        
        .form-control:focus {
            background: rgba(10, 10, 30, 0.9);
            border-color: #00d2ff;
            color: #fff;
            box-shadow: 0 0 0 0.25rem rgba(0, 210, 255, 0.25);
        }
        
        .btn {
            border-radius: 10px;
            font-weight: 600;
            padding: 12px 25px;
            font-size: 1rem;
            transition: all 0.3s;
            border: none;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .btn-primary {
            background: linear-gradient(90deg, #00d2ff, #3a47d5);
            color: #fff;
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 210, 255, 0.3);
        }
        
        .btn-success {
            background: linear-gradient(90deg, #00c851, #007e33);
            color: #fff;
        }
        
        .btn-success:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 200, 81, 0.3);
        }
        
        .btn-danger {
            background: linear-gradient(90deg, #ff3547, #c62828);
            color: #fff;
        }
        
        .btn-danger:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(255, 53, 71, 0.3);
        }
        
        .btn-outline {
            background: transparent;
            border: 2px solid #00d2ff;
            color: #00d2ff;
        }
        
        .btn-outline:hover {
            background: rgba(0, 210, 255, 0.1);
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 210, 255, 0.2);
        }
        
        .search-section {
            background: rgba(10, 10, 30, 0.8);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid rgba(0, 210, 255, 0.3);
        }
        
        .search-section h3 {
            color: #00d2ff;
            margin-bottom: 20px;
            font-weight: 700;
        }
        
        .image-upload {
            border: 2px dashed rgba(0, 210, 255, 0.5);
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .image-upload:hover {
            border-color: #00d2ff;
            background: rgba(0, 210, 255, 0.05);
        }
        
        .image-upload.dragover {
            border-color: #00d2ff;
            background: rgba(0, 210, 255, 0.1);
        }
        
        .image-preview {
            max-width: 100%;
            max-height: 300px;
            border-radius: 10px;
            margin: 20px auto;
            display: none;
        }
        
        .contact-item {
            background: rgba(20, 20, 40, 0.8);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #00d2ff;
            transition: all 0.3s;
        }
        
        .contact-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0, 210, 255, 0.2);
        }
        
        .contact-item h5 {
            color: #00d2ff;
            font-weight: 700;
            margin-bottom: 10px;
        }
        
        .contact-item p {
            margin-bottom: 15px;
            font-size: 1.1rem;
        }
        
        .contact-actions {
            display: flex;
            gap: 10px;
        }
        
        .timer-container {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(20, 20, 40, 0.9);
            backdrop-filter: blur(10px);
            border: 2px solid #ff3547;
            border-radius: 15px;
            padding: 15px;
            z-index: 1000;
            display: none;
            box-shadow: 0 10px 30px rgba(255, 53, 71, 0.3);
        }
        
        .timer-container .timer-label {
            color: #ff3547;
            font-weight: 600;
            margin-bottom: 5px;
            text-align: center;
        }
        
        .timer-container .timer {
            color: #ff3547;
            font-weight: 700;
            font-size: 1.5rem;
            text-align: center;
            font-family: 'Orbitron', monospace;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(20, 20, 40, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid #00d2ff;
            border-radius: 15px;
            padding: 20px;
            z-index: 1001;
            display: none;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
            max-width: 80%;
            text-align: center;
        }
        
        .notification .notification-title {
            color: #00d2ff;
            font-weight: 700;
            margin-bottom: 10px;
            font-size: 1.2rem;
        }
        
        .notification .notification-message {
            color: #fff;
            font-weight: 500;
        }
        
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            display: none;
        }
        
        .loading-content {
            text-align: center;
        }
        
        .loading-spinner {
            width: 80px;
            height: 80px;
            border: 8px solid rgba(0, 210, 255, 0.3);
            border-radius: 50%;
            border-top-color: #00d2ff;
            animation: spin 1s ease-in-out infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .loading-text {
            color: #00d2ff;
            font-weight: 600;
            font-size: 1.2rem;
        }
        
        .scan-progress {
            margin-top: 20px;
            display: none;
        }
        
        .progress {
            height: 10px;
            background: rgba(10, 10, 30, 0.8);
            border-radius: 5px;
            overflow: hidden;
        }
        
        .progress-bar {
            background: linear-gradient(90deg, #00d2ff, #3a47d5);
            height: 100%;
            width: 0%;
            transition: width 0.3s;
        }
        
        .extracted-contacts {
            margin-top: 30px;
        }
        
        .extracted-contacts h4 {
            color: #00d2ff;
            margin-bottom: 20px;
            font-weight: 700;
        }
        
        .blocked-message {
            text-align: center;
            padding: 40px;
        }
        
        .blocked-message h2 {
            color: #ff3547;
            margin-bottom: 20px;
        }
        
        .blocked-message p {
            margin-bottom: 30px;
            font-size: 1.1rem;
        }
        
        .footer {
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            font-size: 0.9rem;
            color: #a0a0ff;
            border-top: 1px solid rgba(0, 210, 255, 0.2);
        }
        
        .security-warning {
            background: rgba(255, 53, 71, 0.1);
            border: 1px solid #ff3547;
            color: #ff3547;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            display: none;
            font-weight: 600;
        }
        
        .attempts-counter {
            text-align: center;
            margin-top: 20px;
            color: #ff3547;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .contact-card {
            background: rgba(30, 30, 50, 0.8);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid rgba(0, 210, 255, 0.3);
            transition: all 0.3s;
        }
        
        .contact-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 210, 255, 0.2);
        }
        
        .contact-card h5 {
            color: #00d2ff;
            font-weight: 700;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        .contact-card .number {
            font-size: 1.2rem;
            margin-bottom: 15px;
            color: #fff;
        }
        
        .contact-card .actions {
            display: flex;
            gap: 10px;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #a0a0ff;
        }
        
        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: rgba(0, 210, 255, 0.3);
        }
    </style>
</head>
<body>
    <div class="particles" id="particles"></div>
    
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <div class="loading-text" id="loadingText">INITIALIZING SYSTEM...</div>
        </div>
    </div>
    
    <div class="notification" id="notification">
        <div class="notification-title" id="notificationTitle">SYSTEM NOTIFICATION</div>
        <div class="notification-message" id="notificationMessage">System message</div>
    </div>
    
    <div class="main-container">
        <div class="header">
            <h1>NEXUS SECURE VAULT</h1>
            <p>ADVANCED CONTACT MANAGEMENT SYSTEM</p>
        </div>
        
        <!-- Authentication Container -->
        <div class="auth-container" id="authContainer">
            <div class="security-warning" id="securityWarning">
                <i class="fas fa-exclamation-triangle me-2"></i> SECURITY ALERT: DEVELOPER TOOLS DETECTED. INITIATING COUNTERMEASURES...
            </div>
            
            <h2 class="text-center mb-4">SECURITY AUTHENTICATION</h2>
            <p class="text-center mb-4">Enter your access code to unlock the vault</p>
            
            <form id="loginForm">
                <div class="mb-4">
                    <div class="input-group">
                        <input type="password" class="form-control" id="password" placeholder="Enter access code" required>
                        <button class="btn btn-outline" type="button" id="togglePassword">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">UNLOCK VAULT</button>
                </div>
            </form>
            
            <div class="attempts-counter" id="attemptsCounter">
                REMAINING ATTEMPTS: <span id="remainingAttempts">2</span>
            </div>
        </div>
        
        <!-- Vault Container -->
        <div class="vault-container" id="vaultContainer">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-shield-alt me-2"></i>SECURE VAULT</h2>
                <button class="btn btn-danger" id="logoutBtn">
                    <i class="fas fa-sign-out-alt me-2"></i>LOGOUT
                </button>
            </div>
            
            <!-- Search Section -->
            <div class="search-section">
                <h3><i class="fas fa-search me-2"></i>CONTACT SCANNER</h3>
                <p>Upload an image to extract contact information</p>
                
                <div class="image-upload" id="imageUpload">
                    <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
                    <h4>DRAG & DROP IMAGE HERE</h4>
                    <p>or click to browse</p>
                    <input type="file" id="fileInput" accept="image/*" style="display: none;">
                </div>
                
                <img class="image-preview" id="imagePreview" alt="Preview">
                
                <div class="scan-progress" id="scanProgress">
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                    <p class="text-center mt-2">Scanning image... <span id="progressText">0%</span></p>
                </div>
                
                <div class="d-grid mt-3">
                    <button class="btn btn-primary" id="scanBtn" disabled>
                        <i class="fas fa-satellite-dish me-2"></i>SCAN IMAGE
                    </button>
                </div>
            </div>
            
            <!-- Extracted Contacts -->
            <div class="extracted-contacts" id="extractedContacts">
                <h4><i class="fas fa-user-friends me-2"></i>EXTRACTED CONTACTS</h4>
                <div id="extractedContactsList">
                    <div class="empty-state">
                        <i class="fas fa-inbox"></i>
                        <p>No contacts extracted yet. Upload an image to scan for contacts.</p>
                    </div>
                </div>
            </div>
            
            <!-- Saved Contacts -->
            <div class="mt-5">
                <h4><i class="fas fa-address-book me-2"></i>SAVED CONTACTS</h4>
                <div id="savedContactsList">
                    <div class="empty-state">
                        <i class="fas fa-user-shield"></i>
                        <p>No saved contacts yet. Extract and save contacts to see them here.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Blocked Container -->
        <div class="blocked-container" id="blockedContainer">
            <div class="blocked-message">
                <i class="fas fa-ban fa-4x mb-4" style="color: #ff3547;"></i>
                <h2>ACCESS DENIED</h2>
                <p>This device has been permanently blocked due to multiple failed authentication attempts.</p>
                <p>Your device information has been logged and reported.</p>
                <button class="btn btn-danger" onclick="redirectBlocked()">
                    <i class="fas fa-external-link-alt me-2"></i>LEAVE SYSTEM
                </button>
            </div>
        </div>
        
        <div class="footer">
            <p>© 2023 NEXUS SECURE VAULT | ALL RIGHTS RESERVED | UNAUTHORIZED ACCESS IS PROHIBITED</p>
        </div>
    </div>
    
    <div class="timer-container" id="timerContainer">
        <div class="timer-label">SESSION TIME REMAINING:</div>
        <div class="timer" id="sessionTimer">00:30</div>
    </div>

    <script>
        // Create particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                const size = Math.random() * 5 + 2;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                
                const duration = Math.random() * 20 + 10;
                particle.style.animationDuration = `${duration}s`;
                particle.style.animationDelay = `${Math.random() * 5}s`;
                
                particlesContainer.appendChild(particle);
            }
        }
        
        createParticles();
        
        // Show loading overlay
        document.getElementById('loadingOverlay').style.display = 'flex';
        
        // Security measures to prevent developer tools
        (function() {
            'use strict';
            
            // Check if device is blocked
            if (localStorage.getItem('deviceBlocked') === 'true') {
                document.getElementById('authContainer').style.display = 'none';
                document.getElementById('blockedContainer').style.display = 'block';
                document.getElementById('loadingOverlay').style.display = 'none';
                return;
            }
            
            // Disable right-click
            document.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                return false;
            });
            
            // Disable common keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // F12, Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+Shift+C, Ctrl+U
                if (
                    e.keyCode === 123 || 
                    (e.ctrlKey && e.shiftKey && (e.keyCode === 73 || e.keyCode === 74 || e.keyCode === 67)) || 
                    (e.ctrlKey && e.keyCode === 85)
                ) {
                    e.preventDefault();
                    showSecurityWarning();
                    return false;
                }
            });
            
            // Check for dev tools open
            let devtools = {open: false, orientation: null};
            const threshold = 160;
            
            setInterval(function() {
                if (window.outerHeight - window.innerHeight > threshold || 
                    window.outerWidth - window.innerWidth > threshold) {
                    if (!devtools.open) {
                        devtools.open = true;
                        showSecurityWarning();
                    }
                } else {
                    devtools.open = false;
                }
            }, 500);
            
            // Function to show security warning and redirect
            function showSecurityWarning() {
                document.getElementById('securityWarning').style.display = 'block';
                setTimeout(function() {
                    window.location.href = 'https://www.google.com/search?q=security+breach+detected';
                }, 2000);
            }
            
            // Console warning
            console.clear();
            console.log("%cNEXUS SECURITY ALERT: Unauthorized access to this system is prohibited.", "color: #00d2ff; font-size: 20px; font-weight: bold;");
            console.log("%cYour IP address has been logged. All activities on this system are monitored.", "color: #00d2ff; font-size: 16px;");
            
            // Disable drag and drop
            document.addEventListener('dragstart', function(e) {
                e.preventDefault();
                return false;
            });
            
            // Disable text selection (partial)
            document.addEventListener('selectstart', function(e) {
                if (document.getElementById('vaultContainer').style.display !== 'none') {
                    e.preventDefault();
                    return false;
                }
            });
        })();
        
        // Initialize variables
        let failedAttempts = parseInt(localStorage.getItem('failedAttempts') || '0');
        let sessionTimer;
        let timeRemaining = 30; // 30 seconds in seconds
        let savedContacts = JSON.parse(localStorage.getItem('savedContacts') || '[]');
        
        // Update attempts counter on page load
        document.getElementById('remainingAttempts').textContent = 2 - failedAttempts;
        
        // Show notification
        function showNotification(title, message) {
            const notification = document.getElementById('notification');
            const notificationTitle = document.getElementById('notificationTitle');
            const notificationMessage = document.getElementById('notificationMessage');
            
            notificationTitle.textContent = title;
            notificationMessage.textContent = message;
            
            notification.style.display = 'block';
            
            setTimeout(function() {
                notification.style.display = 'none';
            }, 3000);
        }
        
        // Password validation
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const password = document.getElementById('password').value;
            
            if (password === 'justin3237') {
                // Successful login
                document.getElementById('authContainer').style.display = 'none';
                document.getElementById('vaultContainer').style.display = 'block';
                document.getElementById('timerContainer').style.display = 'block';
                
                // Reset failed attempts
                localStorage.setItem('failedAttempts', '0');
                
                // Start session timer
                startSessionTimer();
                
                // Display saved contacts
                displaySavedContacts();
                
                showNotification('ACCESS GRANTED', 'Vault unlocked successfully.');
            } else {
                // Failed login
                failedAttempts++;
                localStorage.setItem('failedAttempts', failedAttempts.toString());
                
                // Update attempts counter
                const remaining = 2 - failedAttempts;
                document.getElementById('remainingAttempts').textContent = remaining;
                
                // Clear password field
                document.getElementById('password').value = '';
                
                // Show notification
                showNotification('ACCESS DENIED', `Invalid access code. ${remaining} attempts remaining.`);
                
                // Check if device should be blocked
                if (failedAttempts >= 2) {
                    blockDevice();
                }
            }
        });
        
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
            const passwordInput = document.getElementById('password');
            const icon = this.querySelector('i');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                icon.classList.replace('fa-eye', 'fa-eye-slash');
            } else {
                passwordInput.type = 'password';
                icon.classList.replace('fa-eye-slash', 'fa-eye');
            }
        });
        
        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', function() {
            logout();
        });
        
        // Session timer
        function startSessionTimer() {
            updateTimerDisplay();
            
            sessionTimer = setInterval(function() {
                timeRemaining--;
                updateTimerDisplay();
                
                if (timeRemaining <= 0) {
                    logout();
                }
            }, 1000);
        }
        
        function updateTimerDisplay() {
            const seconds = timeRemaining;
            document.getElementById('sessionTimer').textContent = 
                `00:${seconds.toString().padStart(2, '0')}`;
                
            // Change color when time is running out
            if (timeRemaining <= 10) {
                document.getElementById('sessionTimer').style.color = '#ff3547';
                
                // Show warning notification
                if (timeRemaining === 10) {
                    showNotification('SESSION WARNING', 'Session will expire in 10 seconds.');
                }
            }
        }
        
        // Logout function
        function logout() {
            clearInterval(sessionTimer);
            timeRemaining = 30; // Reset timer
            
            document.getElementById('vaultContainer').style.display = 'none';
            document.getElementById('timerContainer').style.display = 'none';
            document.getElementById('authContainer').style.display = 'block';
            document.getElementById('password').value = '';
            
            // Reset timer color
            document.getElementById('sessionTimer').style.color = '#ff3547';
            
            showNotification('SESSION TERMINATED', 'Security protocols re-engaged.');
        }
        
        // Block device function
        function blockDevice() {
            localStorage.setItem('deviceBlocked', 'true');
            
            document.getElementById('authContainer').style.display = 'none';
            document.getElementById('blockedContainer').style.display = 'block';
        }
        
        // Redirect blocked device
        function redirectBlocked() {
            window.location.href = 'https://www.google.com/search?q=access+denied';
        }
        
        // Image upload functionality
        const imageUpload = document.getElementById('imageUpload');
        const fileInput = document.getElementById('fileInput');
        const imagePreview = document.getElementById('imagePreview');
        const scanBtn = document.getElementById('scanBtn');
        const scanProgress = document.getElementById('scanProgress');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        
        imageUpload.addEventListener('click', function() {
            fileInput.click();
        });
        
        imageUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            imageUpload.classList.add('dragover');
        });
        
        imageUpload.addEventListener('dragleave', function() {
            imageUpload.classList.remove('dragover');
        });
        
        imageUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            imageUpload.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleImageUpload(files[0]);
            }
        });
        
        fileInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleImageUpload(e.target.files[0]);
            }
        });
        
        function handleImageUpload(file) {
            if (!file.type.match('image.*')) {
                showNotification('INVALID FILE', 'Please upload an image file.');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
                scanBtn.disabled = false;
            };
            reader.readAsDataURL(file);
        }
        
        // Scan image functionality
        scanBtn.addEventListener('click', function() {
            if (!imagePreview.src) {
                showNotification('NO IMAGE', 'Please upload an image first.');
                return;
            }
            
            scanProgress.style.display = 'block';
            scanBtn.disabled = true;
            
            Tesseract.recognize(
                imagePreview.src,
                'eng',
                {
                    logger: m => {
                        if (m.status === 'recognizing text') {
                            const progress = Math.round(m.progress * 100);
                            progressBar.style.width = `${progress}%`;
                            progressText.textContent = `${progress}%`;
                        }
                    }
                }
            ).then(({ data: { text } }) => {
                scanProgress.style.display = 'none';
                scanBtn.disabled = false;
                
                // Extract contacts from text
                const contacts = extractContacts(text);
                
                if (contacts.length > 0) {
                    displayExtractedContacts(contacts);
                    showNotification('SCAN COMPLETE', `Found ${contacts.length} contacts in the image.`);
                } else {
                    showNotification('NO CONTACTS', 'No contacts found in the image.');
                }
            }).catch(err => {
                scanProgress.style.display = 'none';
                scanBtn.disabled = false;
                showNotification('SCAN FAILED', 'Failed to scan the image. Please try again.');
                console.error(err);
            });
        });
        
        // Extract contacts from text
        function extractContacts(text) {
            // Common female first names to filter out
            const femaleNames = [
                'Mary', 'Patricia', 'Jennifer', 'Linda', 'Elizabeth', 'Barbara', 'Susan', 'Jessica', 
                'Sarah', 'Karen', 'Nancy', 'Betty', 'Helen', 'Sandra', 'Donna', 'Carol', 'Ruth', 
                'Sharon', 'Michelle', 'Laura', 'Sarah', 'Kimberly', 'Deborah', 'Dorothy', 'Lisa', 
                'Nancy', 'Karen', 'Betty', 'Helen', 'Sandra', 'Donna', 'Carol', 'Ruth', 'Sharon', 
                'Michelle', 'Laura', 'Sarah', 'Kimberly', 'Deborah', 'Dorothy', 'Lisa', 'Nancy', 
                'Karen', 'Betty', 'Helen', 'Sandra', 'Donna', 'Carol', 'Ruth', 'Sharon', 'Michelle', 
                'Laura', 'Sarah', 'Kimberly', 'Deborah', 'Dorothy', 'Emily', 'Amanda', 'Melissa', 
                'Deborah', 'Stephanie', 'Rebecca', 'Sharon', 'Laura', 'Michelle', 'Sarah', 'Kimberly', 
                'Jessica', 'Nancy', 'Susan', 'Margaret', 'Lisa', 'Betty', 'Dorothy', 'Sandra', 'Ashley', 
                'Kimberly', 'Donna', 'Carol', 'Michelle', 'Emily', 'Amanda', 'Melissa', 'Deborah', 
                'Stephanie', 'Rebecca', 'Sharon', 'Laura', 'Michelle', 'Sarah', 'Kimberly', 'Jessica'
            ];
            
            // Extract phone numbers
            const phoneRegex = /(\+\d{1,3}[-.\s]?)?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}/g;
            const phoneNumbers = text.match(phoneRegex) || [];
            
            // Extract potential names (simplified approach)
            const nameRegex = /\b([A-Z][a-z]+)\s+([A-Z][a-z]+)\b/g;
            const names = [];
            let match;
            while ((match = nameRegex.exec(text)) !== null) {
                names.push(match[0]);
            }
            
            // Create contacts
            const contacts = [];
            
            phoneNumbers.forEach((phone, index) => {
                // Clean phone number
                const cleanPhone = phone.replace(/[^\d+]/g, '');
                
                // Get name if available
                let name = `Contact ${index + 1}`;
                if (index < names.length) {
                    name = names[index];
                    
                    // Check if name is female
                    const firstName = name.split(' ')[0];
                    if (femaleNames.includes(firstName)) {
                        // Skip female contacts
                        return;
                    }
                }
                
                contacts.push({
                    name: name,
                    phone: cleanPhone
                });
            });
            
            return contacts;
        }
        
        // Display extracted contacts
        function displayExtractedContacts(contacts) {
            const container = document.getElementById('extractedContactsList');
            
            if (contacts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-user-slash"></i>
                        <p>No contacts found in the image.</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = '';
            
            contacts.forEach((contact, index) => {
                const contactCard = document.createElement('div');
                contactCard.className = 'contact-card';
                contactCard.innerHTML = `
                    <h5>${contact.name}</h5>
                    <div class="number">${contact.phone}</div>
                    <div class="actions">
                        <button class="btn btn-success" onclick="makeCall('${contact.phone}')">
                            <i class="fas fa-phone me-1"></i> CALL
                        </button>
                        <button class="btn btn-success" onclick="sendWhatsApp('${contact.phone}')">
                            <i class="fab fa-whatsapp me-1"></i> WHATSAPP
                        </button>
                        <button class="btn btn-primary" onclick="saveContact('${contact.name}', '${contact.phone}')">
                            <i class="fas fa-save me-1"></i> SAVE
                        </button>
                    </div>
                `;
                container.appendChild(contactCard);
            });
        }
        
        // Display saved contacts
        function displaySavedContacts() {
            const container = document.getElementById('savedContactsList');
            
            if (savedContacts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-user-shield"></i>
                        <p>No saved contacts yet. Extract and save contacts to see them here.</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = '';
            
            savedContacts.forEach((contact, index) => {
                const contactCard = document.createElement('div');
                contactCard.className = 'contact-card';
                contactCard.innerHTML = `
                    <h5>${contact.name}</h5>
                    <div class="number">${contact.phone}</div>
                    <div class="actions">
                        <button class="btn btn-success" onclick="makeCall('${contact.phone}')">
                            <i class="fas fa-phone me-1"></i> CALL
                        </button>
                        <button class="btn btn-success" onclick="sendWhatsApp('${contact.phone}')">
                            <i class="fab fa-whatsapp me-1"></i> WHATSAPP
                        </button>
                        <button class="btn btn-danger" onclick="removeContact(${index})">
                            <i class="fas fa-trash me-1"></i> REMOVE
                        </button>
                    </div>
                `;
                container.appendChild(contactCard);
            });
        }
        
        // Save contact
        function saveContact(name, phone) {
            // Check if contact already exists
            const exists = savedContacts.some(contact => contact.phone === phone);
            
            if (exists) {
                showNotification('ALREADY SAVED', 'This contact is already in your vault.');
                return;
            }
            
            savedContacts.push({ name, phone });
            localStorage.setItem('savedContacts', JSON.stringify(savedContacts));
            
            displaySavedContacts();
            showNotification('CONTACT SAVED', `${name} has been added to your vault.`);
        }
        
        // Remove contact
        function removeContact(index) {
            const contact = savedContacts[index];
            savedContacts.splice(index, 1);
            localStorage.setItem('savedContacts', JSON.stringify(savedContacts));
            
            displaySavedContacts();
            showNotification('CONTACT REMOVED', `${contact.name} has been removed from your vault.`);
        }
        
        // Make call function
        function makeCall(number) {
            showNotification('INITIATING CALL', `Dialing ${number}...`);
            setTimeout(function() {
                window.open(`tel:${number}`, '_self');
            }, 1000);
        }
        
        // Send WhatsApp function
        function sendWhatsApp(number) {
            showNotification('OPENING WHATSAPP', `Connecting to ${number}...`);
            setTimeout(function() {
                window.open(`https://wa.me/${number.replace(/\D/g, '')}`, '_blank');
            }, 1000);
        }
        
        // Clear session on page close
        window.addEventListener('beforeunload', function() {
            sessionStorage.clear();
        });
        
        // Initialize page
        window.addEventListener('load', function() {
            setTimeout(function() {
                document.getElementById('loadingOverlay').style.display = 'none';
            }, 1500);
        });
    </script>
</body>
</html>