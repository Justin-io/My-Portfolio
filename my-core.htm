<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DS Core - Glassy File Explorer</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    
    <style>
        :root {
            --primary-blue: #0ea5e9;
            --light-blue: #e0f2fe;
            --dark-blue: #0284c7;
            --glass-bg: rgba(255, 255, 255, 0.7);
            --glass-border: rgba(255, 255, 255, 0.8);
            --text-primary: #0f172a;
            --text-secondary: #64748b;
            --bg-primary: #f8fafc;
            --bg-secondary: #e2e8f0;
            --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        [data-theme="dark"] {
            --glass-bg: rgba(15, 23, 42, 0.7);
            --glass-border: rgba(255, 255, 255, 0.1);
            --text-primary: #f1f5f9;
            --text-secondary: #94a3b8;
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
            --light-blue: #0c4a6e;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            min-height: 100vh;
            transition: background-color 0.3s ease, color 0.3s ease;
            overflow-x: hidden;
            position: relative;
        }

        /* Background Pattern */
        .bg-pattern {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(circle at 10% 20%, var(--light-blue) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, var(--light-blue) 0%, transparent 20%),
                radial-gradient(circle at 50% 50%, var(--light-blue) 0%, transparent 30%);
            opacity: 0.3;
            z-index: -1;
        }

        /* App Container */
        .app-wrapper {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .app-header {
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--glass-border);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
        }

        .app-header.collapsed {
            padding: 0.5rem 0;
        }

        .app-container {
            flex: 1;
            padding: 2rem 0;
            transition: padding-top 0.3s ease;
        }

        .app-container.expanded {
            padding-top: 2rem;
        }

        .app-container.collapsed {
            padding-top: 1rem;
        }

        /* Glass Container */
        .glass-container {
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 16px;
            border: 1px solid var(--glass-border);
            box-shadow: var(--card-shadow);
            padding: 2rem;
            margin: 0 auto;
            max-width: 1200px;
            animation: fadeIn 0.5s ease-in-out;
        }

        /* Header Styles */
        .main-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .main-header.collapsed {
            margin-bottom: 1rem;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--primary-blue);
            transition: all 0.3s ease;
        }

        .logo.collapsed {
            font-size: 1.5rem;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-blue), var(--dark-blue));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            transition: all 0.3s ease;
        }

        .logo-icon.collapsed {
            width: 35px;
            height: 35px;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
            transition: all 0.3s ease;
        }

        .header-actions.collapsed {
            gap: 0.5rem;
        }

        .collapse-toggle {
            position: absolute;
            top: 0.5rem;
            right: 1rem;
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border: 1px solid var(--glass-border);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-primary);
            cursor: pointer;
            z-index: 101;
            transition: all 0.3s ease;
        }

        .collapse-toggle:hover {
            background: var(--primary-blue);
            color: white;
        }

        /* Button Styles */
        .btn-primary-custom {
            background: linear-gradient(135deg, var(--primary-blue), var(--dark-blue));
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.6rem 1.25rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px -1px rgba(14, 165, 233, 0.3);
        }

        .btn-primary-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(14, 165, 233, 0.4);
        }

        .btn-icon {
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border: 1px solid var(--glass-border);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

        .btn-icon:hover {
            background: var(--primary-blue);
            color: white;
            transform: rotate(15deg);
        }

        .btn-icon.collapsed {
            width: 35px;
            height: 35px;
        }

        /* Search and Filter Section */
        .search-filter-section {
            margin-bottom: 2rem;
            transition: all 0.3s ease;
        }

        .search-filter-section.collapsed {
            margin-bottom: 1rem;
        }

        .search-container {
            position: relative;
            margin-bottom: 1rem;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 3rem;
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border: 1px solid var(--glass-border);
            border-radius: 8px;
            font-size: 1rem;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
        }

        .filter-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 0.5rem 1rem;
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            font-size: 0.875rem;
            color: var(--text-primary);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .filter-btn:hover {
            background: var(--primary-blue);
            color: white;
            transform: translateY(-2px);
        }

        .filter-btn.active {
            background: var(--primary-blue);
            color: white;
        }

        /* File Grid */
        .files-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
        }

        /* File Card */
        .file-card {
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border-radius: 12px;
            border: 1px solid var(--glass-border);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .file-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-blue), var(--dark-blue));
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .file-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .file-card:hover::before {
            transform: translateX(0);
        }

        .file-icon {
            width: 50px;
            height: 50px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .pdf-icon {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
        }

        .txt-icon {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .docx-icon {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }

        .xlsx-icon {
            background: rgba(34, 197, 94, 0.1);
            color: #22c55e;
        }

        .pptx-icon {
            background: rgba(249, 115, 22, 0.1);
            color: #f97316;
        }

        .image-icon {
            background: rgba(168, 85, 247, 0.1);
            color: #a855f7;
        }

        .default-icon {
            background: rgba(107, 114, 128, 0.1);
            color: #6b7280;
        }

        .file-name {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .file-meta {
            font-size: 0.85rem;
            color: var(--text-secondary);
            margin-bottom: 0.75rem;
        }

        .file-description {
            font-size: 0.9rem;
            color: var(--text-secondary);
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        /* Detail View */
        .detail-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .detail-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1.5rem;
        }

        .detail-icon {
            width: 70px;
            height: 70px;
            border-radius: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            flex-shrink: 0;
        }

        .detail-title {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .detail-meta {
            color: var(--text-secondary);
        }

        .detail-description {
            margin: 2rem 0;
            line-height: 1.6;
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border-radius: 12px;
            border: 1px solid var(--glass-border);
            padding: 1.5rem;
        }

        .preview-container {
            margin-top: 2rem;
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid var(--glass-border);
        }

        .preview-placeholder {
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            padding: 3rem;
            text-align: center;
        }

        .pdf-preview {
            width: 100%;
            height: 500px;
            border: none;
        }

        .text-preview {
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border-radius: 12px;
            border: 1px solid var(--glass-border);
            padding: 1.5rem;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            max-height: 500px;
            overflow-y: auto;
        }

        .image-preview {
            width: 100%;
            max-height: 500px;
            object-fit: contain;
            border-radius: 12px;
        }

        .video-preview {
            width: 100%;
            max-height: 500px;
            border-radius: 12px;
        }

        /* PDF Modal */
        .pdf-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 2000;
            display: flex;
            flex-direction: column;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .pdf-modal.active {
            opacity: 1;
            visibility: visible;
        }

        .pdf-modal-header {
            background: white;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 2001;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .pdf-modal-title {
            font-weight: 600;
            font-size: 1.1rem;
            color: #333;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 70%;
        }

        .pdf-modal-actions {
            display: flex;
            gap: 0.5rem;
        }

        .pdf-modal-btn {
            background: #f3f4f6;
            border: none;
            border-radius: 6px;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #4b5563;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .pdf-modal-btn:hover {
            background: #e5e7eb;
            color: #1f2937;
        }

        .pdf-modal-content {
            flex: 1;
            overflow: hidden;
            position: relative;
            background: white;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .pdf-modal-embed {
            width: 100%;
            height: 100%;
            border: none;
        }

        .pdf-loading {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 2002;
        }

        .pdf-loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f4f6;
            border-top: 4px solid var(--primary-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        /* Loading Spinner */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Skeleton Loading */
        .skeleton {
            background: linear-gradient(90deg, var(--glass-bg) 25%, var(--bg-secondary) 50%, var(--glass-bg) 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            border-radius: 4px;
        }

        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }

        .skeleton-card {
            background: var(--glass-bg);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            border-radius: 12px;
            border: 1px solid var(--glass-border);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .skeleton-icon {
            width: 50px;
            height: 50px;
            border-radius: 10px;
            margin-bottom: 1rem;
        }

        .skeleton-text {
            height: 16px;
            margin-bottom: 8px;
        }

        .skeleton-text.short {
            width: 60%;
        }

        .skeleton-text.medium {
            width: 80%;
        }

        .skeleton-text.long {
            width: 100%;
        }

        /* API Status */
        .api-status {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 8px;
            border: 1px solid var(--glass-border);
            padding: 0.5rem 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            z-index: 100;
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Floating Action Button */
        .fab {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary-blue), var(--dark-blue));
            box-shadow: 0 10px 15px -3px rgba(14, 165, 233, 0.4);
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 100;
            color: white;
        }

        .fab:hover {
            transform: scale(1.1);
            box-shadow: 0 20px 25px -5px rgba(14, 165, 233, 0.5);
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 12px;
            border: 1px solid var(--glass-border);
            padding: 1rem 1.5rem;
            box-shadow: var(--card-shadow);
            z-index: 1000;
            transform: translateX(150%);
            transition: transform 0.3s ease-out;
            max-width: 300px;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 0.5rem;
        }

        .notification-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: var(--primary-blue);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .notification-title {
            font-weight: 600;
        }

        .notification-message {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        /* No Results Message */
        .no-results {
            text-align: center;
            padding: 3rem;
            color: var(--text-secondary);
        }

        .no-results-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        /* Animations */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .glass-container {
                padding: 1.5rem;
                margin: 0 1rem;
            }
            
            .files-grid {
                grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
                gap: 1rem;
            }
            
            .main-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .header-actions {
                width: 100%;
                justify-content: space-between;
            }
            
            .detail-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .fab {
                bottom: 20px;
                right: 20px;
            }
            
            .api-status {
                bottom: 10px;
                left: 10px;
                font-size: 0.75rem;
            }
            
            .pdf-modal-title {
                max-width: 50%;
            }
        }

        @media (max-width: 480px) {
            .files-grid {
                grid-template-columns: 1fr;
            }
            
            .app-container {
                padding: 1rem 0;
            }
            
            .pdf-modal-title {
                max-width: 40%;
                font-size: 1rem;
            }
            
            .pdf-modal-btn {
                width: 32px;
                height: 32px;
            }
        }
    </style>
</head>
<body>
    <!-- Background Pattern -->
    <div class="bg-pattern"></div>

    <div class="app-wrapper">
        <!-- App Header -->
        <header class="app-header" id="appHeader">
            <div class="container">
                <div class="main-header" id="mainHeader">
                    <div class="logo" id="logo">
                        <div class="logo-icon" id="logoIcon">
                            <i class="bi bi-folder-fill"></i>
                        </div>
                        DS Core
                    </div>
                    <div class="header-actions" id="headerActions">
                        <button id="refreshBtn" class="btn-primary-custom">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                        <button id="themeToggle" class="btn-icon">
                            <i class="bi bi-moon-fill"></i>
                        </button>
                    </div>
                </div>
            </div>
            <button class="collapse-toggle" id="collapseToggle">
                <i class="bi bi-chevron-up"></i>
            </button>
        </header>

        <!-- Main App Container -->
        <main class="app-container expanded" id="appContainer">
            <div class="container">
                <!-- Folder View -->
                <div id="folderView">
                    <div class="glass-container">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h2 class="mb-0">Files</h2>
                            <span class="text-secondary" id="fileCount">Loading...</span>
                        </div>
                        
                        <!-- Search and Filter Section -->
                        <div class="search-filter-section" id="searchFilterSection">
                            <div class="search-container">
                                <i class="bi bi-search search-icon"></i>
                                <input type="text" id="searchInput" class="search-input" placeholder="Search files...">
                            </div>
                            <div class="filter-buttons" id="filterButtons">
                                <button class="filter-btn active" data-filter="all">All</button>
                                <button class="filter-btn" data-filter="PDF">PDF</button>
                                <button class="filter-btn" data-filter="TXT">Text</button>
                                <button class="filter-btn" data-filter="DOCX">Documents</button>
                                <button class="filter-btn" data-filter="IMAGE">Images</button>
                                <button class="filter-btn" data-filter="VIDEO">Videos</button>
                            </div>
                        </div>
                        
                        <div id="filesContainer" class="files-grid">
                            <!-- Files will be dynamically inserted here -->
                        </div>
                    </div>
                </div>

                <!-- File Detail View -->
                <div id="detailView" style="display: none;">
                    <div class="glass-container detail-container">
                        <button id="backBtn" class="btn-icon mb-4">
                            <i class="bi bi-arrow-left"></i>
                        </button>
                        
                        <div class="detail-header">
                            <div id="detailIcon" class="detail-icon"></div>
                            <div>
                                <h2 id="detailTitle" class="detail-title"></h2>
                                <div id="detailMeta" class="detail-meta"></div>
                            </div>
                        </div>
                        
                        <div id="detailDescription" class="detail-description"></div>
                        
                        <div id="previewContainer" class="preview-container">
                            <!-- Preview will be dynamically inserted here -->
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- PDF Modal -->
    <div class="pdf-modal" id="pdfModal">
        <div class="pdf-modal-header">
            <div class="pdf-modal-title" id="pdfModalTitle">PDF Viewer</div>
            <div class="pdf-modal-actions">
                <button id="pdfDownloadBtn" class="pdf-modal-btn" title="Download">
                    <i class="bi bi-download"></i>
                </button>
                <button id="pdfPrintBtn" class="pdf-modal-btn" title="Print">
                    <i class="bi bi-printer"></i>
                </button>
                <button id="pdfZoomInBtn" class="pdf-modal-btn" title="Zoom In">
                    <i class="bi bi-zoom-in"></i>
                </button>
                <button id="pdfZoomOutBtn" class="pdf-modal-btn" title="Zoom Out">
                    <i class="bi bi-zoom-out"></i>
                </button>
                <button id="pdfCloseBtn" class="pdf-modal-btn" title="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>
        <div class="pdf-modal-content">
            <div class="pdf-loading" id="pdfLoading">
                <div class="pdf-loading-spinner"></div>
                <p>Loading PDF...</p>
            </div>
            <iframe id="pdfEmbed" class="pdf-modal-embed" style="display: none;"></iframe>
        </div>
    </div>

    <!-- API Status Indicator -->
    <div class="api-status">
        <div class="status-indicator"></div>
        <span>Connected to GitHub API</span>
    </div>

    <!-- Floating Action Button -->
    <div class="fab" id="fabBtn">
        <i class="bi bi-plus-lg"></i>
    </div>

    <!-- Notification -->
    <div class="notification" id="notification">
        <div class="notification-header">
            <div class="notification-icon">
                <i class="bi bi-info-lg"></i>
            </div>
            <div class="notification-title">DS Core</div>
        </div>
        <div class="notification-message" id="notificationMessage"></div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Configuration - Updated with your GitHub details
        const GITHUB_CONFIG = {
            owner: 'justin-io',
            repo: 'My-Portfolio',
            filesPath: 'hide'
        };

        // PDF rendering configuration
        const PDF_RENDER_BASE_URL = 'https://justinalexia.vercel.app/hide';

        // Cache keys for localStorage
        const CACHE_KEY = 'dsCore_fileCache';
        const DOWNLOADED_FILES_KEY = 'dsCore_downloadedFiles';
        const COLLAPSED_STATE_KEY = 'dsCore_toolbarCollapsed';

        // Global state
        let allFiles = [];
        let filteredFiles = [];
        let currentFilter = 'all';
        let searchTerm = '';
        let currentPdfFile = null;
        let pdfZoomLevel = 100;

        // Helper function to determine file type from extension
        function getFileType(extension) {
            const typeMap = {
                'pdf': 'PDF',
                'txt': 'TXT',
                'doc': 'DOCX',
                'docx': 'DOCX',
                'xls': 'XLSX',
                'xlsx': 'XLSX',
                'ppt': 'PPTX',
                'pptx': 'PPTX',
                'jpg': 'IMAGE',
                'jpeg': 'IMAGE',
                'png': 'IMAGE',
                'gif': 'IMAGE',
                'bmp': 'IMAGE',
                'svg': 'IMAGE',
                'mp4': 'VIDEO',
                'mov': 'VIDEO',
                'avi': 'VIDEO',
                'mkv': 'VIDEO',
                'webm': 'VIDEO',
                'mp3': 'AUDIO',
                'wav': 'AUDIO',
                'flac': 'AUDIO',
                'aac': 'AUDIO'
            };
            
            return typeMap[extension.toLowerCase()] || 'unknown';
        }

        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes < 1024) {
                return `${bytes} B`;
            } else if (bytes < 1024 * 1024) {
                return `${(bytes / 1024).toFixed(1)} KB`;
            } else {
                return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
            }
        }

        // Get downloaded files from localStorage
        function getDownloadedFiles() {
            try {
                return JSON.parse(localStorage.getItem(DOWNLOADED_FILES_KEY) || '[]');
            } catch (error) {
                console.error('Error getting downloaded files:', error);
                return [];
            }
        }

        // Add a file to downloaded files list
        function addDownloadedFile(fileUrl) {
            try {
                const downloadedFiles = getDownloadedFiles();
                if (!downloadedFiles.includes(fileUrl)) {
                    downloadedFiles.push(fileUrl);
                    localStorage.setItem(DOWNLOADED_FILES_KEY, JSON.stringify(downloadedFiles));
                }
            } catch (error) {
                console.error('Error adding downloaded file:', error);
            }
        }

        // Check if a file has been downloaded
        function isFileDownloaded(fileUrl) {
            return getDownloadedFiles().includes(fileUrl);
        }

        // Fetch file list from GitHub API
        async function fetchFileList() {
            try {
                // First try to get files from root directory
                const rootUrl = `https://api.github.com/repos/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/contents/`;
                const rootResponse = await fetch(rootUrl);
                
                if (!rootResponse.ok) {
                    throw new Error(`GitHub API error: ${rootResponse.status} ${rootResponse.statusText}`);
                }
                
                const rootData = await rootResponse.json();
                
                // Check if 'files' directory exists
                const filesDir = rootData.find(item => item.name === 'files' && item.type === 'dir');
                
                let files = [];
                
                if (filesDir) {
                    // If 'files' directory exists, get its contents
                    const filesUrl = `https://api.github.com/repos/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/contents/files`;
                    const filesResponse = await fetch(filesUrl);
                    
                    if (!filesResponse.ok) {
                        throw new Error(`GitHub API error: ${filesResponse.status} ${filesResponse.statusText}`);
                    }
                    
                    const filesData = await filesResponse.json();
                    files = filesData.filter(item => item.type === 'file');
                } else {
                    // If no 'files' directory, look for files in root
                    files = rootData.filter(item => item.type === 'file');
                }
                
                // Transform to clean file objects
                const fileList = files.map(file => {
                    const extension = file.name.split('.').pop();
                    
                    return {
                        name: file.name,
                        url: `${file.download_url}?raw=true`,
                        type: getFileType(extension),
                        size: formatFileSize(file.size),
                        modified: null, // GitHub API doesn't return file dates in contents endpoint
                        extension: extension.toLowerCase()
                    };
                });
                
                // Cache the file list
                localStorage.setItem(CACHE_KEY, JSON.stringify({
                    timestamp: Date.now(),
                    files: fileList
                }));
                
                return fileList;
            } catch (error) {
                console.warn('Failed to fetch file list from GitHub API:', error);
                
                // Try to fall back to cached version
                try {
                    const cachedData = localStorage.getItem(CACHE_KEY);
                    if (cachedData) {
                        const { timestamp, files } = JSON.parse(cachedData);
                        console.warn(`Using cached file list from ${new Date(timestamp).toLocaleString()}`);
                        return files;
                    }
                } catch (cacheError) {
                    console.warn('Failed to retrieve cached file list:', cacheError);
                }
                
                // If all else fails, return empty array
                return [];
            }
        }

        // Refresh files by calling fetchFileList and updating the UI
        async function refreshFiles() {
            // Show loading state
            refreshBtn.disabled = true;
            refreshBtn.innerHTML = '<span class="loading-spinner"></span> Refreshing...';
            
            try {
                const fileList = await fetchFileList();
                allFiles = fileList;
                applyFilters();
                
                // Show success notification
                if (fileList.length > 0) {
                    showNotification('Files refreshed successfully!', 'success');
                } else {
                    showNotification('No files found. Check your repository configuration.', 'warning');
                }
                
                return fileList;
            } catch (error) {
                console.error('Error refreshing files:', error);
                showNotification('Failed to refresh files. Please try again.', 'error');
                return [];
            } finally {
                // Reset button state
                refreshBtn.disabled = false;
                refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refresh';
            }
        }

        // Apply search and filters
        function applyFilters() {
            filteredFiles = allFiles.filter(file => {
                const matchesSearch = searchTerm === '' || 
                    file.name.toLowerCase().includes(searchTerm.toLowerCase());
                const matchesFilter = currentFilter === 'all' || 
                    file.type === currentFilter;
                
                return matchesSearch && matchesFilter;
            });
            
            renderFiles(filteredFiles);
            fileCount.textContent = `${filteredFiles.length} of ${allFiles.length} items`;
        }

        // Function to fetch and display file content
        async function fetchFileContent(url, type) {
            try {
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`Failed to fetch file: ${response.status} ${response.statusText}`);
                }
                
                if (type === 'TXT') {
                    return await response.text();
                } else {
                    return url; // For other types, return the URL
                }
            } catch (error) {
                console.error('Error fetching file content:', error);
                return null;
            }
        }

        // Toggle toolbar collapse state
        function toggleToolbar() {
            const appHeader = document.getElementById('appHeader');
            const mainHeader = document.getElementById('mainHeader');
            const logo = document.getElementById('logo');
            const logoIcon = document.getElementById('logoIcon');
            const headerActions = document.getElementById('headerActions');
            const appContainer = document.getElementById('appContainer');
            const searchFilterSection = document.getElementById('searchFilterSection');
            const collapseToggle = document.getElementById('collapseToggle');
            const collapseIcon = collapseToggle.querySelector('i');
            
            const isCollapsed = appHeader.classList.contains('collapsed');
            
            if (isCollapsed) {
                // Expand toolbar
                appHeader.classList.remove('collapsed');
                mainHeader.classList.remove('collapsed');
                logo.classList.remove('collapsed');
                logoIcon.classList.remove('collapsed');
                headerActions.classList.remove('collapsed');
                appContainer.classList.remove('collapsed');
                appContainer.classList.add('expanded');
                searchFilterSection.classList.remove('collapsed');
                collapseIcon.className = 'bi bi-chevron-up';
                
                // Save state
                localStorage.setItem(COLLAPSED_STATE_KEY, 'false');
            } else {
                // Collapse toolbar
                appHeader.classList.add('collapsed');
                mainHeader.classList.add('collapsed');
                logo.classList.add('collapsed');
                logoIcon.classList.add('collapsed');
                headerActions.classList.add('collapsed');
                appContainer.classList.add('collapsed');
                appContainer.classList.remove('expanded');
                searchFilterSection.classList.add('collapsed');
                collapseIcon.className = 'bi bi-chevron-down';
                
                // Save state
                localStorage.setItem(COLLAPSED_STATE_KEY, 'true');
            }
        }

        // Show PDF in modal
        function showPdfModal(file) {
            const pdfModal = document.getElementById('pdfModal');
            const pdfModalTitle = document.getElementById('pdfModalTitle');
            const pdfEmbed = document.getElementById('pdfEmbed');
            const pdfLoading = document.getElementById('pdfLoading');
            const pdfDownloadBtn = document.getElementById('pdfDownloadBtn');
            
            currentPdfFile = file;
            pdfZoomLevel = 100; // Reset zoom level
            
            // Set modal title
            pdfModalTitle.textContent = file.name;
            
            // Show loading
            pdfLoading.style.display = 'flex';
            pdfEmbed.style.display = 'none';
            
            // Construct PDF URL using the specified pattern
            const pdfUrl = `${PDF_RENDER_BASE_URL}/${encodeURIComponent(file.name)}`;
            
            // Set PDF source
            pdfEmbed.src = pdfUrl;
            
            // Show modal
            pdfModal.classList.add('active');
            
            // Hide loading when PDF is loaded
            pdfEmbed.onload = function() {
                pdfLoading.style.display = 'none';
                pdfEmbed.style.display = 'block';
            };
            
            // Handle loading error
            pdfEmbed.onerror = function() {
                pdfLoading.style.display = 'none';
                showNotification('Failed to load PDF. Please try again.', 'error');
            };
        }

        // Close PDF modal
        function closePdfModal() {
            const pdfModal = document.getElementById('pdfModal');
            const pdfEmbed = document.getElementById('pdfEmbed');
            
            // Hide modal
            pdfModal.classList.remove('active');
            
            // Clear PDF source to stop loading
            pdfEmbed.src = '';
            
            currentPdfFile = null;
        }

        // Zoom PDF in
        function zoomInPdf() {
            if (pdfZoomLevel < 200) {
                pdfZoomLevel += 10;
                updatePdfZoom();
            }
        }

        // Zoom PDF out
        function zoomOutPdf() {
            if (pdfZoomLevel > 50) {
                pdfZoomLevel -= 10;
                updatePdfZoom();
            }
        }

        // Update PDF zoom
        function updatePdfZoom() {
            const pdfEmbed = document.getElementById('pdfEmbed');
            pdfEmbed.style.transform = `scale(${pdfZoomLevel / 100})`;
            pdfEmbed.style.transformOrigin = 'top center';
        }

        // Print PDF
        function printPdf() {
            if (currentPdfFile) {
                // Open PDF in new tab for printing
                const pdfUrl = `${PDF_RENDER_BASE_URL}/${encodeURIComponent(currentPdfFile.name)}`;
                const printWindow = window.open(pdfUrl, '_blank');
                
                // Try to trigger print after a short delay
                setTimeout(() => {
                    try {
                        printWindow.print();
                    } catch (e) {
                        console.error('Failed to print PDF:', e);
                        showNotification('Please use the browser\'s print function.', 'warning');
                    }
                }, 1000);
            }
        }

        // DOM elements
        const folderView = document.getElementById('folderView');
        const detailView = document.getElementById('detailView');
        const filesContainer = document.getElementById('filesContainer');
        const fileCount = document.getElementById('fileCount');
        const searchInput = document.getElementById('searchInput');
        const filterButtons = document.getElementById('filterButtons');
        const refreshBtn = document.getElementById('refreshBtn');
        const themeToggle = document.getElementById('themeToggle');
        const backBtn = document.getElementById('backBtn');
        const collapseToggle = document.getElementById('collapseToggle');
        const detailIcon = document.getElementById('detailIcon');
        const detailTitle = document.getElementById('detailTitle');
        const detailMeta = document.getElementById('detailMeta');
        const detailDescription = document.getElementById('detailDescription');
        const previewContainer = document.getElementById('previewContainer');
        const fabBtn = document.getElementById('fabBtn');
        const notification = document.getElementById('notification');
        const notificationMessage = document.getElementById('notificationMessage');
        const pdfModal = document.getElementById('pdfModal');
        const pdfDownloadBtn = document.getElementById('pdfDownloadBtn');
        const pdfPrintBtn = document.getElementById('pdfPrintBtn');
        const pdfZoomInBtn = document.getElementById('pdfZoomInBtn');
        const pdfZoomOutBtn = document.getElementById('pdfZoomOutBtn');
        const pdfCloseBtn = document.getElementById('pdfCloseBtn');

        // Initialize app
        async function init() {
            try {
                // Check toolbar collapsed state
                const isCollapsed = localStorage.getItem(COLLAPSED_STATE_KEY) === 'true';
                if (isCollapsed) {
                    toggleToolbar();
                }
                
                await loadFiles();
                setupEventListeners();
                checkThemePreference();
            } catch (error) {
                showNotification('Failed to initialize app. Please refresh the page.', 'error');
            }
        }

        // Show skeleton loading
        function showSkeletonLoading() {
            filesContainer.innerHTML = '';
            for (let i = 0; i < 6; i++) {
                const skeletonCard = document.createElement('div');
                skeletonCard.className = 'skeleton-card';
                skeletonCard.innerHTML = `
                    <div class="skeleton skeleton-icon"></div>
                    <div class="skeleton skeleton-text medium"></div>
                    <div class="skeleton skeleton-text short"></div>
                    <div class="skeleton skeleton-text long"></div>
                    <div class="skeleton skeleton-text medium"></div>
                `;
                filesContainer.appendChild(skeletonCard);
            }
        }

        // Load files from backend
        async function loadFiles() {
            showSkeletonLoading();
            
            try {
                const files = await fetchFileList();
                allFiles = files;
                applyFilters();
            } catch (error) {
                showNotification('Failed to load files. Please try again.', 'error');
                filesContainer.innerHTML = '<p class="text-center text-danger">Failed to load files</p>';
            }
        }

        // Render files in the folder view
        function renderFiles(files) {
            filesContainer.innerHTML = '';
            
            if (files.length === 0) {
                filesContainer.innerHTML = `
                    <div class="no-results col-12">
                        <div class="no-results-icon">
                            <i class="bi bi-search"></i>
                        </div>
                        <h4>No files found</h4>
                        <p>Try adjusting your search or filter criteria</p>
                    </div>
                `;
                return;
            }
            
            files.forEach(file => {
                const fileCard = document.createElement('div');
                fileCard.className = 'file-card';
                fileCard.innerHTML = `
                    <div class="file-icon ${getFileIconClass(file.type)}">
                        <i class="bi ${getFileIcon(file.type)}"></i>
                    </div>
                    <div class="file-name">${file.name}</div>
                    <div class="file-meta">${file.type} • ${file.size} • ${file.modified || 'Unknown'}</div>
                    <div class="file-description">This file is stored in your GitHub repository.</div>
                `;
                
                fileCard.addEventListener('click', () => showFileDetail(file));
                filesContainer.appendChild(fileCard);
            });
        }

        // Get file icon class based on file type
        function getFileIconClass(type) {
            switch(type) {
                case 'PDF': return 'pdf-icon';
                case 'TXT': return 'txt-icon';
                case 'DOCX': return 'docx-icon';
                case 'XLSX': return 'xlsx-icon';
                case 'PPTX': return 'pptx-icon';
                case 'IMAGE': return 'image-icon';
                case 'VIDEO': return 'video-icon';
                case 'AUDIO': return 'audio-icon';
                default: return 'default-icon';
            }
        }

        // Get file icon based on file type
        function getFileIcon(type) {
            switch(type) {
                case 'PDF': return 'bi-file-earmark-pdf-fill';
                case 'TXT': return 'bi-file-earmark-text-fill';
                case 'DOCX': return 'bi-file-earmark-word-fill';
                case 'XLSX': return 'bi-file-earmark-excel-fill';
                case 'PPTX': return 'bi-file-earmark-ppt-fill';
                case 'IMAGE': return 'bi-file-earmark-image-fill';
                case 'VIDEO': return 'bi-file-earmark-play-fill';
                case 'AUDIO': return 'bi-file-earmark-music-fill';
                default: return 'bi-file-earmark-fill';
            }
        }

        // Show file detail view
        async function showFileDetail(file) {
            // For PDF files, show in modal instead of detail view
            if (file.type === 'PDF') {
                showPdfModal(file);
                return;
            }
            
            // Set detail content
            detailIcon.className = `detail-icon ${getFileIconClass(file.type)}`;
            detailIcon.innerHTML = `<i class="bi ${getFileIcon(file.type)}"></i>`;
            detailTitle.textContent = file.name;
            detailMeta.textContent = `${file.type} • ${file.size} • Modified: ${file.modified || 'Unknown'}`;
            detailDescription.textContent = `This file is stored in your GitHub repository and can be accessed at: ${file.url}`;
            
            // Show loading state
            previewContainer.innerHTML = `
                <div class="preview-placeholder">
                    <div class="loading-spinner"></div>
                    <p>Loading file preview...</p>
                </div>
            `;
            
            // Set preview content based on file type
            if (file.type === 'TXT') {
                try {
                    const content = await fetchFileContent(file.url, 'TXT');
                    previewContainer.innerHTML = `
                        <div class="text-preview">${content || 'Failed to load content.'}</div>
                    `;
                } catch (error) {
                    previewContainer.innerHTML = `
                        <div class="preview-placeholder">
                            <h4>Failed to Load Content</h4>
                            <p>Unable to load the text file content. Please try again later.</p>
                            <button class="btn-primary-custom mt-3" onclick="downloadFile('${file.url}', '${file.name}')">
                                <i class="bi bi-download"></i> Download File
                            </button>
                        </div>
                    `;
                }
            } else if (file.type === 'IMAGE') {
                previewContainer.innerHTML = `
                    <img src="${file.url}" alt="${file.name}" class="image-preview" />
                `;
            } else if (file.type === 'VIDEO') {
                previewContainer.innerHTML = `
                    <video controls class="video-preview">
                        <source src="${file.url}" type="video/${file.extension}">
                        Your browser does not support the video tag.
                    </video>
                `;
            } else if (file.type === 'AUDIO') {
                previewContainer.innerHTML = `
                    <div class="preview-placeholder">
                        <h4>Audio Player</h4>
                        <audio controls style="width: 100%; margin-top: 1rem;">
                            <source src="${file.url}" type="audio/${file.extension}">
                            Your browser does not support the audio element.
                        </audio>
                        <button class="btn-primary-custom mt-3" onclick="downloadFile('${file.url}', '${file.name}')">
                            <i class="bi bi-download"></i> Download File
                        </button>
                    </div>
                `;
            } else {
                previewContainer.innerHTML = `
                    <div class="preview-placeholder">
                        <h4>Preview Not Available</h4>
                        <p>Preview is not available for this file type. You can download the file to view its contents.</p>
                        <button class="btn-primary-custom mt-3" onclick="downloadFile('${file.url}', '${file.name}')">
                            <i class="bi bi-download"></i> Download File
                        </button>
                    </div>
                `;
            }
            
            // Show detail view and hide folder view
            folderView.style.display = 'none';
            detailView.style.display = 'block';
        }

        // Show folder view
        function showFolderView() {
            detailView.style.display = 'none';
            folderView.style.display = 'block';
        }

        // Simulate file download
        function downloadFile(url, filename) {
            showNotification(`Downloading ${filename}...`, 'success');
            
            // Create a temporary link to trigger download
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            // Add to downloaded files list
            addDownloadedFile(url);
            
            // Show success notification
            setTimeout(() => {
                showNotification(`${filename} download started!`, 'success');
            }, 500);
        }

        // Open file in new tab
        function openFileInNewTab(url) {
            window.open(url, '_blank');
        }

        // Show notification
        function showNotification(message, type = 'info') {
            notificationMessage.textContent = message;
            notification.classList.add('show');
            
            // Update notification icon based on type
            const icon = notification.querySelector('.notification-icon i');
            if (type === 'error') {
                icon.className = 'bi bi-exclamation-lg';
                notification.querySelector('.notification-icon').style.background = '#ef4444';
            } else if (type === 'success') {
                icon.className = 'bi bi-check-lg';
                notification.querySelector('.notification-icon').style.background = '#10b981';
            } else if (type === 'warning') {
                icon.className = 'bi bi-exclamation-triangle-lg';
                notification.querySelector('.notification-icon').style.background = '#f59e0b';
            } else {
                icon.className = 'bi bi-info-lg';
                notification.querySelector('.notification-icon').style.background = 'var(--primary-blue)';
            }
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Toggle theme
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('dsCoreTheme', newTheme);
            
            // Update theme toggle icon
            const icon = themeToggle.querySelector('i');
            icon.className = newTheme === 'dark' ? 'bi bi-sun-fill' : 'bi bi-moon-fill';
        }

        // Check theme preference
        function checkThemePreference() {
            const savedTheme = localStorage.getItem('dsCoreTheme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            
            // Update theme toggle icon
            const icon = themeToggle.querySelector('i');
            icon.className = savedTheme === 'dark' ? 'bi bi-sun-fill' : 'bi bi-moon-fill';
        }

        // Setup event listeners
        function setupEventListeners() {
            // Search functionality
            searchInput.addEventListener('input', (e) => {
                searchTerm = e.target.value;
                applyFilters();
            });
            
            // Filter buttons
            filterButtons.addEventListener('click', (e) => {
                if (e.target.classList.contains('filter-btn')) {
                    // Remove active class from all buttons
                    filterButtons.querySelectorAll('.filter-btn').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    
                    // Add active class to clicked button
                    e.target.classList.add('active');
                    
                    // Update current filter
                    currentFilter = e.target.dataset.filter;
                    applyFilters();
                }
            });
            
            // Refresh button
            refreshBtn.addEventListener('click', refreshFiles);
            themeToggle.addEventListener('click', toggleTheme);
            backBtn.addEventListener('click', showFolderView);
            
            // Collapse toggle
            collapseToggle.addEventListener('click', toggleToolbar);
            
            // PDF modal buttons
            pdfDownloadBtn.addEventListener('click', () => {
                if (currentPdfFile) {
                    downloadFile(currentPdfFile.url, currentPdfFile.name);
                }
            });
            
            pdfPrintBtn.addEventListener('click', printPdf);
            pdfZoomInBtn.addEventListener('click', zoomInPdf);
            pdfZoomOutBtn.addEventListener('click', zoomOutPdf);
            pdfCloseBtn.addEventListener('click', closePdfModal);
            
            // Close modal when clicking outside
            pdfModal.addEventListener('click', (e) => {
                if (e.target === pdfModal) {
                    closePdfModal();
                }
            });
            
            // Floating Action Button
            fabBtn.addEventListener('click', () => {
                refreshFiles();
                fabBtn.style.transform = 'scale(1.2) rotate(360deg)';
                setTimeout(() => {
                    fabBtn.style.transform = 'scale(1) rotate(0deg)';
                }, 300);
            });
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>