  <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>OOPJ Buddy: Learn Java Without Fear</title>
  <style>
    /* CSS Reset and Variables */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    :root {
      --primary: #4a90e2;
      --secondary: #50c878;
      --accent: #ff6b6b;
      --background: #f9f9f9;
      --text: #333333;
      --light-gray: #e0e0e0;
      --white: #ffffff;
      --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* Global Styles */
    body {
      font-family: 'Open Sans', sans-serif;
      background-color: var(--background);
      color: var(--text);
      line-height: 1.6;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    h1, h2, h3, h4 {
      font-family: 'Segoe UI', sans-serif;
      margin-bottom: 1rem;
    }
    
    h1 {
      font-size: 2.5rem;
      color: var(--primary);
    }
    
    h2 {
      font-size: 2rem;
      color: var(--primary);
    }
    
    h3 {
      font-size: 1.5rem;
      color: var(--primary);
    }
    
    /* Header Styles */
    header {
      background-color: var(--primary);
      color: var(--white);
      padding: 1rem;
      text-align: center;
      box-shadow: var(--shadow);
    }
    
    header h1 {
      color: var(--white);
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }
    
    .subtitle {
      font-size: 1rem;
      opacity: 0.9;
    }
    
    /* Progress Bar */
    .progress-container {
      background-color: var(--light-gray);
      padding: 0.5rem 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .progress-bar {
      flex-grow: 1;
      height: 10px;
      background-color: #ddd;
      border-radius: 5px;
      margin: 0 1rem;
      overflow: hidden;
    }
    
    .progress-fill {
      height: 100%;
      background-color: var(--secondary);
      width: 0%;
      transition: width 0.5s ease;
    }
    
    /* Navigation */
    nav {
      display: flex;
      justify-content: space-between;
      padding: 1rem;
      background-color: var(--white);
      box-shadow: var(--shadow);
    }
    
    nav button {
      background-color: var(--primary);
      color: var(--white);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s;
    }
    
    nav button:hover {
      background-color: #3a7bc8;
    }
    
    nav button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }
    
    /* Section Tabs */
    .section-tabs {
      display: flex;
      overflow-x: auto;
      background-color: var(--white);
      box-shadow: var(--shadow);
      padding: 0.5rem;
    }
    
    .section-tab {
      padding: 0.75rem 1rem;
      margin: 0 0.25rem;
      background-color: #f0f0f0;
      border-radius: 4px;
      cursor: pointer;
      white-space: nowrap;
      transition: background-color 0.3s;
    }
    
    .section-tab.active {
      background-color: var(--primary);
      color: var(--white);
    }
    
    /* Main Content */
    main {
      flex: 1;
      padding: 1rem;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .section {
      display: none;
    }
    
    .section.active {
      display: block;
    }
    
    /* Card Styles */
    .card {
      background-color: var(--white);
      border-radius: 8px;
      box-shadow: var(--shadow);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      transition: transform 0.3s, box-shadow 0.3s;
    }
    
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
    
    .card.completed {
      border-left: 5px solid var(--secondary);
    }
    
    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .card-icon {
      font-size: 2rem;
      margin-right: 1rem;
    }
    
    .card-content {
      margin-bottom: 1rem;
    }
    
    .card-actions {
      display: flex;
      justify-content: flex-end;
    }
    
    .card-actions button {
      background-color: var(--secondary);
      color: var(--white);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s;
    }
    
    .card-actions button:hover {
      background-color: #45b868;
    }
    
    /* Code Blocks */
    .code-block {
      background-color: #f5f5f5;
      border-left: 4px solid var(--primary);
      padding: 1rem;
      margin: 1rem 0;
      font-family: monospace;
      overflow-x: auto;
      border-radius: 4px;
    }
    
    /* Visual Elements */
    .visual {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 1rem 0;
      padding: 1rem;
      background-color: #f5f5f5;
      border-radius: 8px;
    }
    
    .visual img, .visual svg {
      max-width: 100%;
      height: auto;
    }
    
    /* Interactive Elements */
    .interactive {
      margin: 1rem 0;
      padding: 1rem;
      background-color: #f0f8ff;
      border-radius: 8px;
      border: 1px dashed var(--primary);
    }
    
    .quiz-container {
      margin: 1rem 0;
    }
    
    .quiz-question {
      font-weight: bold;
      margin-bottom: 0.5rem;
    }
    
    .quiz-options {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    
    .quiz-option {
      padding: 0.75rem;
      background-color: var(--white);
      border: 1px solid var(--light-gray);
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    .quiz-option:hover {
      background-color: #f0f0f0;
    }
    
    .quiz-option.selected {
      background-color: #e0f0ff;
      border-color: var(--primary);
    }
    
    .quiz-option.correct {
      background-color: #e0ffe0;
      border-color: var(--secondary);
    }
    
    .quiz-option.incorrect {
      background-color: #ffe0e0;
      border-color: var(--accent);
    }
    
    .quiz-feedback {
      margin-top: 1rem;
      padding: 0.75rem;
      border-radius: 4px;
      display: none;
    }
    
    .quiz-feedback.correct {
      background-color: #e0ffe0;
      color: #2e7d32;
    }
    
    .quiz-feedback.incorrect {
      background-color: #ffe0e0;
      color: #c62828;
    }
    
    /* Drag and Drop */
    .drag-container {
      display: flex;
      justify-content: space-around;
      margin: 1rem 0;
    }
    
    .drag-items, .drop-zones {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .drag-item {
      padding: 0.75rem;
      background-color: var(--primary);
      color: var(--white);
      border-radius: 4px;
      cursor: grab;
      text-align: center;
    }
    
    .drag-item:active {
      cursor: grabbing;
    }
    
    .drop-zone {
      padding: 1rem;
      background-color: #f0f0f0;
      border: 2px dashed #ccc;
      border-radius: 4px;
      text-align: center;
      min-height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .drop-zone.drag-over {
      background-color: #e0f0ff;
      border-color: var(--primary);
    }
    
    .drop-zone.correct {
      background-color: #e0ffe0;
      border-color: var(--secondary);
    }
    
    /* Mascot */
    .mascot {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: var(--white);
      border-radius: 50%;
      width: 80px;
      height: 80px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      box-shadow: var(--shadow);
      cursor: pointer;
      transition: transform 0.3s;
      z-index: 100;
    }
    
    .mascot:hover {
      transform: scale(1.1);
    }
    
    .mascot-emoji {
      font-size: 2rem;
    }
    
    .mascot-speech {
      position: absolute;
      bottom: 100%;
      right: 0;
      background-color: var(--white);
      border-radius: 8px;
      padding: 0.75rem;
      box-shadow: var(--shadow);
      width: 200px;
      margin-bottom: 10px;
      display: none;
    }
    
    .mascot:hover .mascot-speech {
      display: block;
    }
    
    /* Tables */
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 1rem 0;
    }
    
    th, td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid var(--light-gray);
    }
    
    th {
      background-color: #f0f0f0;
      font-weight: bold;
    }
    
    tr:hover {
      background-color: #f9f9f9;
    }
    
    /* Certificate */
    .certificate {
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 2rem;
      background-color: var(--white);
      border-radius: 8px;
      box-shadow: var(--shadow);
      text-align: center;
      margin: 2rem auto;
      max-width: 800px;
    }
    
    .certificate.active {
      display: flex;
    }
    
    .certificate h2 {
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .certificate-border {
      border: 10px double var(--primary);
      padding: 2rem;
      width: 100%;
    }
    
    .certificate-actions {
      margin-top: 1.5rem;
    }
    
    .certificate-actions button {
      background-color: var(--primary);
      color: var(--white);
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      margin: 0 0.5rem;
      transition: background-color 0.3s;
    }
    
    .certificate-actions button:hover {
      background-color: #3a7bc8;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      h1 {
        font-size: 2rem;
      }
      
      h2 {
        font-size: 1.5rem;
      }
      
      .quiz-options {
        grid-template-columns: 1fr;
      }
      
      .drag-container {
        flex-direction: column;
      }
      
      .mascot {
        width: 60px;
        height: 60px;
      }
      
      .mascot-emoji {
        font-size: 1.5rem;
      }
    }
    
    /* Print Styles */
    @media print {
      body {
        background-color: var(--white);
      }
      
      header, nav, .section-tabs, .progress-container, .mascot {
        display: none;
      }
      
      .card {
        break-inside: avoid;
        box-shadow: none;
        border: 1px solid #ddd;
      }
      
      .certificate {
        page-break-inside: avoid;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header>
    <h1>🧠 OOPJ Buddy: Learn Java Without Fear</h1>
    <p class="subtitle">A beginner-friendly guide to mastering core Java OOP concepts</p>
  </header>
  
  <!-- Progress Bar -->
  <div class="progress-container">
    <span id="current-section">Section 1: Welcome & Basics</span>
    <div class="progress-bar">
      <div class="progress-fill" id="progress-fill"></div>
    </div>
    <span id="progress-percent">0%</span>
  </div>
  
  <!-- Section Tabs -->
  <div class="section-tabs">
    <div class="section-tab active" data-section="1">1. Welcome & Basics</div>
    <div class="section-tab" data-section="2">2. OOP Core</div>
    <div class="section-tab" data-section="3">3. Packages & Exceptions</div>
    <div class="section-tab" data-section="4">4. GUI with Swing</div>
    <div class="section-tab" data-section="5">5. Database with JDBC</div>
    <div class="section-tab" data-section="6">6. Final Review</div>
  </div>
  
  <!-- Main Content -->
  <main>
    <!-- Section 1: Welcome & Basics of Java -->
    <section id="section1" class="section active">
      <div class="card">
        <div class="card-header">
          <h2>🌍 What is Java?</h2>
          <div class="card-icon">🌍</div>
        </div>
        <div class="card-content">
          <p>Java is a programming language that runs on any device — like a universal translator for computers!</p>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 4rem;">🌐</div>
              <p>Works on Windows, Mac, Linux, and more!</p>
            </div>
          </div>
          <p>Java was created by Sun Microsystems (now owned by Oracle) in 1995 with the motto "Write Once, Run Anywhere" (WORA).</p>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔧 JVM, JRE, JDK</h2>
          <div class="card-icon">🔧</div>
        </div>
        <div class="card-content">
          <p>Think of these as tools for working with Java:</p>
          <ul>
            <li><strong>JDK (Java Development Kit)</strong>: The complete toolbox for creating Java programs.</li>
            <li><strong>JRE (Java Runtime Environment)</strong>: The player that runs Java programs.</li>
            <li><strong>JVM (Java Virtual Machine)</strong>: The engine that actually runs your Java code.</li>
          </ul>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🧰 → ▶️ ⚙️</div>
              <p>JDK → JRE → JVM</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>✏️ Writing Your First Program</h2>
          <div class="card-icon">✏️</div>
        </div>
        <div class="card-content">
          <p>Let's write a simple "Hello World" program in Java:</p>
          <div class="code-block">
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
          </div>
          <p>Let's break this down:</p>
          <ul>
            <li><code>public class HelloWorld</code>: Defines a class named "HelloWorld"</li>
            <li><code>public static void main(String[] args)</code>: The entry point of the program</li>
            <li><code>System.out.println(...)</code>: Prints text to the console</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>⚙️ Compiling & Running</h2>
          <div class="card-icon">⚙️</div>
        </div>
        <div class="card-content">
          <p>Java programs need to be compiled before they can run:</p>
          <ol>
            <li><strong>Compile</strong>: Use <code>javac</code> to turn your code into bytecode</li>
            <li><strong>Run</strong>: Use <code>java</code> to execute the bytecode</li>
          </ol>
          <div class="code-block">
# Compile the Java file
javac HelloWorld.java

# Run the compiled program
java HelloWorld
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📝 → 🔍 → ▶️</div>
              <p>Source Code → Bytecode → Output</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📦 Primitive Types</h2>
          <div class="card-icon">📦</div>
        </div>
        <div class="card-content">
          <p>Primitive types are the basic building blocks of data in Java. Think of them as small boxes for storing simple values:</p>
          <table>
            <tr>
              <th>Type</th>
              <th>Size</th>
              <th>Example</th>
              <th>Description</th>
            </tr>
            <tr>
              <td><code>byte</code></td>
              <td>1 byte</td>
              <td><code>byte b = 100;</code></td>
              <td>Small integer (-128 to 127)</td>
            </tr>
            <tr>
              <td><code>short</code></td>
              <td>2 bytes</td>
              <td><code>short s = 10000;</code></td>
              <td>Medium integer</td>
            </tr>
            <tr>
              <td><code>int</code></td>
              <td>4 bytes</td>
              <td><code>int i = 100000;</code></td>
              <td>Standard integer</td>
            </tr>
            <tr>
              <td><code>long</code></td>
              <td>8 bytes</td>
              <td><code>long l = 100000L;</code></td>
              <td>Large integer</td>
            </tr>
            <tr>
              <td><code>float</code></td>
              <td>4 bytes</td>
              <td><code>float f = 5.75f;</code></td>
              <td>Decimal number (less precision)</td>
            </tr>
            <tr>
              <td><code>double</code></td>
              <td>8 bytes</td>
              <td><code>double d = 5.75;</code></td>
              <td>Decimal number (more precision)</td>
            </tr>
            <tr>
              <td><code>char</code></td>
              <td>2 bytes</td>
              <td><code>char c = 'A';</code></td>
              <td>Single character</td>
            </tr>
            <tr>
              <td><code>boolean</code></td>
              <td>1 bit</td>
              <td><code>bool b = true;</code></td>
              <td>true or false</td>
            </tr>
          </table>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📋 Wrapper Classes</h2>
          <div class="card-icon">📋</div>
        </div>
        <div class="card-content">
          <p>Wrapper classes are like envelopes for primitive types. They allow primitives to be used in contexts that require objects (like in collections).</p>
          <table>
            <tr>
              <th>Primitive Type</th>
              <th>Wrapper Class</th>
              <th>Example</th>
            </tr>
            <tr>
              <td><code>byte</code></td>
              <td><code>Byte</code></td>
              <td><code>Byte b = new Byte((byte)100);</code></td>
            </tr>
            <tr>
              <td><code>short</code></td>
              <td><code>Short</code></td>
              <td><code>Short s = new Short((short)10000);</code></td>
            </tr>
            <tr>
              <td><code>int</code></td>
              <td><code>Integer</code></td>
              <td><code>Integer i = new Integer(100000);</code></td>
            </tr>
            <tr>
              <td><code>long</code></td>
              <td><code>Long</code></td>
              <td><code>Long l = new Long(100000L);</code></td>
            </tr>
            <tr>
              <td><code>float</code></td>
              <td><code>Float</code></td>
              <td><code>Float f = new Float(5.75f);</code></td>
            </tr>
            <tr>
              <td><code>double</code></td>
              <td><code>Double</code></td>
              <td><code>Double d = new Double(5.75);</code></td>
            </tr>
            <tr>
              <td><code>char</code></td>
              <td><code>Character</code></td>
              <td><code>Character c = new Character('A');</code></td>
            </tr>
            <tr>
              <td><code>boolean</code></td>
              <td><code>Boolean</code></td>
              <td><code>Boolean b = new Boolean(true);</code></td>
            </tr>
          </table>
          <p>Since Java 5, you can use autoboxing and unboxing to convert automatically:</p>
          <div class="code-block">
// Autoboxing: primitive to wrapper
Integer i = 100;  // Same as: Integer i = Integer.valueOf(100);

// Unboxing: wrapper to primitive
int j = i;  // Same as: int j = i.intValue();
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔄 Casting & Autoboxing</h2>
          <div class="card-icon">🔄</div>
        </div>
        <div class="card-content">
          <p>Casting is converting one data type to another. There are two types:</p>
          <ul>
            <li><strong>Widening (Implicit)</strong>: Converting a smaller type to a larger type (safe)</li>
            <li><strong>Narrowing (Explicit)</strong>: Converting a larger type to a smaller type (may lose data)</li>
          </ul>
          <div class="code-block">
// Widening (Implicit)
int i = 100;
long l = i;  // int to long (safe)

// Narrowing (Explicit)
double d = 5.7;
int j = (int) d;  // double to int (loses decimal part)
// j will be 5
          </div>
          <p>Autoboxing and unboxing automatically convert between primitives and their wrapper classes:</p>
          <div class="code-block">
// Autoboxing: primitive to wrapper
Integer num = 10;  // Automatically converted to Integer.valueOf(10)

// Unboxing: wrapper to primitive
int primitive = num;  // Automatically converted to num.intValue()
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📏 ➡️ 📐 (Safe)</div>
              <div style="font-size: 3rem; margin-bottom: 1rem;">📐 ➡️ 📏 (May lose data)</div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📊 Arrays</h2>
          <div class="card-icon">📊</div>
        </div>
        <div class="card-content">
          <p>An array is a fixed-size collection of elements of the same type. Think of it as a row of labeled boxes:</p>
          <div class="code-block">
// Declare and initialize an array
int[] scores = {85, 90, 78, 92, 88};

// Access elements by index (starts from 0)
int firstScore = scores[0];  // 85
int thirdScore = scores[2];   // 78

// Change an element
scores[1] = 95;  // Change 90 to 95

// Get the length of the array
int length = scores.length;  // 5
          </div>
          <div class="visual">
            <div style="display: flex; justify-content: center; gap: 10px;">
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">0</div>
                <div>85</div>
              </div>
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">1</div>
                <div>95</div>
              </div>
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">2</div>
                <div>78</div>
              </div>
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">3</div>
                <div>92</div>
              </div>
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">4</div>
                <div>88</div>
              </div>
            </div>
          </div>
          <p>You can also create multidimensional arrays:</p>
          <div class="code-block">
// 2D array (like a table)
int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

// Access element at row 1, column 2
int value = matrix[1][2];  // 6
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔤 Strings</h2>
          <div class="card-icon">🔤</div>
        </div>
        <div class="card-content">
          <p>A String is a sequence of characters. In Java, Strings are objects, not primitive types.</p>
          <div class="code-block">
// Creating Strings
String greeting = "Hello, World!";
String name = new String("John");

// String concatenation
String message = greeting + " My name is " + name;

// Getting the length
int length = greeting.length();  // 13

// Accessing characters
char firstChar = greeting.charAt(0);  // 'H'

// Substring
String sub = greeting.substring(0, 5);  // "Hello"

// Converting case
String upper = greeting.toUpperCase();  // "HELLO, WORLD!"
String lower = greeting.toLowerCase();  // "hello, world!"
          </div>
          <p>Strings in Java are <strong>immutable</strong>, which means once created, they cannot be changed. Any operation that "modifies" a String actually creates a new one:</p>
          <div class="code-block">
String s1 = "Hello";
String s2 = s1.concat(", World!");  // Creates a new String
// s1 is still "Hello"
// s2 is "Hello, World!"
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔒</div>
              <p>Strings are immutable (locked) - once created, they can't be changed!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🧮 Operators</h2>
          <div class="card-icon">🧮</div>
        </div>
        <div class="card-content">
          <p>Operators are special symbols that perform operations on variables and values:</p>
          <table>
            <tr>
              <th>Category</th>
              <th>Operators</th>
              <th>Example</th>
            </tr>
            <tr>
              <td>Arithmetic</td>
              <td><code>+ - * / %</code></td>
              <td><code>int sum = 5 + 3;</code></td>
            </tr>
            <tr>
              <td>Assignment</td>
              <td><code>= += -= *= /= %=</code></td>
              <td><code>int x = 5; x += 3;</code></td>
            </tr>
            <tr>
              <td>Comparison</td>
              <td><code>== != > < >= <=</code></td>
              <td><code>boolean result = 5 > 3;</code></td>
            </tr>
            <tr>
              <td>Logical</td>
              <td><code>&& || !</code></td>
              <td><code>boolean result = true && false;</code></td>
            </tr>
            <tr>
              <td>Ternary</td>
              <td><code>?:</code></td>
              <td><code>int max = (a > b) ? a : b;</code></td>
            </tr>
            <tr>
              <td>Increment/Decrement</td>
              <td><code>++ --</code></td>
              <td><code>int x = 5; x++;</code></td>
            </tr>
          </table>
          <div class="code-block">
// Arithmetic operators
int a = 10;
int b = 3;
int sum = a + b;      // 13
int diff = a - b;     // 7
int product = a * b;  // 30
int quotient = a / b; // 3
int remainder = a % b; // 1

// Comparison operators
boolean isEqual = (a == b);      // false
boolean isNotEqual = (a != b);  // true
boolean isGreater = (a > b);    // true
boolean isLessOrEqual = (a <= b); // false

// Logical operators
boolean p = true;
boolean q = false;
boolean andResult = p && q;  // false
boolean orResult = p || q;   // true
boolean notResult = !p;      // false

// Ternary operator
int min = (a < b) ? a : b;  // 3
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔄 Control Flow</h2>
          <div class="card-icon">🔄</div>
        </div>
        <div class="card-content">
          <p>Control flow statements allow you to control the order in which your code executes:</p>
          <h3>If-Else Statements</h3>
          <div class="code-block">
int temperature = 25;

if (temperature > 30) {
    System.out.println("It's hot!");
} else if (temperature > 20) {
    System.out.println("It's pleasant.");
} else {
    System.out.println("It's cold.");
}
// Output: It's pleasant.
          </div>
          <h3>Switch Statement</h3>
          <div class="code-block">
int day = 3;
String dayName;

switch (day) {
    case 1:
        dayName = "Monday";
        break;
    case 2:
        dayName = "Tuesday";
        break;
    case 3:
        dayName = "Wednesday";
        break;
    default:
        dayName = "Unknown";
        break;
}

System.out.println(dayName);  // Wednesday
          </div>
          <h3>Loops</h3>
          <div class="code-block">
// For loop
for (int i = 1; i <= 5; i++) {
    System.out.println("Count: " + i);
}

// While loop
int count = 1;
while (count <= 5) {
    System.out.println("Count: " + count);
    count++;
}

// Do-while loop (executes at least once)
int num = 1;
do {
    System.out.println("Number: " + num);
    num++;
} while (num <= 5);
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔀</div>
              <p>Control flow helps your program make decisions and repeat tasks!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>⚙️ Methods</h2>
          <div class="card-icon">⚙️</div>
        </div>
        <div class="card-content">
          <p>Methods (also called functions) are reusable blocks of code that perform a specific task. Think of them as recipes:</p>
          <div class="code-block">
// Method syntax
returnType methodName(parameter1, parameter2, ...) {
    // Method body
    return value;  // Only if returnType is not void
}

// Example method with no parameters and no return value
void sayHello() {
    System.out.println("Hello!");
}

// Example method with parameters and no return value
void greet(String name) {
    System.out.println("Hello, " + name + "!");
}

// Example method with parameters and return value
int add(int a, int b) {
    return a + b;
}

// Calling methods
sayHello();  // Output: Hello!
greet("John");  // Output: Hello, John!
int sum = add(5, 3);  // sum = 8
System.out.println("Sum: " + sum);  // Output: Sum: 8
          </div>
          <p>Methods help organize code, avoid repetition, and make programs easier to understand and maintain.</p>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📋</div>
              <p>Methods are like recipes: follow the steps to get a result!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>💻 Command Line Arguments</h2>
          <div class="card-icon">💻</div>
        </div>
        <div class="card-content">
          <p>Command line arguments allow you to pass information to your program when you run it:</p>
          <div class="code-block">
public class CommandLineArgs {
    public static void main(String[] args) {
        // args is an array of strings containing the command line arguments
        System.out.println("Number of arguments: " + args.length);
        
        // Print all arguments
        for (int i = 0; i < args.length; i++) {
            System.out.println("Argument " + i + ": " + args[i]);
        }
        
        // Example: Convert first argument to integer
        if (args.length > 0) {
            try {
                int number = Integer.parseInt(args[0]);
                System.out.println("First argument as number: " + number);
            } catch (NumberFormatException e) {
                System.out.println("First argument is not a valid number.");
            }
        }
    }
}
          </div>
          <p>To run this program with arguments:</p>
          <div class="code-block">
# Compile
javac CommandLineArgs.java

# Run with arguments
java CommandLineArgs 10 Hello 3.14
          </div>
          <p>Output:</p>
          <div class="code-block">
Number of arguments: 3
Argument 0: 10
Argument 1: Hello
Argument 2: 3.14
First argument as number: 10
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">💾</div>
              <p>Command line arguments are like giving your program instructions when you start it!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📝 Varargs</h2>
          <div class="card-icon">📝</div>
        </div>
        <div class="card-content">
          <p>Varargs (variable arguments) allow a method to accept zero or multiple arguments of the same type:</p>
          <div class="code-block">
// Varargs syntax: type... name
int sum(int... numbers) {
    int total = 0;
    for (int num : numbers) {
        total += num;
    }
    return total;
}

// Calling the method with different numbers of arguments
System.out.println(sum());           // 0
System.out.println(sum(5));          // 5
System.out.println(sum(5, 10));       // 15
System.out.println(sum(5, 10, 15));  // 30

// Varargs with other parameters
void printInfo(String name, int... scores) {
    System.out.println("Name: " + name);
    System.out.println("Scores: ");
    for (int score : scores) {
        System.out.println("  " + score);
    }
}

printInfo("John", 85, 90, 78);
          </div>
          <p>Rules for varargs:</p>
          <ul>
            <li>There can be only one varargs parameter in a method</li>
            <li>The varargs parameter must be the last parameter</li>
            <li>Inside the method, the varargs parameter is treated as an array</li>
          </ul>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📦</div>
              <p>Varargs are like a flexible box that can hold any number of items!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🏗️ Classes & Objects</h2>
          <div class="card-icon">🏗️</div>
        </div>
        <div class="card-content">
          <p>Classes and objects are fundamental concepts in Object-Oriented Programming (OOP):</p>
          <ul>
            <li><strong>Class</strong>: A blueprint or template for creating objects</li>
            <li><strong>Object</strong>: An instance of a class</li>
          </ul>
          <p>Think of a class as a cookie cutter and objects as the actual cookies:</p>
          <div class="code-block">
// Class definition (blueprint)
class Student {
    // Attributes (data)
    String name;
    int age;
    double gpa;
    
    // Constructor (initializes the object)
    Student(String name, int age, double gpa) {
        this.name = name;
        this.age = age;
        this.gpa = gpa;
    }
    
    // Method (behavior)
    void study() {
        System.out.println(name + " is studying.");
    }
    
    // Another method
    void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("GPA: " + gpa);
    }
}

// Creating objects (instances of the class)
Student student1 = new Student("John", 20, 3.8);
Student student2 = new Student("Jane", 21, 3.9);

// Using objects
student1.study();  // Output: John is studying.
student2.study();  // Output: Jane is studying.

student1.displayInfo();
// Output:
// Name: John
// Age: 20
// GPA: 3.8
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🍪</div>
              <p>Class = Cookie Cutter, Objects = Actual Cookies</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🎮 Interactive: Match Data Types</h2>
          <div class="card-icon">🎮</div>
        </div>
        <div class="card-content">
          <p>Drag and match the real-life items to their appropriate data types:</p>
          <div class="interactive">
            <div class="drag-container">
              <div class="drag-items">
                <div class="drag-item" draggable="true" data-type="int">Age</div>
                <div class="drag-item" draggable="true" data-type="String">Name</div>
                <div class="drag-item" draggable="true" data-type="boolean">Is Student</div>
                <div class="drag-item" draggable="true" data-type="double">Height</div>
                <div class="drag-item" draggable="true" data-type="char">Grade</div>
              </div>
              <div class="drop-zones">
                <div class="drop-zone" data-accept="int">int</div>
                <div class="drop-zone" data-accept="String">String</div>
                <div class="drop-zone" data-accept="boolean">boolean</div>
                <div class="drop-zone" data-accept="double">double</div>
                <div class="drop-zone" data-accept="char">char</div>
              </div>
            </div>
            <div id="match-feedback" style="text-align: center; margin-top: 1rem; font-weight: bold;"></div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="checkMatchGame()">Check Answers</button>
          <button onclick="resetMatchGame()">Reset</button>
        </div>
      </div>
    </section>
    
    <!-- Section 2: Object-Oriented Programming Core -->
    <section id="section2" class="section">
      <div class="card">
        <div class="card-header">
          <h2>🔒 Encapsulation</h2>
          <div class="card-icon">🔒</div>
        </div>
        <div class="card-content">
          <p>Encapsulation is the practice of hiding the internal details of an object and exposing only what is necessary. Think of it like a diary with a lock:</p>
          <div class="code-block">
public class Diary {
    // Private field - hidden from outside
    private String content;
    
    // Constructor
    public Diary(String initialContent) {
        this.content = initialContent;
    }
    
    // Public method to read the diary (controlled access)
    public String readDiary() {
        return content;
    }
    
    // Public method to add to the diary (controlled access)
    public void addToDiary(String entry) {
        content += "\n" + entry;
    }
    
    // Private method - only accessible within this class
    private boolean isSensitive(String text) {
        return text.contains("secret");
    }
}

// Using the Diary class
Diary myDiary = new Diary("Today was a good day.");
System.out.println(myDiary.readDiary());  // Can read

myDiary.addToDiary("I learned Java.");  // Can add
// myDiary.content = "Hacked!";  // Error: content is private
// myDiary.isSensitive("test");  // Error: isSensitive is private
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📓🔒</div>
              <p>Your diary is private. Use 'readDiary()' to read it safely!</p>
            </div>
          </div>
          <p>Benefits of encapsulation:</p>
          <ul>
            <li>Protects the internal state of an object</li>
            <li>Provides controlled access through methods</li>
            <li>Makes code more maintainable and flexible</li>
            <li>Prevents unauthorized access</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🧬 Inheritance</h2>
          <div class="card-icon">🧬</div>
        </div>
        <div class="card-content">
          <p>Inheritance allows a class to inherit properties and methods from another class. Think of it like inheriting traits from your parents:</p>
          <div class="code-block">
// Parent class (superclass)
class Animal {
    String name;
    
    public Animal(String name) {
        this.name = name;
    }
    
    public void eat() {
        System.out.println(name + " is eating.");
    }
    
    public void sleep() {
        System.out.println(name + " is sleeping.");
    }
}

// Child class (subclass) inheriting from Animal
class Dog extends Animal {
    String breed;
    
    public Dog(String name, String breed) {
        super(name);  // Call the parent class constructor
        this.breed = breed;
    }
    
    // New method specific to Dog
    public void bark() {
        System.out.println(name + " is barking.");
    }
    
    // Overriding a method from the parent class
    @Override
    public void eat() {
        System.out.println(name + " is eating dog food.");
    }
}

// Creating and using objects
Animal animal = new Animal("Generic Animal");
animal.eat();  // Output: Generic Animal is eating.

Dog dog = new Dog("Buddy", "Golden Retriever");
dog.eat();     // Output: Buddy is eating dog food. (overridden method)
dog.sleep();   // Output: Buddy is sleeping. (inherited method)
dog.bark();    // Output: Buddy is barking. (specific to Dog)
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👨‍👩‍👧‍👦</div>
              <p>You inherit your dad's nose and mom's smile!</p>
            </div>
          </div>
          <p>Key points about inheritance:</p>
          <ul>
            <li>Uses the <code>extends</code> keyword</li>
            <li>A subclass inherits all non-private members of the superclass</li>
            <li>A subclass can add new fields and methods</li>
            <li>A subclass can override methods from the superclass</li>
            <li>Single inheritance: A class can extend only one class in Java</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🎭 Polymorphism</h2>
          <div class="card-icon">🎭</div>
        </div>
        <div class="card-content">
          <p>Polymorphism allows objects of different classes to be treated as objects of a common superclass. It means "many forms" - the same interface can have different implementations:</p>
          <div class="code-block">
// Parent class
class Animal {
    public void makeSound() {
        System.out.println("Some generic animal sound");
    }
}

// Child classes
class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Woof! Woof!");
    }
}

class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Meow!");
    }
}

class Duck extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Quack!");
    }
}

// Polymorphism in action
Animal myDog = new Dog();  // Dog object treated as Animal
Animal myCat = new Cat();  // Cat object treated as Animal
Animal myDuck = new Duck();  // Duck object treated as Animal

myDog.makeSound();   // Output: Woof! Woof!
myCat.makeSound();   // Output: Meow!
myDuck.makeSound();  // Output: Quack!

// Polymorphic method
void performSound(Animal animal) {
    animal.makeSound();
}

performSound(new Dog());   // Output: Woof! Woof!
performSound(new Cat());   // Output: Meow!
performSound(new Duck());  // Output: Quack!
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🎮</div>
              <p>Same button, different result: Play music vs Play video!</p>
            </div>
          </div>
          <p>Types of polymorphism:</p>
          <ul>
            <li><strong>Compile-time (Method Overloading)</strong>: Multiple methods with the same name but different parameters</li>
            <li><strong>Runtime (Method Overriding)</strong>: A subclass provides a specific implementation of a method already defined in its superclass</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📚 Method Overloading</h2>
          <div class="card-icon">📚</div>
        </div>
        <div class="card-content">
          <p>Method overloading is a form of compile-time polymorphism where multiple methods have the same name but different parameters. Think of it as different ways to cook:</p>
          <div class="code-block">
class Cook {
    // Method to cook rice
    public void cook(String food) {
        System.out.println("Cooking " + food + " with basic recipe.");
    }
    
    // Overloaded method: same name, different parameters
    public void cook(String food, int time) {
        System.out.println("Cooking " + food + " for " + time + " minutes.");
    }
    
    // Another overloaded method
    public void cook(String food, int time, String technique) {
        System.out.println("Cooking " + food + " for " + time + 
                          " minutes using " + technique + " technique.");
    }
    
    // Overloaded method with different parameter types
    public void cook(String[] foods) {
        System.out.println("Cooking multiple foods:");
        for (String food : foods) {
            System.out.println("  - " + food);
        }
    }
}

// Using the overloaded methods
Cook chef = new Cook();
chef.cook("rice");  // Output: Cooking rice with basic recipe.
chef.cook("vegetables", 15);  // Output: Cooking vegetables for 15 minutes.
chef.cook("steak", 30, "grilling");  // Output: Cooking steak for 30 minutes using grilling technique.
String[] dishes = {"pasta", "salad", "bread"};
chef.cook(dishes);  // Output: Cooking multiple foods: - pasta - salad - bread
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👨‍🍳</div>
              <p>Same name, different input: cook(rice), cook(veggies, time)</p>
            </div>
          </div>
          <p>Rules for method overloading:</p>
          <ul>
            <li>Methods must have the same name</li>
            <li>Methods must have different parameters (number, type, or order)</li>
            <li>Return type can be different, but it alone is not sufficient for overloading</li>
            <li>Compiler decides which method to call based on the arguments</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔄 Method Overriding</h2>
          <div class="card-icon">🔄</div>
        </div>
        <div class="card-content">
          <p>Method overriding is a form of runtime polymorphism where a subclass provides a specific implementation of a method already defined in its superclass. Think of it as children saying "Hi!" differently than their parents:</p>
          <div class="code-block">
// Parent class
class Person {
    public void greet() {
        System.out.println("Hello!");
    }
}

// Child class overriding the greet method
class Child extends Person {
    @Override
    public void greet() {
        System.out.println("Hi hi!");
    }
}

// Another child class with a different greeting
class Teenager extends Person {
    @Override
    public void greet() {
        System.out.println("Yo!");
    }
}

// Using the classes
Person person = new Person();
person.greet();  // Output: Hello!

Child child = new Child();
child.greet();  // Output: Hi hi!

Teenager teen = new Teenager();
teen.greet();  // Output: Yo!

// Polymorphism
Person p1 = new Child();
Person p2 = new Teenager();
p1.greet();  // Output: Hi hi!
p2.greet();  // Output: Yo!
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👶</div>
              <p>Child says 'Hi!' differently than parent!</p>
            </div>
          </div>
          <p>Rules for method overriding:</p>
          <ul>
            <li>Method must have the same name, return type, and parameters</li>
            <li>Access modifier cannot be more restrictive (e.g., can't override public with private)</li>
            <li>Use <code>@Override</code> annotation (good practice, not required)</li>
            <li>Final and static methods cannot be overridden</li>
            <li>Constructors cannot be overridden</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📺 Dynamic Dispatch</h2>
          <div class="card-icon">📺</div>
        </div>
        <div class="card-content">
          <p>Dynamic dispatch is the mechanism by which a call to an overridden method is resolved at runtime rather than at compile time. Think of it like a universal remote control that works with any brand of TV:</p>
          <div class="code-block">
// Parent class
class TV {
    public void powerOn() {
        System.out.println("TV is turning on with standard settings.");
    }
    
    public void changeChannel(int channel) {
        System.out.println("Changing to channel " + channel);
    }
}

// Child classes
class SamsungTV extends TV {
    @Override
    public void powerOn() {
        System.out.println("Samsung TV is turning on with Smart Hub.");
    }
    
    @Override
    public void changeChannel(int channel) {
        System.out.println("Samsung TV changing to channel " + channel + " with Smart Guide.");
    }
}

class LgTV extends TV {
    @Override
    public void powerOn() {
        System.out.println("LG TV is turning on with webOS.");
    }
    
    @Override
    public void changeChannel(int channel) {
        System.out.println("LG TV changing to channel " + channel + " with Magic Remote.");
    }
}

// Dynamic dispatch in action
TV tv1 = new SamsungTV();  // SamsungTV object referenced as TV
TV tv2 = new LgTV();       // LgTV object referenced as TV

// The actual method called is determined at runtime
tv1.powerOn();     // Output: Samsung TV is turning on with Smart Hub.
tv1.changeChannel(5);  // Output: Samsung TV changing to channel 5 with Smart Guide.

tv2.powerOn();     // Output: LG TV is turning on with webOS.
tv2.changeChannel(7);  // Output: LG TV changing to channel 7 with Magic Remote.

// Method that works with any TV subclass
void operateTV(TV tv, int channel) {
    tv.powerOn();
    tv.changeChannel(channel);
}

operateTV(new SamsungTV(), 10);  // Output: Samsung TV is turning on with Smart Hub. Samsung TV changing to channel 10 with Smart Guide.
operateTV(new LgTV(), 12);       // Output: LG TV is turning on with webOS. LG TV changing to channel 12 with Magic Remote.
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📡</div>
              <p>Remote control works on any brand TV!</p>
            </div>
          </div>
          <p>Key points about dynamic dispatch:</p>
          <ul>
            <li>Method selection happens at runtime based on the actual object type</li>
            <li>Enables polymorphism and flexible code design</li>
            <li>Only applies to overridden methods (not overloaded or static methods)</li>
            <li>Allows writing code that works with objects of different subclasses through a common superclass reference</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🏗️ Constructors</h2>
          <div class="card-icon">🏗️</div>
        </div>
        <div class="card-content">
          <p>A constructor is a special method used to initialize objects. Think of it like the birth of a person - when you're born, you get a name and other attributes:</p>
          <div class="code-block">
class Person {
    String name;
    int birthYear;
    
    // Default constructor (no parameters)
    public Person() {
        name = "Unknown";
        birthYear = 2000;
    }
    
    // Parameterized constructor
    public Person(String name, int birthYear) {
        this.name = name;
        this.birthYear = birthYear;
    }
    
    // Copy constructor
    public Person(Person other) {
        this.name = other.name;
        this.birthYear = other.birthYear;
    }
    
    public void displayInfo() {
        System.out.println("Name: " + name + ", Born: " + birthYear);
    }
}

// Using constructors
Person person1 = new Person();  // Using default constructor
person1.displayInfo();  // Output: Name: Unknown, Born: 2000

Person person2 = new Person("John", 1995);  // Using parameterized constructor
person2.displayInfo();  // Output: Name: John, Born: 1995

Person person3 = new Person(person2);  // Using copy constructor
person3.displayInfo();  // Output: Name: John, Born: 1995
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👶</div>
              <p>When you're born, you get a name and birthday!</p>
            </div>
          </div>
          <p>Key points about constructors:</p>
          <ul>
            <li>Same name as the class</li>
            <li>No return type (not even void)</li>
            <li>Automatically called when an object is created</li>
            <li>Can be overloaded (multiple constructors with different parameters)</li>
            <li>If no constructor is defined, Java provides a default constructor</li>
            <li>Use <code>this()</code> to call another constructor in the same class</li>
            <li>Use <code>super()</code> to call the parent class constructor</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>👉 this keyword</h2>
          <div class="card-icon">👉</div>
        </div>
        <div class="card-content">
          <p>The <code>this</code> keyword refers to the current object - the instance whose method or constructor is being called. Think of it as saying "me" or "myself":</p>
          <div class="code-block">
class Student {
    String name;
    int age;
    
    // Using 'this' to distinguish between instance variables and parameters
    public Student(String name, int age) {
        this.name = name;  // 'this.name' refers to the instance variable
        this.age = age;    // 'this.age' refers to the instance variable
    }
    
    // Using 'this' to call another constructor
    public Student(String name) {
        this(name, 18);  // Calls the constructor with two parameters
    }
    
    // Using 'this' to pass the current object to a method
    public void register(Course course) {
        course.addStudent(this);  // Passes the current Student object
    }
    
    // Using 'this' to return the current object
    public Student setAge(int age) {
        this.age = age;
        return this;  // Enables method chaining
    }
    
    public void display() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

class Course {
    public void addStudent(Student student) {
        System.out.println(student.name + " has been added to the course.");
    }
}

// Using 'this'
Student student1 = new Student("John", 20);
student1.display();  // Output: Name: John, Age: 20

Student student2 = new Student("Jane");  // Uses constructor with one parameter
student2.display();  // Output: Name: Jane, Age: 18

Course mathCourse = new Course();
student1.register(mathCourse);  // Output: John has been added to the course.

// Method chaining
student1.setAge(21).display();  // Output: Name: John, Age: 21
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👤</div>
              <p>'this' refers to 'me' — the current object!</p>
            </div>
          </div>
          <p>Uses of <code>this</code>:</p>
          <ul>
            <li>To differentiate between instance variables and parameters with the same name</li>
            <li>To call another constructor in the same class</li>
            <li>To pass the current object as a parameter to a method</li>
            <li>To return the current object from a method (for method chaining)</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔐 Access Modifiers</h2>
          <div class="card-icon">🔐</div>
        </div>
        <div class="card-content">
          <p>Access modifiers control the visibility of classes, methods, and variables. They determine who can access what:</p>
          <table>
            <tr>
              <th>Modifier</th>
              <th>Class</th>
              <th>Package</th>
              <th>Subclass</th>
              <th>World</th>
              <th>Description</th>
            </tr>
            <tr>
              <td><code>public</code></td>
              <td>✅</td>
              <td>✅</td>
              <td>✅</td>
              <td>✅</td>
              <td>👥 Accessible from anywhere</td>
            </tr>
            <tr>
              <td><code>protected</code></td>
              <td>✅</td>
              <td>✅</td>
              <td>✅</td>
              <td>❌</td>
              <td>🤝 Accessible within the package and by subclasses</td>
            </tr>
            <tr>
              <td><em>default</em></td>
              <td>✅</td>
              <td>✅</td>
              <td>❌</td>
              <td>❌</td>
              <td>🏠 Accessible only within the package</td>
            </tr>
            <tr>
              <td><code>private</code></td>
              <td>✅</td>
              <td>❌</td>
              <td>❌</td>
              <td>❌</td>
              <td>🔒 Accessible only within the class</td>
            </tr>
          </table>
          <div class="code-block">
package com.example;

public class AccessExample {
    public int publicVar = 1;       // Accessible from anywhere
    protected int protectedVar = 2;  // Accessible within package and subclasses
    int defaultVar = 3;             // Accessible only within package
    private int privateVar = 4;      // Accessible only within this class
    
    public void publicMethod() {
        // Can access all variables
        System.out.println(publicVar + " " + protectedVar + " " + 
                          defaultVar + " " + privateVar);
    }
    
    private void privateMethod() {
        System.out.println("This is a private method.");
    }
    
    // Public method that calls the private method
    public void callPrivate() {
        privateMethod();
    }
}

// In the same package
class SamePackage {
    void testAccess() {
        AccessExample example = new AccessExample();
        System.out.println(example.publicVar);    // OK
        System.out.println(example.protectedVar); // OK
        System.out.println(example.defaultVar);   // OK
        // System.out.println(example.privateVar); // Compile error
        example.publicMethod();  // OK
        // example.privateMethod();  // Compile error
        example.callPrivate();   // OK (public method calling private method)
    }
}

// In a different package
package com.another;

import com.example.AccessExample;

class DifferentPackage extends AccessExample {
    void testAccess() {
        AccessExample example = new AccessExample();
        System.out.println(example.publicVar);    // OK
        // System.out.println(example.protectedVar); // Compile error
        // System.out.println(example.defaultVar);   // Compile error
        // System.out.println(example.privateVar); // Compile error
        
        // As a subclass, can access protected members through inheritance
        System.out.println(protectedVar);  // OK (inherited protected member)
        
        example.publicMethod();  // OK
        // example.privateMethod();  // Compile error
        example.callPrivate();   // OK
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔑</div>
              <p>Access modifiers are like keys - they determine who can open which doors!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔄 Static Members</h2>
          <div class="card-icon">🔄</div>
        </div>
        <div class="card-content">
          <p>Static members belong to the class rather than to instances of the class. Think of them as shared resources among all objects:</p>
          <div class="code-block">
class Student {
    private String name;
    private int rollNumber;
    
    // Static variable - shared among all instances
    private static int totalStudents = 0;
    
    // Static constant
    public static final String SCHOOL_NAME = "ABC School";
    
    public Student(String name) {
        this.name = name;
        this.rollNumber = ++totalStudents;  // Increment and assign
    }
    
    // Instance method
    public void display() {
        System.out.println("Name: " + name + ", Roll Number: " + rollNumber);
    }
    
    // Static method
    public static int getTotalStudents() {
        return totalStudents;
    }
    
    // Static block - executed when the class is loaded
    static {
        System.out.println("Student class is loaded.");
        totalStudents = 0;
    }
}

// Using static members
System.out.println("Total students: " + Student.getTotalStudents());  // 0
System.out.println("School: " + Student.SCHOOL_NAME);  // ABC School

Student s1 = new Student("John");
Student s2 = new Student("Jane");
Student s3 = new Student("Bob");

s1.display();  // Name: John, Roll Number: 1
s2.display();  // Name: Jane, Roll Number: 2
s3.display();  // Name: Bob, Roll Number: 3

System.out.println("Total students: " + Student.getTotalStudents());  // 3
System.out.println("School: " + Student.SCHOOL_NAME);  // ABC School
System.out.println("School: " + s1.SCHOOL_NAME);  // Also works but not recommended
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">💰</div>
              <p>Shared among all: like a class fund everyone contributes to!</p>
            </div>
          </div>
          <p>Key points about static members:</p>
          <ul>
            <li>Static variables are shared among all instances of a class</li>
            <li>Static methods can be called without creating an object</li>
            <li>Static methods can only access static variables and call other static methods</li>
            <li>Static blocks are executed when the class is loaded into memory</li>
            <li>Static members are accessed using the class name, not object references</li>
            <li>Static final variables are constants</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔒 Final Keyword</h2>
          <div class="card-icon">🔒</div>
        </div>
        <div class="card-content">
          <p>The <code>final</code> keyword is used to restrict the user. It can be used with variables, methods, and classes to make them unchangeable:</p>
          <div class="code-block">
// Final variable (constant)
final double PI = 3.14159;
// PI = 3.14;  // Compile error: cannot assign a value to final variable

// Final reference variable (the reference cannot be changed, but the object can be modified)
final StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");  // OK, we're modifying the object, not the reference
// sb = new StringBuilder("Hi");  // Compile error: cannot assign a value to final variable

// Final method (cannot be overridden)
class Parent {
    public final void show() {
        System.out.println("Parent's show method");
    }
}

class Child extends Parent {
    // @Override
    // public void show() {  // Compile error: cannot override final method
    //     System.out.println("Child's show method");
    // }
}

// Final class (cannot be extended)
final class FinalClass {
    // Class implementation
}

// class SubClass extends FinalClass {  // Compile error: cannot inherit from final class
// }
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔒</div>
              <p>Lock it down: final variable = constant, final method = can't override!</p>
            </div>
          </div>
          <p>Uses of the <code>final</code> keyword:</p>
          <ul>
            <li><strong>Final variable</strong>: Makes a variable constant (cannot be reassigned)</li>
            <li><strong>Final method</strong>: Prevents method overriding in subclasses</li>
            <li><strong>Final class</strong>: Prevents class inheritance (cannot be extended)</li>
            <li><strong>Final parameter</strong>: Prevents parameter modification within a method</li>
          </ul>
          <p>Benefits of using <code>final</code>:</p>
          <ul>
            <li>Creates immutable objects (thread-safe)</li>
            <li>Prevents accidental modification</li>
            <li>Allows the compiler to optimize code</li>
            <li>Clearly communicates design intent</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🏗️ Abstract Class</h2>
          <div class="card-icon">🏗️</div>
        </div>
        <div class="card-content">
          <p>An abstract class is a class that cannot be instantiated and may contain abstract methods (methods without a body). Think of it as a half-built house:</p>
          <div class="code-block">
// Abstract class
abstract class Shape {
    String color;
    
    // Constructor
    public Shape(String color) {
        this.color = color;
    }
    
    // Abstract method (no body)
    public abstract double area();
    
    // Abstract method (no body)
    public abstract double perimeter();
    
    // Concrete method (with body)
    public void displayColor() {
        System.out.println("Color: " + color);
    }
}

// Concrete subclass
class Circle extends Shape {
    double radius;
    
    public Circle(String color, double radius) {
        super(color);
        this.radius = radius;
    }
    
    // Implementing abstract methods
    @Override
    public double area() {
        return Math.PI * radius * radius;
    }
    
    @Override
    public double perimeter() {
        return 2 * Math.PI * radius;
    }
}

// Another concrete subclass
class Rectangle extends Shape {
    double length;
    double width;
    
    public Rectangle(String color, double length, double width) {
        super(color);
        this.length = length;
        this.width = width;
    }
    
    // Implementing abstract methods
    @Override
    public double area() {
        return length * width;
    }
    
    @Override
    public double perimeter() {
        return 2 * (length + width);
    }
}

// Using the classes
// Shape shape = new Shape("Red");  // Compile error: cannot instantiate abstract class

Circle circle = new Circle("Red", 5.0);
System.out.println("Circle area: " + circle.area());  // Circle area: 78.539...
circle.displayColor();  // Color: Red

Rectangle rectangle = new Rectangle("Blue", 4.0, 6.0);
System.out.println("Rectangle area: " + rectangle.area());  // Rectangle area: 24.0
rectangle.displayColor();  // Color: Blue
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🏠</div>
              <p>Half-built house: walls up, but kitchen unfinished!</p>
            </div>
          </div>
          <p>Key points about abstract classes:</p>
          <ul>
            <li>Cannot be instantiated (cannot create objects)</li>
            <li>Can have both abstract and concrete methods</li>
            <li>Abstract methods must be implemented by non-abstract subclasses</li>
            <li>Can have constructors and instance variables</li>
            <li>Can have final methods (which cannot be overridden)</li>
            <li>Used to provide a base class with common functionality</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📋 Interface</h2>
          <div class="card-icon">📋</div>
        </div>
        <div class="card-content">
          <p>An interface is a reference type in Java, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types. Think of it as a contract:</p>
          <div class="code-block">
// Interface
interface Flyable {
    // Constant (public, static, final by default)
    double MAX_SPEED = 100.0;
    
    // Abstract method (public, abstract by default)
    void fly();
    
    // Default method (Java 8+)
    default void takeOff() {
        System.out.println("Taking off...");
    }
    
    // Static method (Java 8+)
    static void describe() {
        System.out.println("This is the Flyable interface.");
    }
}

// Another interface
interface Swimmable {
    void swim();
}

// Class implementing multiple interfaces
class Duck implements Flyable, Swimmable {
    private String name;
    
    public Duck(String name) {
        this.name = name;
    }
    
    // Implementing Flyable interface methods
    @Override
    public void fly() {
        System.out.println(name + " is flying at " + MAX_SPEED + " km/h.");
    }
    
    // takeOff() uses the default implementation from Flyable
    
    // Implementing Swimmable interface methods
    @Override
    public void swim() {
        System.out.println(name + " is swimming.");
    }
}

// Using the interfaces
Flyable.describe();  // Output: This is the Flyable interface.

Duck duck = new Duck("Donald");
duck.fly();        // Output: Donald is flying at 100.0 km/h.
duck.takeOff();    // Output: Taking off...
duck.swim();       // Output: Donald is swimming.

// Interface as type
Flyable f = new Duck("Daffy");
f.fly();         // Output: Daffy is flying at 100.0 km/h.
f.takeOff();     // Output: Taking off...
// f.swim();      // Compile error: swim() is not in the Flyable interface
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📝</div>
              <p>Contract: You promise to have these skills!</p>
            </div>
          </div>
          <p>Key points about interfaces:</p>
          <ul>
            <li>Cannot be instantiated</li>
            <li>All methods are abstract by default (before Java 8)</li>
            <li>All variables are public, static, and final by default</li>
            <li>A class can implement multiple interfaces</li>
            <li>Interfaces can extend other interfaces</li>
            <li>Default methods (Java 8+) provide implementation in interfaces</li>
            <li>Static methods (Java 8+) can be called directly on the interface</li>
            <li>Private methods (Java 9+) can be used in default methods</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>⚖️ Abstract vs Interface</h2>
          <div class="card-icon">⚖️</div>
        </div>
        <div class="card-content">
          <p>Both abstract classes and interfaces are used to achieve abstraction, but they have key differences:</p>
          <table>
            <tr>
              <th>Feature</th>
              <th>Abstract Class</th>
              <th>Interface</th>
            </tr>
            <tr>
              <td>Instantiable?</td>
              <td>❌ No</td>
              <td>❌ No</td>
            </tr>
            <tr>
              <td>Can have method body?</td>
              <td>✅ Yes (concrete methods)</td>
              <td>✅ Yes (default methods since Java 8)</td>
            </tr>
            <tr>
              <td>Can have instance variables?</td>
              <td>✅ Yes</td>
              <td>❌ No (only constants)</td>
            </tr>
            <tr>
              <td>Can have constructors?</td>
              <td>✅ Yes</td>
              <td>❌ No</td>
            </tr>
            <tr>
              <td>Multiple inheritance?</td>
              <td>❌ No (single inheritance)</td>
              <td>✅ Yes (a class can implement multiple interfaces)</td>
            </tr>
            <tr>
              <td>Access modifiers for methods?</td>
              <td>Can have any access modifier</td>
              <td>Methods are public by default</td>
            </tr>
            <tr>
              <td>Used for</td>
              <td>Partial implementation with common behavior</td>
              <td>Defining a contract/capability</td>
            </tr>
          </table>
          <div class="code-block">
// Abstract class example
abstract class Vehicle {
    protected String brand;
    
    public Vehicle(String brand) {
        this.brand = brand;
    }
    
    public abstract void start();
    
    public void stop() {
        System.out.println("Vehicle stopped.");
    }
}

// Interface example
interface Electric {
    void charge();
    default void displayBatteryStatus() {
        System.out.println("Battery status: Good");
    }
}

// Class extending abstract class and implementing interface
class ElectricCar extends Vehicle implements Electric {
    public ElectricCar(String brand) {
        super(brand);
    }
    
    @Override
    public void start() {
        System.out.println(brand + " electric car started silently.");
    }
    
    @Override
    public void charge() {
        System.out.println(brand + " is charging.");
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">⚖️</div>
              <p>Abstract class = Partial implementation, Interface = Full contract!</p>
            </div>
          </div>
          <p>When to use which:</p>
            <ul>
            <li><strong>Use an abstract class</strong> when:
              <ul>
                <li>You want to share code among closely related classes</li>
                <li>You want to declare non-static or non-final fields</li>
                <li>You need access modifiers other than public</li>
                <li>You need to define a common base class with some implementation</li>
              </ul>
            </li>
            <li><strong>Use an interface</strong> when:
              <ul>
                <li>You want to define a contract for unrelated classes</li>
                <li>You want to specify a behavior without implementing it</li>
                <li>You want to take advantage of multiple inheritance</li>
                <li>You want to define a capability that can be applied to any class</li>
              </ul>
            </li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🤖 Interactive: Build a Robot</h2>
          <div class="card-icon">🤖</div>
        </div>
        <div class="card-content">
          <p>Let's build a robot using inheritance and interfaces. Choose the features you want your robot to have:</p>
          <div class="interactive">
            <div id="robot-builder">
              <h3>Choose Robot Type:</h3>
              <div class="quiz-options">
                <div class="quiz-option" onclick="selectRobotType('basic')">Basic Robot</div>
                <div class="quiz-option" onclick="selectRobotType('advanced')">Advanced Robot</div>
              </div>
              
              <h3>Choose Capabilities:</h3>
              <div class="quiz-options">
                <div class="quiz-option" onclick="toggleCapability('walk')">Walk</div>
                <div class="quiz-option" onclick="toggleCapability('talk')">Talk</div>
                <div class="quiz-option" onclick="toggleCapability('fly')">Fly</div>
                <div class="quiz-option" onclick="toggleCapability('swim')">Swim</div>
              </div>
              
              <div id="robot-code" style="margin-top: 1rem; display: none;">
                <h3>Your Robot Code:</h3>
                <div class="code-block" id="generated-code"></div>
              </div>
              
              <button onclick="generateRobotCode()" style="margin-top: 1rem;">Generate Robot Code</button>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
    </section>
    
    <!-- Section 3: Packages & Exceptions -->
    <section id="section3" class="section">
      <div class="card">
        <div class="card-header">
          <h2>📁 Packages</h2>
          <div class="card-icon">📁</div>
        </div>
        <div class="card-content">
          <p>Packages in Java are used to group related classes and interfaces. Think of them as folders in a file system:</p>
          <div class="code-block">
// Package declaration at the top of the file
package com.student;

// Importing classes from other packages
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

// Class in the com.student package
public class Student {
    private String name;
    private int id;
    
    public Student(String name, int id) {
        this.name = name;
        this.id = id;
    }
    
    public void display() {
        System.out.println("Name: " + name + ", ID: " + id);
    }
    
    public static void main(String[] args) {
        // Using imported classes
        Scanner scanner = new Scanner(System.in);
        List<String> subjects = new ArrayList<>();
        
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        
        System.out.print("Enter student ID: ");
        int id = scanner.nextInt();
        
        Student student = new Student(name, id);
        student.display();
        
        scanner.close();
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📂</div>
              <p>Like folders: com.school.math vs com.school.history</p>
            </div>
          </div>
          <p>Benefits of packages:</p>
          <ul>
            <li>Organize related classes and interfaces</li>
            <li>Prevent naming conflicts</li>
            <li>Provide access protection</li>
            <li>Make searching/locating classes easier</li>
          </ul>
          <p>Package naming convention:</p>
          <ul>
            <li>Use reverse domain name (e.g., com.example)</li>
            <li>Use lowercase letters</li>
            <li>Separate words with dots (.)</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🛣️ CLASSPATH</h2>
          <div class="card-icon">🛣️</div>
        </div>
        <div class="card-content">
          <p>CLASSPATH is an environment variable that tells the Java Virtual Machine (JVM) where to look for user-defined classes and packages. Think of it as a path in your operating system:</p>
          <div class="code-block">
// Setting CLASSPATH in Windows
set CLASSPATH=C:\myproject\bin;C:\libraries\mylib.jar

// Setting CLASSPATH in Linux/Mac
export CLASSPATH=/home/user/myproject/bin:/home/user/libraries/mylib.jar

// Running Java with CLASSPATH
java -classpath C:\myproject\bin;C:\libraries\mylib.jar com.example.MainClass

// Using the current directory (.) in CLASSPATH
set CLASSPATH=.;C:\libraries\mylib.jar
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🗺️</div>
              <p>Where Java looks for your files — like PATH in Windows!</p>
            </div>
          </div>
          <p>Key points about CLASSPATH:</p>
          <ul>
            <li>Lists directories and JAR files where Java should look for classes</li>
            <li>Separate multiple paths with semicolons (;) in Windows or colons (:) in Linux/Mac</li>
            <li>Include the current directory (.) to look for classes in the current folder</li>
            <li>Can be set as an environment variable or specified with the -classpath or -cp option</li>
            <li>If not set, Java uses the current directory (.) as the default CLASSPATH</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📥 Importing</h2>
          <div class="card-icon">📥</div>
        </div>
        <div class="card-content">
          <p>The import statement is used to import specific classes or entire packages into your Java file. Think of it as bringing tools from another toolbox:</p>
          <div class="code-block">
// Importing a specific class
import java.util.Scanner;

// Importing an entire package
import java.util.*;

// Importing a specific static member
import static java.lang.Math.PI;
import static java.lang.System.out;

// Using imported classes
public class ImportExample {
    public static void main(String[] args) {
        // Using imported Scanner class
        Scanner scanner = new Scanner(System.in);
        
        // Using imported ArrayList class
        java.util.ArrayList<String> list = new java.util.ArrayList<>();
        
        // Using imported static members
        out.println("Value of PI: " + PI);
        
        scanner.close();
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🧰</div>
              <p>Bringing tools from another toolbox!</p>
            </div>
          </div>
          <p>Types of imports:</p>
          <ul>
            <li><strong>Single-type import</strong>: Imports a specific class (e.g., <code>import java.util.Scanner;</code>)</li>
            <li><strong>Type-import-on-demand</strong>: Imports all classes in a package (e.g., <code>import java.util.*;</code>)</li>
            <li><strong>Static import</strong>: Imports static members of a class (e.g., <code>import static java.lang.Math.PI;</code>)</li>
          </ul>
          <p>Notes about importing:</p>
          <ul>
            <li>Java automatically imports <code>java.lang</code> package</li>
            <li>You don't need to import classes in the same package</li>
            <li>Using type-import-on-demand (<code>*</code>) doesn't affect performance</li>
            <li>Import statements must be after the package declaration and before the class declaration</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>⚠️ Checked vs Unchecked Exceptions</h2>
          <div class="card-icon">⚠️</div>
        </div>
        <div class="card-content">
          <p>Java exceptions are divided into two main categories: checked and unchecked. Think of them as different types of safety rules:</p>
          <table>
            <tr>
              <th>Feature</th>
              <th>Checked Exceptions</th>
              <th>Unchecked Exceptions</th>
            </tr>
            <tr>
              <td>Definition</td>
              <td>Exceptions that are checked at compile-time</td>
              <td>Exceptions that are not checked at compile-time</td>
            </tr>
            <tr>
              <td>Handling</td>
              <td>Must be handled or declared with throws</td>
              <td>Don't need to be handled or declared</td>
            </tr>
            <tr>
              <td>Analogy</td>
              <td>Must wear seatbelt (compiler forces)</td>
              <td>Speeding (you might crash)</td>
            </tr>
            <tr>
              <td>Examples</td>
              <td>IOException, SQLException, ClassNotFoundException</td>
              <td>NullPointerException, ArrayIndexOutOfBoundsException, ArithmeticException</td>
            </tr>
            <tr>
              <td>Inheritance</td>
              <td>Subclasses of Exception (except RuntimeException)</td>
              <td>Subclasses of RuntimeException and Error</td>
            </tr>
          </table>
          <div class="code-block">
// Checked exception example
import java.io.*;

public class CheckedExceptionExample {
    public static void main(String[] args) {
        // This code will not compile without handling the IOException
        try {
            FileReader file = new FileReader("file.txt");
            BufferedReader reader = new BufferedReader(file);
            String line = reader.readLine();
            System.out.println(line);
            reader.close();
        } catch (IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
    
    // Alternative: declare the exception with throws
    public void readFile() throws IOException {
        FileReader file = new FileReader("file.txt");
        BufferedReader reader = new BufferedReader(file);
        String line = reader.readLine();
        System.out.println(line);
        reader.close();
    }
}

// Unchecked exception example
public class UncheckedExceptionExample {
    public static void main(String[] args) {
        // This code compiles fine, but may throw an exception at runtime
        String str = null;
        System.out.println(str.length());  // Throws NullPointerException
        
        int[] arr = new int[5];
        System.out.println(arr[10]);  // Throws ArrayIndexOutOfBoundsException
        
        int result = 10 / 0;  // Throws ArithmeticException
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🚦</div>
              <p>Checked = Must wear seatbelt, Unchecked = Might speed!</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🛡️ try-catch-finally</h2>
          <div class="card-icon">🛡️</div>
        </div>
        <div class="card-content">
          <p>The try-catch-finally blocks are used for exception handling in Java. Think of it as a safety net for your code:</p>
          <div class="code-block">
// Basic try-catch
try {
    // Code that might throw an exception
    int result = 10 / 0;
    System.out.println("This line won't be executed");
} catch (ArithmeticException e) {
    // Handle the exception
    System.out.println("Error: " + e.getMessage());
}

// try-catch-finally
try {
    // Code that might throw an exception
    FileReader file = new FileReader("file.txt");
    BufferedReader reader = new BufferedReader(file);
    String line = reader.readLine();
    System.out.println(line);
    reader.close();
} catch (FileNotFoundException e) {
    // Handle file not found
    System.out.println("File not found: " + e.getMessage());
} catch (IOException e) {
    // Handle other IO exceptions
    System.out.println("IO error: " + e.getMessage());
} finally {
    // This block always executes, whether an exception occurred or not
    System.out.println("Finally block executed");
}

// try-with-resources (Java 7+)
try (FileReader file = new FileReader("file.txt");
     BufferedReader reader = new BufferedReader(file)) {
    String line = reader.readLine();
    System.out.println(line);
} catch (IOException e) {
    System.out.println("Error: " + e.getMessage());
}
// Resources are automatically closed
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔒</div>
              <p>Try to open file → Catch error → Finally close door!</p>
            </div>
          </div>
          <p>Key points about try-catch-finally:</p>
          <ul>
            <li><strong>try</strong>: Contains the code that might throw an exception</li>
            <li><strong>catch</strong>: Contains the code to handle the exception</li>
            <li><strong>finally</strong>: Contains the code that always executes, regardless of whether an exception occurred</li>
            <li>You can have multiple catch blocks to handle different types of exceptions</li>
            <li>The finally block is useful for cleanup (closing resources, etc.)</li>
            <li>try-with-resources automatically closes resources that implement AutoCloseable</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔗 Multiple Catch</h2>
          <div class="card-icon">🔗</div>
        </div>
        <div class="card-content">
          <p>You can catch multiple exceptions in a single try block. Think of it as preparing for different types of emergencies:</p>
          <div class="code-block">
// Multiple catch blocks
try {
    // Code that might throw different exceptions
    String[] arr = new String[5];
    arr[10] = "Hello";  // ArrayIndexOutOfBoundsException
    
    String str = null;
    System.out.println(str.length());  // NullPointerException
    
    int num = Integer.parseInt("abc");  // NumberFormatException
} catch (ArrayIndexOutOfBoundsException e) {
    System.out.println("Array index out of bounds: " + e.getMessage());
} catch (NullPointerException e) {
    System.out.println("Null pointer: " + e.getMessage());
} catch (NumberFormatException e) {
    System.out.println("Number format error: " + e.getMessage());
}

// Multi-catch (Java 7+)
try {
    // Code that might throw different exceptions
    String str = null;
    System.out.println(str.length());  // NullPointerException
    
    int[] arr = new String[5];
    arr[10] = "Hello";  // ArrayIndexOutOfBoundsException
} catch (NullPointerException | ArrayIndexOutOfBoundsException e) {
    System.out.println("Error: " + e.getMessage());
}

// Note: Cannot catch related exceptions in multi-catch
try {
    // Code that might throw exceptions
} catch (IOException | FileNotFoundException e) {  // Compile error
    // FileNotFoundException is a subclass of IOException
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🚒</div>
              <p>Catch fire, then electricity, then water leak!</p>
            </div>
          </div>
          <p>Rules for multiple catch blocks:</p>
          <ul>
            <li>Only one catch block is executed for a given exception</li>
            <li>Catch blocks should be ordered from most specific to most general</li>
            <li>Multi-catch (|) allows catching multiple unrelated exceptions in a single block</li>
            <li>You cannot catch related exceptions (parent and child) in the same multi-catch block</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>💣 throw & throws</h2>
          <div class="card-icon">💣</div>
        </div>
        <div class="card-content">
          <p><code>throw</code> and <code>throws</code> are keywords related to exception handling in Java, but they serve different purposes:</p>
          <div class="code-block">
// throw keyword - used to explicitly throw an exception
public class ThrowExample {
    public static void validateAge(int age) {
        if (age < 0) {
            // Throwing an exception explicitly
            throw new IllegalArgumentException("Age cannot be negative");
        }
        
        if (age > 120) {
            // Throwing a custom exception
            throw new IllegalArgumentException("Age cannot be greater than 120");
        }
        
        System.out.println("Age is valid: " + age);
    }
    
    public static void main(String[] args) {
        try {
            validateAge(25);  // Valid age
            validateAge(-5);  // Throws IllegalArgumentException
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

// throws keyword - used in method signature to declare exceptions
public class ThrowsExample {
    // Method declares that it might throw IOException
    public void readFile(String filename) throws IOException {
        FileReader file = new FileReader(filename);
        BufferedReader reader = new BufferedReader(file);
        String line = reader.readLine();
        System.out.println(line);
        reader.close();
    }
    
    // Method declares multiple exceptions
    public void processFile(String filename) throws FileNotFoundException, IOException {
        readFile(filename);
    }
    
    public static void main(String[] args) {
        ThrowsExample example = new ThrowsExample();
        
        try {
            example.processFile("file.txt");
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("IO error: " + e.getMessage());
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">💥</div>
              <p>throw = cause explosion, throws = warn others it might explode!</p>
            </div>
          </div>
          <p>Key differences:</p>
          <ul>
            <li><strong>throw</strong>:
              <ul>
                <li>Used inside a method or block of code</li>
                <li>Used to explicitly throw an exception</li>
                <li>Followed by an instance of a Throwable class</li>
                <li>Example: <code>throw new IllegalArgumentException("Invalid input");</code></li>
              </ul>
            </li>
            <li><strong>throws</strong>:
              <ul>
                <li>Used in the method signature</li>
                <li>Used to declare exceptions that might be thrown by the method</li>
                <li>Followed by exception class names</li>
                <li>Example: <code>void save() throws IOException</code></li>
              </ul>
            </li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🚨 Custom Exception</h2>
          <div class="card-icon">🚨</div>
        </div>
        <div class="card-content">
          <p>You can create your own exception classes by extending existing exception classes. Think of it as creating your own alarm system:</p>
          <div class="code-block">
// Custom checked exception
class InvalidAgeException extends Exception {
    public InvalidAgeException(String message) {
        super(message);
    }
}

// Custom unchecked exception
class InvalidAgeRuntimeException extends RuntimeException {
    public InvalidAgeRuntimeException(String message) {
        super(message);
    }
}

// Using custom exceptions
class Person {
    private String name;
    private int age;
    
    public Person(String name, int age) throws InvalidAgeException {
        this.name = name;
        
        if (age < 0 || age > 120) {
            // Throwing custom checked exception
            throw new InvalidAgeException("Age must be between 0 and 120");
        }
        
        this.age = age;
    }
    
    public void setAge(int age) {
        if (age < 0 || age > 120) {
            // Throwing custom unchecked exception
            throw new InvalidAgeRuntimeException("Age must be between 0 and 120");
        }
        
        this.age = age;
    }
    
    // Other methods...
}

// Using the Person class
public class CustomExceptionExample {
    public static void main(String[] args) {
        try {
            // This will throw InvalidAgeException
            Person person = new Person("John", 150);
        } catch (InvalidAgeException e) {
            System.out.println("Error creating person: " + e.getMessage());
        }
        
        Person person = null;
        try {
            person = new Person("Jane", 25);
            // This will throw InvalidAgeRuntimeException
            person.setAge(-5);
        } catch (InvalidAgeException e) {
            System.out.println("Error creating person: " + e.getMessage());
        } catch (InvalidAgeRuntimeException e) {
            System.out.println("Error setting age: " + e.getMessage());
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔔</div>
              <p>Create your own alarm: TooManyErrorsException!</p>
            </div>
          </div>
          <p>Best practices for custom exceptions:</p>
          <ul>
            <li>Extend Exception for checked exceptions</li>
            <li>Extend RuntimeException for unchecked exceptions</li>
            <li>Provide a descriptive message</li>
            <li>Follow standard naming conventions (end with "Exception")</li>
            <li>Consider adding additional properties or methods if needed</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔄 finally Block</h2>
          <div class="card-icon">🔄</div>
        </div>
        <div class="card-content">
          <p>The finally block always executes when the try block exits, regardless of whether an exception was thrown or caught. Think of it as always turning off the lights when leaving a room:</p>
          <div class="code-block">
// finally block example
public class FinallyExample {
    public static void main(String[] args) {
        try {
            System.out.println("Inside try block");
            int result = 10 / 2;
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Inside catch block: " + e.getMessage());
        } finally {
            System.out.println("Inside finally block");
        }
        
        System.out.println("\n--- With Exception ---");
        try {
            System.out.println("Inside try block");
            int result = 10 / 0;
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Inside catch block: " + e.getMessage());
        } finally {
            System.out.println("Inside finally block");
        }
        
        System.out.println("\n--- With return ---");
        System.out.println("Result: " + testMethod());
    }
    
    public static int testMethod() {
        try {
            System.out.println("Inside try block");
            return 1;
        } finally {
            System.out.println("Inside finally block");
            // The return in finally will override the return in try
            return 2;
        }
    }
}
          </div>
          <p>Output:</p>
          <div class="code-block">
Inside try block
Result: 5
Inside finally block

--- With Exception ---
Inside try block
Inside catch block: / by zero
Inside finally block

--- With return ---
Inside try block
Inside finally block
Result: 2
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">💡</div>
              <p>Always turn off lights when leaving!</p>
            </div>
          </div>
          <p>Key points about finally block:</p>
          <ul>
            <li>Always executes when the try block exits, regardless of whether an exception was thrown or caught</li>
            <li>Useful for cleanup code (closing resources, etc.)</li>
            <li>Executes even if there's a return statement in the try or catch block</li>
            <li>If the finally block contains a return statement, it overrides any return in the try or catch block</li>
            <li>If the JVM exits during the try or catch block, the finally block may not execute</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📐 Design Patterns Intro</h2>
          <div class="card-icon">📐</div>
        </div>
        <div class="card-content">
          <p>Design patterns are reusable solutions to commonly occurring problems in software design. Think of them as recipes for common problems:</p>
          <div class="code-block">
// Singleton Pattern example
public class Singleton {
    // Private static instance of the class
    private static Singleton instance;
    
    // Private constructor to prevent instantiation
    private Singleton() {
        // Private to prevent instantiation
    }
    
    // Public static method to get the instance
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
    
    public void showMessage() {
        System.out.println("Hello from Singleton!");
    }
}

// Using the Singleton
public class SingletonDemo {
    public static void main(String[] args) {
        // Get the only instance of Singleton
        Singleton singleton = Singleton.getInstance();
        
        // Show the message
        singleton.showMessage();
        
        // Try to create another instance
        Singleton anotherSingleton = Singleton.getInstance();
        
        // Check if both references point to the same instance
        System.out.println("Same instance? " + (singleton == anotherSingleton));
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📚</div>
              <p>Recipes for common problems!</p>
            </div>
          </div>
          <p>Categories of design patterns:</p>
          <ul>
            <li><strong>Creational Patterns</strong>: Deal with object creation mechanisms
              <ul>
                <li>Singleton, Factory, Builder, Prototype, etc.</li>
              </ul>
            </li>
            <li><strong>Structural Patterns</strong>: Deal with composition of classes or objects
              <ul>
                <li>Adapter, Decorator, Facade, Proxy, etc.</li>
              </ul>
            </li>
            <li><strong>Behavioral Patterns</strong>: Deal with communication between objects
              <ul>
                <li>Observer, Strategy, Command, Iterator, etc.</li>
              </ul>
            </li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>👤 Singleton Pattern</h2>
          <div class="card-icon">👤</div>
        </div>
        <div class="card-content">
          <p>The Singleton Pattern ensures that a class has only one instance and provides a global point of access to it. Think of it as having only one principal in a school:</p>
          <div class="code-block">
// Basic Singleton implementation
public class SchoolPrincipal {
    // The single instance of the class
    private static SchoolPrincipal instance;
    
    // Private constructor to prevent instantiation
    private SchoolPrincipal() {
        // Initialization code
    }
    
    // Public method to get the instance
    public static SchoolPrincipal getInstance() {
        if (instance == null) {
            instance = new SchoolPrincipal();
        }
        return instance;
    }
    
    public void makeAnnouncement(String message) {
        System.out.println("Principal's announcement: " + message);
    }
}

// Thread-safe Singleton implementation
public class ThreadSafeSingleton {
    // Volatile ensures that multiple threads handle the instance correctly
    private static volatile ThreadSafeSingleton instance;
    
    private ThreadSafeSingleton() {
        // Private constructor
    }
    
    // Double-checked locking for thread safety
    public static ThreadSafeSingleton getInstance() {
        if (instance == null) {
            synchronized (ThreadSafeSingleton.class) {
                if (instance == null) {
                    instance = new ThreadSafeSingleton();
                }
            }
        }
        return instance;
    }
    
    public void doSomething() {
        System.out.println("Doing something in a thread-safe way.");
    }
}

// Using the Singleton
public class SingletonDemo {
    public static void main(String[] args) {
        // Get the principal instance
        SchoolPrincipal principal = SchoolPrincipal.getInstance();
        principal.makeAnnouncement("School will be closed tomorrow.");
        
        // Try to get another instance
        SchoolPrincipal anotherPrincipal = SchoolPrincipal.getInstance();
        
        // Check if they are the same
        System.out.println("Same principal? " + (principal == anotherPrincipal));
        
        // Thread-safe example
        ThreadSafeSingleton singleton = ThreadSafeSingleton.getInstance();
        singleton.doSomething();
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👨‍🏫</div>
              <p>Only one principal in a school!</p>
            </div>
          </div>
          <p>Key points about Singleton Pattern:</p>
          <ul>
            <li>Ensures only one instance of a class exists</li>
            <li>Provides a global access point to that instance</li>
            <li>Private constructor prevents direct instantiation</li>
            <li>Static method to get the instance</li>
            <li>Can be implemented with lazy initialization (instance created when first needed)</li>
            <li>Thread safety is important in multi-threaded environments</li>
          </ul>
          <p>Common use cases:</p>
          <ul>
            <li>Logger classes</li>
            <li>Configuration classes</li>
            <li>Database connection pools</li>
            <li>Thread pools</li>
            <li>Caches</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔌 Adapter Pattern</h2>
          <div class="card-icon">🔌</div>
        </div>
        <div class="card-content">
          <p>The Adapter Pattern allows incompatible interfaces to work together. Think of it as a plug adapter that makes an Indian plug fit a US socket:</p>
          <div class="code-block">
// Target interface (what the client expects)
interface USPlug {
    void plugInUS();
}

// Adaptee (the class we want to adapt)
class IndianPlug {
    public void plugInIndia() {
        System.out.println("Plugged into Indian socket");
    }
}

// Adapter class
class PlugAdapter implements USPlug {
    private IndianPlug indianPlug;
    
    public PlugAdapter(IndianPlug indianPlug) {
        this.indianPlug = indianPlug;
    }
    
    @Override
    public void plugInUS() {
        // Adapt the Indian plug to work with US socket
        System.out.println("Converting Indian plug to US socket");
        indianPlug.plugInIndia();
    }
}

// Another example with media players
interface MediaPlayer {
    void play(String audioType, String fileName);
}

interface AdvancedMediaPlayer {
    void playVlc(String fileName);
    void playMp4(String fileName);
}

class VlcPlayer implements AdvancedMediaPlayer {
    @Override
    public void playVlc(String fileName) {
        System.out.println("Playing vlc file: " + fileName);
    }
    
    @Override
    public void playMp4(String fileName) {
        // Do nothing
    }
}

class Mp4Player implements AdvancedMediaPlayer {
    @Override
    public void playVlc(String fileName) {
        // Do nothing
    }
    
    @Override
    public void playMp4(String fileName) {
        System.out.println("Playing mp4 file: " + fileName);
    }
}

// Media adapter
class MediaAdapter implements MediaPlayer {
    private AdvancedMediaPlayer advancedMusicPlayer;
    
    public MediaAdapter(String audioType) {
        if (audioType.equalsIgnoreCase("vlc")) {
            advancedMusicPlayer = new VlcPlayer();
        } else if (audioType.equalsIgnoreCase("mp4")) {
            advancedMusicPlayer = new Mp4Player();
        }
    }
    
    @Override
    public void play(String audioType, String fileName) {
        if (audioType.equalsIgnoreCase("vlc")) {
            advancedMusicPlayer.playVlc(fileName);
        } else if (audioType.equalsIgnoreCase("mp4")) {
            advancedMusicPlayer.playMp4(fileName);
        }
    }
}

// Audio player that can use the adapter
class AudioPlayer implements MediaPlayer {
    private MediaAdapter mediaAdapter;
    
    @Override
    public void play(String audioType, String fileName) {
        // Built-in support for mp3
        if (audioType.equalsIgnoreCase("mp3")) {
            System.out.println("Playing mp3 file: " + fileName);
        }
        // Use adapter for other formats
        else if (audioType.equalsIgnoreCase("vlc") || audioType.equalsIgnoreCase("mp4")) {
            mediaAdapter = new MediaAdapter(audioType);
            mediaAdapter.play(audioType, fileName);
        } else {
            System.out.println("Invalid media. " + audioType + " format not supported");
        }
    }
}

// Using the adapter
public class AdapterPatternDemo {
    public static void main(String[] args) {
        // Plug adapter example
        IndianPlug indianPlug = new IndianPlug();
        USPlug usPlug = new PlugAdapter(indianPlug);
        usPlug.plugInUS();
        
        System.out.println("\n--- Media Player Example ---");
        
        AudioPlayer audioPlayer = new AudioPlayer();
        
        audioPlayer.play("mp3", "song.mp3");
        audioPlayer.play("mp4", "video.mp4");
        audioPlayer.play("vlc", "movie.vlc");
        audioPlayer.play("avi", "video.avi");
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔌</div>
              <p>Plug adapter: makes Indian plug fit US socket!</p>
            </div>
          </div>
          <p>Key points about Adapter Pattern:</p>
          <ul>
            <li>Allows incompatible interfaces to work together</li>
            <li>Wraps an existing class with a new interface</li>
            <li>Types of adapters:
              <ul>
                <li>Class adapter (uses inheritance)</li>
                <li>Object adapter (uses composition, more flexible)</li>
              </ul>
            </li>
            <li>Follows the principle: "Favor composition over inheritance"</li>
          </ul>
          <p>Common use cases:</p>
          <ul>
            <li>Integrating legacy code with new systems</li>
            <li>Using third-party libraries with incompatible interfaces</li>
            <li>When you want to reuse existing classes but their interfaces don't match</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔌 Interactive: Connect try-catch-finally</h2>
          <div class="card-icon">🔌</div>
        </div>
        <div class="card-content">
          <p>Drag the code blocks to connect them correctly in a try-catch-finally structure:</p>
          <div class="interactive">
            <div id="try-catch-simulator">
              <div class="drag-container">
                <div class="drag-items">
                  <div class="drag-item" draggable="true" data-type="try">try {</div>
                  <div class="drag-item" draggable="true" data-type="try-content">  int result = 10 / 0;</div>
                  <div class="drag-item" draggable="true" data-type="catch">} catch (ArithmeticException e) {</div>
                  <div class="drag-item" draggable="true" data-type="catch-content">  System.out.println("Error: " + e.getMessage());</div>
                  <div class="drag-item" draggable="true" data-type="finally">} finally {</div>
                  <div class="drag-item" draggable="true" data-type="finally-content">  System.out.println("Finally block executed");</div>
                  <div class="drag-item" draggable="true" data-type="end">}</div>
                </div>
                <div class="drop-zones">
                  <div class="drop-zone" data-accept="try">1</div>
                  <div class="drop-zone" data-accept="try-content">2</div>
                  <div class="drop-zone" data-accept="catch">3</div>
                  <div class="drop-zone" data-accept="catch-content">4</div>
                  <div class="drop-zone" data-accept="finally">5</div>
                  <div class="drop-zone" data-accept="finally-content">6</div>
                  <div class="drop-zone" data-accept="end">7</div>
                </div>
              </div>
              <div id="try-catch-feedback" style="text-align: center; margin-top: 1rem; font-weight: bold;"></div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="checkTryCatchGame()">Check Answers</button>
          <button onclick="resetTryCatchGame()">Reset</button>
        </div>
      </div>
    </section>
    
    <!-- Section 4: GUI with Swing -->
    <section id="section4" class="section">
      <div class="card">
        <div class="card-header">
          <h2>🖥️ Swing vs AWT</h2>
          <div class="card-icon">🖥️</div>
        </div>
        <div class="card-content">
          <p>Swing and AWT are Java's toolkits for creating graphical user interfaces (GUIs). Think of them as different generations of cars:</p>
          <table>
            <tr>
              <th>Feature</th>
              <th>AWT (Abstract Window Toolkit)</th>
              <th>Swing</th>
            </tr>
            <tr>
              <td>Analogy</td>
              <td>Old car</td>
              <td>Modern electric car</td>
            </tr>
            <tr>
              <td>Components</td>
              <td>Heavyweight (use native OS components)</td>
              <td>Lightweight (pure Java, drawn by Java)</td>
            </tr>
            <tr>
              <td>Look and Feel</td>
              <td>Depends on the platform</td>
              <td>Pluggable (can change appearance)</td>
            </tr>
            <tr>
              <td>Features</td>
              <td>Basic components</td>
              <td>Rich set of components (tables, trees, etc.)</td>
            </tr>
            <tr>
              <td>Package</td>
              <td><code>java.awt</code></td>
              <td><code>javax.swing</code></td>
            </tr>
          </table>
          <div class="code-block">
// AWT example
import java.awt.*;
import java.awt.event.*;

public class AwtExample {
    public static void main(String[] args) {
        Frame frame = new Frame("AWT Example");
        
        Label label = new Label("Hello, AWT!");
        Button button = new Button("Click Me");
        
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                label.setText("Button clicked!");
            }
        });
        
        frame.add(label, BorderLayout.NORTH);
        frame.add(button, BorderLayout.CENTER);
        
        frame.setSize(300, 200);
        frame.setVisible(true);
        
        // Add window listener to close the frame
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
    }
}

// Swing example
import javax.swing.*;
import java.awt.event.*;

public class SwingExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Swing Example");
        
        JLabel label = new JLabel("Hello, Swing!");
        JButton button = new JButton("Click Me");
        
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                label.setText("Button clicked!");
            }
        });
        
        frame.setLayout(new BorderLayout());
        frame.add(label, BorderLayout.NORTH);
        frame.add(button, BorderLayout.CENTER);
        
        frame.setSize(300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🚗 → 🚙</div>
              <p>AWT = Old car, Swing = Modern electric car!</p>
            </div>
          </div>
          <p>Key differences:</p>
          <ul>
            <li>Swing components are lightweight (pure Java), while AWT components are heavyweight (native OS components)</li>
            <li>Swing provides a richer set of components (tables, trees, etc.)</li>
            <li>Swing components have more features and are more customizable</li>
            <li>Swing uses a Model-View-Controller (MVC) architecture</li>
            <li>Swing has pluggable look and feel (can change appearance)</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🪟 JFrame</h2>
          <div class="card-icon">🪟</div>
        </div>
        <div class="card-content">
          <p>JFrame is a top-level container in Swing that represents a window. Think of it as the main screen of your app, like a TV screen:</p>
          <div class="code-block">
import javax.swing.*;
import java.awt.*;

public class JFrameExample {
    public static void main(String[] args) {
        // Create a JFrame with a title
        JFrame frame = new JFrame("My First Swing App");
        
        // Set the size of the frame
        frame.setSize(400, 300);
        
        // Set the default close operation
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Set the layout manager
        frame.setLayout(new FlowLayout());
        
        // Add components to the frame
        JLabel label = new JLabel("Hello, JFrame!");
        JButton button = new JButton("Click Me");
        JTextField textField = new JTextField(20);
        
        frame.add(label);
        frame.add(button);
        frame.add(textField);
        
        // Center the frame on the screen
        frame.setLocationRelativeTo(null);
        
        // Make the frame visible
        frame.setVisible(true);
        
        // Add a button listener
        button.addActionListener(e -> {
            String text = textField.getText();
            JOptionPane.showMessageDialog(frame, "You entered: " + text);
        });
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📺</div>
              <p>Main window of your app — like a TV screen!</p>
            </div>
          </div>
          <p>Common JFrame methods:</p>
          <ul>
            <li><code>setTitle(String title)</code>: Sets the title of the frame</li>
            <li><code>setSize(int width, int height)</code>: Sets the size of the frame</li>
            <li><code>setDefaultCloseOperation(int operation)</code>: Sets what happens when the frame is closed</li>
            <li><code>setLayout(LayoutManager manager)</code>: Sets the layout manager</li>
            <li><code>add(Component comp)</code>: Adds a component to the frame</li>
            <li><code>setLocationRelativeTo(Component c)</code>: Centers the frame on the screen</li>
            <li><code>setVisible(boolean visible)</code>: Makes the frame visible or invisible</li>
            <li><code>pack()</code>: Sizes the frame to fit the preferred size of its subcomponents</li>
          </ul>
          <p>Default close operations:</p>
            <ul>
            <li><code>JFrame.EXIT_ON_CLOSE</code>: Exit the application</li>
            <li><code>JFrame.DISPOSE_ON_CLOSE</code>: Dispose the frame</li>
            <li><code>JFrame.HIDE_ON_CLOSE</code>: Hide the frame</li>
            <li><code>JFrame.DO_NOTHING_ON_CLOSE</code>: Do nothing</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🔘 JButton, JLabel, JTextField</h2>
          <div class="card-icon">🔘</div>
        </div>
        <div class="card-content">
          <p>These are basic Swing components for creating interactive user interfaces:</p>
          <div class="code-block">
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class BasicComponentsExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Basic Components");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new FlowLayout());
        
        // JLabel - displays text or images
        JLabel label = new JLabel("Enter your name:");
        frame.add(label);
        
        // JTextField - single-line text input
        JTextField textField = new JTextField(20);  // 20 columns wide
        frame.add(textField);
        
        // JButton - clickable button
        JButton button = new JButton("Submit");
        frame.add(button);
        
        // Result label
        JLabel resultLabel = new JLabel(" ");
        frame.add(resultLabel);
        
        // Add action listener to the button
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String name = textField.getText();
                if (name.isEmpty()) {
                    resultLabel.setText("Please enter your name!");
                } else {
                    resultLabel.setText("Hello, " + name + "!");
                }
            }
        });
        
        frame.setVisible(true);
    }
}
          </div>
          <div class="visual">
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin: 1rem 0;">
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">JButton</div>
                <div>🔘 Click Me</div>
              </div>
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">JLabel</div>
                <div>📝 Label Text</div>
              </div>
              <div style="text-align: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px;">
                <div style="font-weight: bold;">JTextField</div>
                <div>📝 Type here</div>
              </div>
            </div>
          </div>
          <p>Common methods for these components:</p>
          <ul>
            <li><strong>JLabel</strong>:
              <ul>
                <li><code>setText(String text)</code>: Sets the text of the label</li>
                <li><code>getText()</code>: Gets the text of the label</li>
                <li><code>setIcon(Icon icon)</code>: Sets an icon for the label</li>
              </ul>
            </li>
            <li><strong>JTextField</strong>:
              <ul>
                <li><code>setText(String text)</code>: Sets the text of the field</li>
                <li><code>getText()</code>: Gets the text of the field</li>
                <li><code>setColumns(int columns)</code>: Sets the width of the field</li>
                <li><code>setEditable(boolean editable)</code>: Sets whether the field can be edited</li>
              </ul>
            </li>
            <li><strong>JButton</strong>:
              <ul>
                <li><code>setText(String text)</code>: Sets the text of the button</li>
                <li><code>getText()</code>: Gets the text of the button</li>
                <li><code>addActionListener(ActionListener l)</code>: Adds an action listener</li>
                <li><code>setEnabled(boolean enabled)</code>: Sets whether the button is enabled</li>
              </ul>
            </li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📐 Layout Managers</h2>
          <div class="card-icon">📐</div>
        </div>
        <div class="card-content">
          <p>Layout managers determine how components are arranged in a container. Think of them as different ways to arrange furniture in a room:</p>
          <div class="code-block">
import javax.swing.*;
import java.awt.*;

public class LayoutManagersExample {
    public static void main(String[] args) {
        // BorderLayout
        createBorderLayoutDemo();
        
        // FlowLayout
        createFlowLayoutDemo();
        
        // GridLayout
        createGridLayoutDemo();
        
        // BoxLayout
        createBoxLayoutDemo();
        
        // CardLayout
        createCardLayoutDemo();
    }
    
    private static void createBorderLayoutDemo() {
        JFrame frame = new JFrame("BorderLayout Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 200);
        
        frame.setLayout(new BorderLayout());
        
        frame.add(new JButton("North"), BorderLayout.NORTH);
        frame.add(new JButton("South"), BorderLayout.SOUTH);
        frame.add(new JButton("East"), BorderLayout.EAST);
        frame.add(new JButton("West"), BorderLayout.WEST);
        frame.add(new JButton("Center"), BorderLayout.CENTER);
        
        frame.setVisible(true);
    }
    
    private static void createFlowLayoutDemo() {
        JFrame frame = new JFrame("FlowLayout Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 200);
        
        frame.setLayout(new FlowLayout());
        
        frame.add(new JButton("Button 1"));
        frame.add(new JButton("Button 2"));
        frame.add(new JButton("Button 3"));
        frame.add(new JButton("Button 4"));
        frame.add(new JButton("Button 5"));
        
        frame.setVisible(true);
    }
    
    private static void createGridLayoutDemo() {
        JFrame frame = new JFrame("GridLayout Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 200);
        
        frame.setLayout(new GridLayout(2, 3));  // 2 rows, 3 columns
        
        frame.add(new JButton("1"));
        frame.add(new JButton("2"));
        frame.add(new JButton("3"));
        frame.add(new JButton("4"));
        frame.add(new JButton("5"));
        frame.add(new JButton("6"));
        
        frame.setVisible(true);
    }
    
    private static void createBoxLayoutDemo() {
        JFrame frame = new JFrame("BoxLayout Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 200);
        
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));  // Vertical layout
        
        panel.add(new JButton("Button 1"));
        panel.add(new JButton("Button 2"));
        panel.add(new JButton("Button 3"));
        
        frame.add(panel);
        frame.setVisible(true);
    }
    
    private static void createCardLayoutDemo() {
        JFrame frame = new JFrame("CardLayout Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 200);
        
        JPanel cardPanel = new JPanel(new CardLayout());
        
        JPanel card1 = new JPanel();
        card1.add(new JLabel("Card 1"));
        card1.add(new JButton("Button 1"));
        
        JPanel card2 = new JPanel();
        card2.add(new JLabel("Card 2"));
        card2.add(new JButton("Button 2"));
        
        JPanel card3 = new JPanel();
        card3.add(new JLabel("Card 3"));
        card3.add(new JButton("Button 3"));
        
        cardPanel.add(card1, "Card 1");
        cardPanel.add(card2, "Card 2");
        cardPanel.add(card3, "Card 3");
        
        JButton nextButton = new JButton("Next Card");
        
        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
        
        nextButton.addActionListener(e -> cardLayout.next(cardPanel));
        
        frame.add(cardPanel, BorderLayout.CENTER);
        frame.add(nextButton, BorderLayout.SOUTH);
        
        frame.setVisible(true);
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🪑</div>
              <p>How furniture is arranged in a room!</p>
            </div>
          </div>
          <p>Common layout managers:</p>
          <table>
            <tr>
              <th>Layout Manager</th>
              <th>Description</th>
              <th>Use Case</th>
            </tr>
            <tr>
              <td><strong>BorderLayout</strong></td>
              <td>Arranges components in five regions: North, South, East, West, and Center</td>
              <td>Simple layouts with a main component and surrounding components</td>
            </tr>
            <tr>
              <td><strong>FlowLayout</strong></td>
              <td>Arranges components in a line, one after another, wrapping to the next line when needed</td>
              <td>Toolbars, button panels</td>
            </tr>
            <tr>
              <td><strong>GridLayout</strong></td>
              <td>Arranges components in a grid of equal-sized cells</td>
              <td>Calculator buttons, calendar</td>
            </tr>
            <tr>
              <td><strong>BoxLayout</strong></td>
              <td>Arranges components in a single row or column</td>
              <td>Vertical or horizontal lists of components</td>
            </tr>
            <tr>
              <td><strong>CardLayout</strong></td>
              <td>Stacks components on top of each other, showing only one at a time</td>
              <td>Wizards, tabbed panels</td>
            </tr>
          </table>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>👆 Event Handling</h2>
          <div class="card-icon">👆</div>
        </div>
        <div class="card-content">
          <p>Event handling in Swing allows your application to respond to user actions, such as button clicks or mouse movements:</p>
          <div class="code-block">
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class EventHandlingExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Event Handling Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new FlowLayout());
        
        // Components
        JButton button = new JButton("Click Me");
        JLabel label = new JLabel("Button not clicked yet");
        JTextField textField = new JTextField(20);
        
        // ActionListener for button clicks
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                label.setText("Button clicked!");
                JOptionPane.showMessageDialog(frame, "Button was clicked!");
            }
        });
        
        // ActionListener for text field (when Enter is pressed)
        textField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text = textField.getText();
                label.setText("You entered: " + text);
            }
        });
        
        // MouseListener for mouse events
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                label.setText("Mouse entered button area");
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                label.setText("Mouse exited button area");
            }
        });
        
        // KeyListener for keyboard events
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.getKeyChar() == 'a') {
                    label.setText("You typed 'a'");
                }
            }
        });
        
        // Add components to frame
        frame.add(button);
        frame.add(textField);
        frame.add(label);
        
        frame.setVisible(true);
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">👆</div>
              <p>When button clicked → run action!</p>
            </div>
          </div>
          <p>Common event listeners in Swing:</p>
          <ul>
            <li><strong>ActionListener</strong>: For button clicks, menu selections, Enter key in text fields
              <ul>
                <li>Method: <code>actionPerformed(ActionEvent e)</code></li>
              </ul>
            </li>
            <li><strong>MouseListener</strong>: For mouse clicks, entering/exiting components
              <ul>
                <li>Methods: <code>mouseClicked</code>, <code>mouseEntered</code>, <code>mouseExited</code>, <code>mousePressed</code>, <code>mouseReleased</code></li>
              </ul>
            </li>
            <li><strong>KeyListener</strong>: For keyboard input
              <ul>
                <li>Methods: <code>keyTyped</code>, <code>keyPressed</code>, <code>keyReleased</code></li>
              </ul>
            </li>
            <li><strong>WindowListener</strong>: For window events (opening, closing, etc.)
              <ul>
                <li>Methods: <code>windowOpened</code>, <code>windowClosing</code>, <code>windowClosed</code>, <code>windowIconified</code>, <code>windowDeiconified</code>, <code>windowActivated</code>, <code>windowDeactivated</code></li>
              </ul>
            </li>
          </ul>
          <p>Ways to implement event listeners:</p>
          <ul>
            <li><strong>Anonymous inner class</strong>: As shown in the example above</li>
            <li><strong>Lambda expressions</strong> (Java 8+): More concise syntax
              <div class="code-block">
button.addActionListener(e -> {
    label.setText("Button clicked!");
});
              </div>
            </li>
            <li><strong>Implementing the interface</strong>: Make your class implement the listener interface
              <div class="code-block">
public class MyFrame extends JFrame implements ActionListener {
    public MyFrame() {
        JButton button = new JButton("Click Me");
        button.addActionListener(this);
        // ...
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        // Handle the event
    }
}
              </div>
            </li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📡 Delegation Model</h2>
          <div class="card-icon">📡</div>
        </div>
        <div class="card-content">
          <p>The Delegation Event Model is the architecture used by Swing for handling events. It separates the generation of events from the handling of events:</p>
          <div class="code-block">
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class DelegationModelExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Delegation Model Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new FlowLayout());
        
        // Source: The component that generates the event
        JButton button = new JButton("Click Me");
        JLabel label = new JLabel("Waiting for button click...");
        
        // Listener: The object that handles the event
        ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                label.setText("Button was clicked!");
            }
        };
        
        // Registration: The process of connecting the source to the listener
        button.addActionListener(listener);
        
        // Add components to frame
        frame.add(button);
        frame.add(label);
        
        frame.setVisible(true);
    }
}

// Another example with multiple listeners
public class MultipleListenersExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Multiple Listeners Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new FlowLayout());
        
        JButton button = new JButton("Click Me");
        JLabel label1 = new JLabel("Listener 1: Waiting...");
        JLabel label2 = new JLabel("Listener 2: Waiting...");
        
        // First listener
        ActionListener listener1 = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                label1.setText("Listener 1: Button clicked!");
            }
        };
        
        // Second listener
        ActionListener listener2 = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                label2.setText("Listener 2: Button clicked!");
            }
        };
        
        // Register both listeners
        button.addActionListener(listener1);
        button.addActionListener(listener2);
        
        frame.add(button);
        frame.add(label1);
        frame.add(label2);
        
        frame.setVisible(true);
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📡</div>
              <p>Button says: Hey listener, someone clicked me!</p>
            </div>
          </div>
          <p>Key components of the Delegation Event Model:</p>
          <ul>
            <li><strong>Event Source</strong>: The component that generates the event (e.g., JButton, JTextField)</li>
            <li><strong>Event Object</strong>: An object that encapsulates information about the event (e.g., ActionEvent, MouseEvent)</li>
            <li><strong>Event Listener</strong>: An object that is notified when an event occurs (implements a listener interface)</li>
            <li><strong>Registration</strong>: The process of connecting a source to a listener using an <code>addXxxListener</code> method</li>
          </ul>
          <p>Benefits of the Delegation Event Model:</p>
          <ul>
            <li>Separation of concerns: The component that generates the event doesn't need to know how to handle it</li>
            <li>Flexibility: Multiple listeners can register for the same event</li>
            <li>Efficiency: Only registered listeners are notified of events</li>
            <li>Extensibility: New event types and listeners can be added easily</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🏗️ MVC Architecture</h2>
          <div class="card-icon">🏗️</div>
        </div>
        <div class="card-content">
          <p>MVC (Model-View-Controller) is an architectural pattern that separates an application into three interconnected components. Think of it as a restaurant:</p>
          <div class="code-block">
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;

// Simple MVC example with a table
public class MVCExample {
    public static void main(String[] args) {
        // Model: The data and business logic
        DefaultTableModel model = new DefaultTableModel(
            new Object[][] {
                {"John", 25, "Engineer"},
                {"Jane", 30, "Designer"},
                {"Bob", 35, "Manager"}
            },
            new Object[] {"Name", "Age", "Occupation"}
        );
        
        // View: The UI that displays the data
        JFrame frame = new JFrame("MVC Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 300);
        
        JTable table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);
        
        JButton addButton = new JButton("Add Row");
        JButton removeButton = new JButton("Remove Selected Row");
        
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);
        
        // Controller: Handles user input and updates the model
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Add a new row to the model
                model.addRow(new Object[]{"New Person", 0, "Unknown"});
            }
        });
        
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Remove the selected row from the model
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    model.removeRow(selectedRow);
                }
            }
        });
        
        frame.setVisible(true);
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🍽️</div>
              <p>Model = Data, View = Screen, Controller = Brain!</p>
            </div>
          </div>
          <p>Components of MVC:</p>
          <table>
            <tr>
              <th>Component</th>
              <th>Responsibility</th>
              <th>Swing Example</th>
              <th>Restaurant Analogy</th>
            </tr>
            <tr>
              <td><strong>Model</strong></td>
              <td>Manages the data and business logic</td>
              <td>DefaultTableModel, Document</td>
              <td>Kitchen (prepares food)</td>
            </tr>
            <tr>
              <td><strong>View</strong></td>
              <td>Displays the data to the user</td>
              <td>JTable, JTextComponent</td>
              <td>Dining area (presents food)</td>
            </tr>
            <tr>
              <td><strong>Controller</strong></td>
              <td>Handles user input and updates the model</td>
              <td>ActionListener, MouseListener</td>
              <td>Waiter (takes orders)</td>
            </tr>
          </table>
          <p>How MVC works in Swing:</p>
          <ul>
            <li>Swing components follow a modified MVC pattern, where the View and Controller are combined</li>
            <li>The Model holds the data and notifies the View when it changes</li>
            <li>The View displays the data and sends user input to the Controller</li>
            <li>The Controller processes the input and updates the Model</li>
            <li>When the Model changes, it notifies the View to update itself</li>
          </ul>
          <p>Benefits of MVC:</p>
          <ul>
            <li>Separation of concerns: Each component has a single responsibility</li>
            <li>Reusability: Components can be reused in different contexts</li>
            <li>Parallel development: Different teams can work on different components</li>
            <li>Maintainability: Changes to one component don't affect others</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🎨 Interactive: Drag Components</h2>
          <div class="card-icon">🎨</div>
        </div>
        <div class="card-content">
          <p>Drag components onto a canvas and see the generated code:</p>
          <div class="interactive">
            <div id="swing-builder">
              <div style="display: flex; gap: 20px;">
                <div style="flex: 1;">
                  <h3>Components Palette</h3>
                  <div class="component-palette">
                    <div class="component-item" draggable="true" data-component="JButton">JButton</div>
                    <div class="component-item" draggable="true" data-component="JLabel">JLabel</div>
                    <div class="component-item" draggable="true" data-component="JTextField">JTextField</div>
                    <div class="component-item" draggable="true" data-component="JTextArea">JTextArea</div>
                    <div class="component-item" draggable="true" data-component="JCheckBox">JCheckBox</div>
                    <div class="component-item" draggable="true" data-component="JRadioButton">JRadioButton</div>
                  </div>
                </div>
                <div style="flex: 2;">
                  <h3>Design Canvas</h3>
                  <div id="design-canvas" class="drop-zone" style="height: 300px; background-color: #f9f9f9; border: 1px dashed #ccc; position: relative;">
                    <p style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #999;">Drag components here</p>
                  </div>
                </div>
              </div>
              
              <div style="margin-top: 20px;">
                <h3>Generated Code</h3>
                <div class="code-block" id="generated-swing-code">
// Generated code will appear here
                </div>
              </div>
              
              <div style="margin-top: 10px; text-align: center;">
                <button onclick="generateSwingCode()">Generate Code</button>
                <button onclick="clearCanvas()">Clear Canvas</button>
              </div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
    </section>
    
    <!-- Section 5: Database with JDBC -->
    <section id="section5" class="section">
      <div class="card">
        <div class="card-header">
          <h2>🔌 What is JDBC?</h2>
          <div class="card-icon">🔌</div>
        </div>
        <div class="card-content">
          <p>JDBC (Java Database Connectivity) is an API that enables Java applications to interact with databases. Think of it as Java's USB cable to talk to databases:</p>
          <div class="code-block">
// JDBC example
import java.sql.*;

public class JdbcExample {
    public static void main(String[] args) {
        // JDBC URL for MySQL database
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        
        try {
            // Step 1: Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Step 2: Establish a connection
            connection = DriverManager.getConnection(url, username, password);
            
            // Step 3: Create a statement
            statement = connection.createStatement();
            
            // Step 4: Execute a query
            String sql = "SELECT id, name, email FROM users";
            resultSet = statement.executeQuery(sql);
            
            // Step 5: Process the results
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String email = resultSet.getString("email");
                
                System.out.println("ID: " + id + ", Name: " + name + ", Email: " + email);
            }
        } catch (ClassNotFoundException e) {
            System.out.println("JDBC driver not found: " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        } finally {
            // Step 6: Close the resources
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔌</div>
              <p>Java's USB cable to talk to databases!</p>
            </div>
          </div>
          <p>Key components of JDBC:</p>
          <ul>
            <li><strong>JDBC Driver</strong>: A software component that enables Java applications to interact with databases</li>
            <li><strong>Connection</strong>: Represents a session with a specific database</li>
            <li><strong>Statement</strong>: Used to execute SQL queries</li>
            <li><strong>ResultSet</strong>: Holds the data returned from a query</li>
            <li><strong>DriverManager</strong>: Manages JDBC drivers</li>
          </ul>
          <p>Types of JDBC drivers:</p>
          <ul>
            <li><strong>Type 1 (JDBC-ODBC Bridge)</strong>: Translates JDBC calls to ODBC calls</li>
            <li><strong>Type 2 (Native-API Driver)</strong>: Converts JDBC calls to database-specific calls</li>
            <li><strong>Type 3 (Network Protocol Driver)</strong>: Uses middleware to convert JDBC calls to database-specific calls</li>
            <li><strong>Type 4 (Pure Java Driver)</strong>: Directly converts JDBC calls to database-specific network protocol</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📋 Steps to Connect</h2>
          <div class="card-icon">📋</div>
        </div>
        <div class="card-content">
          <p>Connecting to a database using JDBC involves several steps. Think of it as following a recipe:</p>
          <div class="code-block">
import java.sql.*;

public class JdbcSteps {
    public static void main(String[] args) {
        // Database connection parameters
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        Connection connection = null;
        
        try {
            // Step 1: Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            System.out.println("Driver loaded successfully!");
            
            // Step 2: Establish a connection
            connection = DriverManager.getConnection(url, username, password);
            System.out.println("Connected to the database!");
            
            // Step 3: Create a statement
            Statement statement = connection.createStatement();
            System.out.println("Statement created!");
            
            // Step 4: Execute a query
            String sql = "SELECT * FROM users";
            ResultSet resultSet = statement.executeQuery(sql);
            System.out.println("Query executed!");
            
            // Step 5: Process the results
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String email = resultSet.getString("email");
                
                System.out.println("ID: " + id + ", Name: " + name + ", Email: " + email);
            }
            
            // Step 6: Close the resources
            resultSet.close();
            statement.close();
            connection.close();
            System.out.println("Resources closed!");
            
        } catch (ClassNotFoundException e) {
            System.out.println("JDBC driver not found: " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        } finally {
            // Ensure connection is closed
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📋</div>
              <p>1. Load driver 2. Connect 3. Send command 4. Get result!</p>
            </div>
          </div>
          <p>Detailed steps:</p>
          <ol>
            <li><strong>Load the JDBC Driver</strong>:
              <ul>
                <li>Use <code>Class.forName()</code> to load the driver class</li>
                <li>This step is optional in JDBC 4.0+ (automatic driver loading)</li>
                <li>Example: <code>Class.forName("com.mysql.cj.jdbc.Driver");</code></li>
              </ul>
            </li>
            <li><strong>Establish a Connection</strong>:
              <ul>
                <li>Use <code>DriverManager.getConnection()</code> to create a connection</li>
                <li>Provide the URL, username, and password</li>
                <li>Example: <code>Connection conn = DriverManager.getConnection(url, username, password);</code></li>
              </ul>
            </li>
            <li><strong>Create a Statement</strong>:
              <ul>
                <li>Use <code>connection.createStatement()</code> to create a statement</li>
                <li>Statements are used to execute SQL queries</li>
                <li>Example: <code>Statement stmt = conn.createStatement();</code></li>
              </ul>
            </li>
            <li><strong>Execute a Query</strong>:
              <ul>
                <li>Use <code>statement.executeQuery()</code> for SELECT queries</li>
                <li>Use <code>statement.executeUpdate()</code> for INSERT, UPDATE, DELETE</li>
                <li>Example: <code>ResultSet rs = stmt.executeQuery("SELECT * FROM users");</code></li>
              </ul>
            </li>
            <li><strong>Process the Results</strong>:
              <ul>
                <li>Use <code>resultSet.next()</code> to iterate through the results</li>
                <li>Use getter methods to retrieve data from each row</li>
                <li>Example: <code>String name = rs.getString("name");</code></li>
              </ul>
            </li>
            <li><strong>Close the Resources</strong>:
              <ul>
                <li>Close ResultSet, Statement, and Connection objects</li>
                <li>Important to prevent resource leaks</li>
                <li>Best practice: Close in finally block or use try-with-resources</li>
              </ul>
            </li>
          </ol>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🚗 Driver Loading</h2>
          <div class="card-icon">🚗</div>
        </div>
        <div class="card-content">
          <p>Loading the JDBC driver is the first step in connecting to a database. Think of it as installing a USB driver before plugging in a device:</p>
          <div class="code-block">
// Traditional way to load the driver (JDBC 3.0 and earlier)
try {
    // Load the MySQL driver
    Class.forName("com.mysql.cj.jdbc.Driver");
    System.out.println("MySQL driver loaded successfully!");
    
    // Load the Oracle driver
    Class.forName("oracle.jdbc.driver.OracleDriver");
    System.out.println("Oracle driver loaded successfully!");
    
    // Load the PostgreSQL driver
    Class.forName("org.postgresql.Driver");
    System.out.println("PostgreSQL driver loaded successfully!");
    
} catch (ClassNotFoundException e) {
    System.out.println("Driver not found: " + e.getMessage());
}

// JDBC 4.0+ (automatic driver loading)
// No need to explicitly load the driver
// The DriverManager automatically finds and loads the driver

// Using try-with-resources (JDBC 4.0+)
public class AutoDriverLoading {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        // Try-with-resources automatically closes the connection
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            System.out.println("Connected to the database!");
            
            // Create and execute a statement
            try (Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery("SELECT * FROM users")) {
                
                // Process the results
                while (resultSet.next()) {
                    int id = resultSet.getInt("id");
                    String name = resultSet.getString("name");
                    System.out.println("ID: " + id + ", Name: " + name);
                }
            }
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🔧</div>
              <p>Install USB driver before plugging in!</p>
            </div>
          </div>
          <p>Driver loading methods:</p>
          <ul>
            <li><strong>Explicit Loading (JDBC 3.0 and earlier)</strong>:
              <ul>
                <li>Use <code>Class.forName()</code> to load the driver class</li>
                <li>Required for older JDBC versions</li>
                <li>Example: <code>Class.forName("com.mysql.cj.jdbc.Driver");</code></li>
              </ul>
            </li>
            <li><strong>Automatic Loading (JDBC 4.0+)</strong>:
              <ul>
                <li>No need to explicitly load the driver</li>
                <li>The DriverManager automatically finds and loads the driver</li>
                <li>Drivers are registered in the META-INF/services/java.sql.Driver file</li>
              </ul>
            </li>
          </ul>
          <p>Common JDBC drivers:</p>
          <table>
            <tr>
              <th>Database</th>
              <th>Driver Class</th>
              <th>URL Format</th>
            </tr>
            <tr>
              <td>MySQL</td>
              <td><code>com.mysql.cj.jdbc.Driver</code></td>
              <td><code>jdbc:mysql://hostname:port/database</code></td>
            </tr>
            <tr>
              <td>Oracle</td>
              <td><code>oracle.jdbc.driver.OracleDriver</code></td>
              <td><code>jdbc:oracle:thin:@hostname:port:SID</code></td>
            </tr>
            <tr>
              <td>PostgreSQL</td>
              <td><code>org.postgresql.Driver</code></td>
              <td><code>jdbc:postgresql://hostname:port/database</code></td>
            </tr>
            <tr>
              <td>SQL Server</td>
              <td><code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code></td>
              <td><code>jdbc:sqlserver://hostname:port;databaseName=database</code></td>
            </tr>
            <tr>
              <td>SQLite</td>
              <td><code>org.sqlite.JDBC</code></td>
              <td><code>jdbc:sqlite:path/to/database.db</code></td>
            </tr>
          </table>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🌐 Connection URL</h2>
          <div class="card-icon">🌐</div>
        </div>
        <div class="card-content">
          <p>The connection URL is a string that specifies the database to connect to. Think of it as the address of the database:</p>
          <div class="code-block">
// General format of a JDBC URL
// jdbc:subprotocol:subname

// MySQL URL
String mysqlUrl = "jdbc:mysql://localhost:3306/mydatabase";

// MySQL URL with parameters
String mysqlUrlWithParams = "jdbc:mysql://localhost:3306/mydatabase?user=root&password=password&useSSL=false";

// Oracle URL
String oracleUrl = "jdbc:oracle:thin:@localhost:1521:ORCL";

// PostgreSQL URL
String postgresUrl = "jdbc:postgresql://localhost:5432/mydatabase";

// SQL Server URL
String sqlServerUrl = "jdbc:sqlserver://localhost:1433;databaseName=mydatabase;user=sa;password=password";

// SQLite URL (file-based database)
String sqliteUrl = "jdbc:sqlite:/path/to/database.db";

// Using the URL to establish a connection
try {
    Connection connection = DriverManager.getConnection(mysqlUrl, "root", "password");
    System.out.println("Connected to the database!");
    
    // Using URL with parameters
    Connection connectionWithParams = DriverManager.getConnection(mysqlUrlWithParams);
    System.out.println("Connected with parameters!");
    
    connection.close();
    connectionWithParams.close();
} catch (SQLException e) {
    System.out.println("Connection error: " + e.getMessage());
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🌐</div>
              <p>Address of the database: jdbc:mysql://localhost:3306/school!</p>
            </div>
          </div>
          <p>Parts of a JDBC URL:</p>
          <ul>
            <li><strong>jdbc</strong>: The protocol, always "jdbc" for JDBC URLs</li>
            <li><strong>subprotocol</strong>: The name of the driver or database connectivity mechanism</li>
            <li><strong>subname</strong>: A way to identify the database, which may include:
              <ul>
                <li>Hostname or IP address of the database server</li>
                <li>Port number</li>
                <li>Database name</li>
                <li>Additional parameters</li>
              </ul>
            </li>
          </ul>
          <p>Common URL parameters:</p>
          <table>
            <tr>
              <th>Parameter</th>
              <th>Description</th>
              <th>Example</th>
            </tr>
            <tr>
              <td><code>user</code></td>
              <td>Database username</td>
              <td><code>?user=root</code></td>
            </tr>
            <tr>
              <td><code>password</code></td>
              <td>Database password</td>
              <td><code>&password=secret</code></td>
            </tr>
            <tr>
              <td><code>useSSL</code></td>
              <td>Whether to use SSL (MySQL)</td>
              <td><code>&useSSL=false</code></td>
            </tr>
            <tr>
              <td><code>serverTimezone</code></td>
              <td>Server timezone (MySQL)</td>
              <td><code>&serverTimezone=UTC</code></td>
            </tr>
            <tr>
              <td><code>autoReconnect</code></td>
              <td>Whether to auto-reconnect (MySQL)</td>
              <td><code>&autoReconnect=true</code></td>
            </tr>
          </table>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📝 Statement vs PreparedStatement</h2>
          <div class="card-icon">📝</div>
        </div>
        <div class="card-content">
          <p>Statement and PreparedStatement are interfaces used to execute SQL queries. Think of them as a fixed letter versus a fill-in-the-blank form:</p>
          <div class="code-block">
import java.sql.*;

public class StatementVsPreparedStatement {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            // Using Statement
            System.out.println("--- Using Statement ---");
            Statement statement = connection.createStatement();
            
            // Execute a simple query
            String sql = "SELECT * FROM users WHERE id = 1";
            ResultSet rs = statement.executeQuery(sql);
            
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + 
                                  ", Name: " + rs.getString("name"));
            }
            
            // Execute a query with user input (vulnerable to SQL injection)
            String userInput = "1 OR 1=1";
            sql = "SELECT * FROM users WHERE id = " + userInput;
            System.out.println("Executing: " + sql);
            rs = statement.executeQuery(sql);
            
            // This will return all users, not just the one with id=1
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + 
                                  ", Name: " + rs.getString("name"));
            }
            
            // Using PreparedStatement
            System.out.println("\n--- Using PreparedStatement ---");
            
            // Create a prepared statement with parameters
            String preparedSql = "SELECT * FROM users WHERE id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(preparedSql);
            
            // Set the parameter value
            preparedStatement.setInt(1, 1);
            
            // Execute the query
            rs = preparedStatement.executeQuery();
            
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + 
                                  ", Name: " + rs.getString("name"));
            }
            
            // Using PreparedStatement with user input (safe from SQL injection)
            userInput = "1 OR 1=1";
            preparedStatement.setInt(1, Integer.parseInt(userInput));
            System.out.println("Executing with parameter: " + userInput);
            
            // This will only return the user with id=1 (or throw an exception if the input is not a number)
            rs = preparedStatement.executeQuery();
            
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + 
                                  ", Name: " + rs.getString("name"));
            }
            
            // Insert example with PreparedStatement
            String insertSql = "INSERT INTO users (name, email) VALUES (?, ?)";
            PreparedStatement insertStatement = connection.prepareStatement(insertSql);
            
            insertStatement.setString(1, "John Doe");
            insertStatement.setString(2, "john@example.com");
            
            int rowsAffected = insertStatement.executeUpdate();
            System.out.println(rowsAffected + " row(s) inserted.");
            
            rs.close();
            statement.close();
            preparedStatement.close();
            insertStatement.close();
            
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Number format error: " + e.getMessage());
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📝</div>
              <p>Statement = fixed letter, PreparedStatement = fill-in-blank form!</p>
            </div>
          </div>
          <p>Comparison between Statement and PreparedStatement:</p>
          <table>
            <tr>
              <th>Feature</th>
              <th>Statement</th>
              <th>PreparedStatement</th>
            </tr>
            <tr>
              <td>SQL Injection</td>
              <td>Vulnerable</td>
              <td>Prevents SQL injection</td>
            </tr>
            <tr>
              <td>Performance</td>
              <td>Slower for repeated execution</td>
              <td>Faster for repeated execution (precompiled)</td>
            </tr>
            <tr>
              <td>Parameters</td>
              <td>Concatenate strings</td>
              <td>Use parameter placeholders (?)</td>
            </tr>
            <tr>
              <td>Binary Data</td>
              <td>Difficult to handle</td>
              <td>Easy to handle with setBinaryStream(), etc.</td>
            </tr>
            <tr>
              <td>Readability</td>
              <td>Less readable with complex queries</td>
              <td>More readable with parameters</td>
            </tr>
          </table>
          <p>When to use which:</p>
          <ul>
            <li><strong>Use Statement</strong> when:
              <ul>
                <li>Executing simple, static SQL queries</li>
                <li>The query is executed only once</li>
                <li>You're sure the input is safe (not from user input)</li>
              </ul>
            </li>
            <li><strong>Use PreparedStatement</strong> when:
              <ul>
                <li>Executing queries with user input</li>
              </ul>
            </li>
            <li>Executing the same query multiple times with different parameters</li>
            <li>Working with binary data (BLOBs)</li>
            <li>You want to prevent SQL injection attacks</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📊 CRUD Operations</h2>
          <div class="card-icon">📊</div>
        </div>
        <div class="card-content">
          <p>CRUD stands for Create, Read, Update, and Delete - the four basic operations of persistent storage:</p>
          <div class="code-block">
import java.sql.*;

public class CrudOperations {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            // CREATE operation
            System.out.println("--- CREATE ---");
            String insertSql = "INSERT INTO users (name, email, age) VALUES (?, ?, ?)";
            try (PreparedStatement insertStatement = connection.prepareStatement(insertSql)) {
                insertStatement.setString(1, "John Doe");
                insertStatement.setString(2, "john@example.com");
                insertStatement.setInt(3, 30);
                
                int rowsAffected = insertStatement.executeUpdate();
                System.out.println(rowsAffected + " row(s) inserted.");
            }
            
            // READ operation
            System.out.println("\n--- READ ---");
            String selectSql = "SELECT * FROM users";
            try (Statement selectStatement = connection.createStatement();
                 ResultSet resultSet = selectStatement.executeQuery(selectSql)) {
                
                while (resultSet.next()) {
                    int id = resultSet.getInt("id");
                    String name = resultSet.getString("name");
                    String email = resultSet.getString("email");
                    int age = resultSet.getInt("age");
                    
                    System.out.println("ID: " + id + ", Name: " + name + 
                                      ", Email: " + email + ", Age: " + age);
                }
            }
            
            // UPDATE operation
            System.out.println("\n--- UPDATE ---");
            String updateSql = "UPDATE users SET age = ? WHERE name = ?";
            try (PreparedStatement updateStatement = connection.prepareStatement(updateSql)) {
                updateStatement.setInt(1, 31);
                updateStatement.setString(2, "John Doe");
                
                int rowsUpdated = updateStatement.executeUpdate();
                System.out.println(rowsUpdated + " row(s) updated.");
            }
            
            // Verify the update
            System.out.println("\n--- After UPDATE ---");
            try (Statement selectStatement = connection.createStatement();
                 ResultSet resultSet = selectStatement.executeQuery("SELECT * FROM users WHERE name = 'John Doe'")) {
                
                while (resultSet.next()) {
                    int id = resultSet.getInt("id");
                    String name = resultSet.getString("name");
                    String email = resultSet.getString("email");
                    int age = resultSet.getInt("age");
                    
                    System.out.println("ID: " + id + ", Name: " + name + 
                                      ", Email: " + email + ", Age: " + age);
                }
            }
            
            // DELETE operation
            System.out.println("\n--- DELETE ---");
            String deleteSql = "DELETE FROM users WHERE name = ?";
            try (PreparedStatement deleteStatement = connection.prepareStatement(deleteSql)) {
                deleteStatement.setString(1, "John Doe");
                
                int rowsDeleted = deleteStatement.executeUpdate();
                System.out.println(rowsDeleted + " row(s) deleted.");
            }
            
            // Verify the deletion
            System.out.println("\n--- After DELETE ---");
            try (Statement selectStatement = connection.createStatement();
                 ResultSet resultSet = selectStatement.executeQuery("SELECT * FROM users WHERE name = 'John Doe'")) {
                
                boolean found = false;
                while (resultSet.next()) {
                    found = true;
                    int id = resultSet.getInt("id");
                    String name = resultSet.getString("name");
                    String email = resultSet.getString("email");
                    int age = resultSet.getInt("age");
                    
                    System.out.println("ID: " + id + ", Name: " + name + 
                                      ", Email: " + email + ", Age: " + age);
                }
                
                if (!found) {
                    System.out.println("No user named 'John Doe' found.");
                }
            }
            
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📊</div>
              <p>Create, Read, Update, Delete - the four basic operations!</p>
            </div>
          </div>
          <p>CRUD operations in detail:</p>
          <table>
            <tr>
              <th>Operation</th>
              <th>SQL Command</th>
              <th>JDBC Method</th>
              <th>Description</th>
            </tr>
            <tr>
              <td><strong>Create (Insert)</strong></td>
              <td><code>INSERT INTO</code></td>
              <td><code>executeUpdate()</code></td>
              <td>Adds new records to a table</td>
            </tr>
            <tr>
              <td><strong>Read (Select)</strong></td>
              <td><code>SELECT</code></td>
              <td><code>executeQuery()</code></td>
              <td>Retrieves records from a table</td>
            </tr>
            <tr>
              <td><strong>Update</strong></td>
              <td><code>UPDATE</code></td>
              <td><code>executeUpdate()</code></td>
              <td>Modifies existing records in a table</td>
            </tr>
            <tr>
              <td><strong>Delete</strong></td>
              <td><code>DELETE FROM</code></td>
              <td><code>executeUpdate()</code></td>
              <td>Removes records from a table</td>
            </tr>
          </table>
          <p>Key points about CRUD operations:</p>
          <ul>
            <li><strong>executeQuery()</strong> is used for SELECT statements that return a ResultSet</li>
            <li><strong>executeUpdate()</strong> is used for INSERT, UPDATE, DELETE, and DDL statements that don't return a ResultSet</li>
            <li><strong>execute()</strong> can be used for any type of SQL statement and returns a boolean indicating if the first result is a ResultSet</li>
            <li>Always use PreparedStatement for operations that include user input to prevent SQL injection</li>
            <li>Close resources (ResultSet, Statement, Connection) when done to prevent resource leaks</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📋 ResultSet</h2>
          <div class="card-icon">📋</div>
        </div>
        <div class="card-content">
          <p>A ResultSet is a table of data representing a database result set. Think of it as a virtual table that holds the data returned from a query:</p>
          <div class="code-block">
import java.sql.*;

public class ResultSetExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            // Execute a query
            Statement statement = connection.createStatement();
            String sql = "SELECT id, name, email, age FROM users";
            ResultSet resultSet = statement.executeQuery(sql);
            
            // Get metadata about the result set
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            
            // Print column headers
            for (int i = 1; i <= columnCount; i++) {
                System.out.print(metaData.getColumnName(i) + "\t");
            }
            System.out.println();
            
            // Navigate through the result set
            while (resultSet.next()) {
                // Get data by column name
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String email = resultSet.getString("email");
                int age = resultSet.getInt("age");
                
                // Get data by column index (1-based)
                // int id = resultSet.getInt(1);
                // String name = resultSet.getString(2);
                // String email = resultSet.getString(3);
                // int age = resultSet.getInt(4);
                
                System.out.println(id + "\t" + name + "\t" + email + "\t" + age);
            }
            
            // Reset the cursor to before the first row
            resultSet.beforeFirst();
            
            // Navigate using absolute positioning
            System.out.println("\n--- Using absolute positioning ---");
            if (resultSet.absolute(3)) {  // Move to the 3rd row
                System.out.println("3rd row: " + 
                                  resultSet.getInt("id") + "\t" + 
                                  resultSet.getString("name"));
            }
            
            // Navigate using relative positioning
            System.out.println("\n--- Using relative positioning ---");
            if (resultSet.relative(-1)) {  // Move back one row
                System.out.println("2nd row: " + 
                                  resultSet.getInt("id") + "\t" + 
                                  resultSet.getString("name"));
            }
            
            // Move to the last row
            System.out.println("\n--- Last row ---");
            if (resultSet.last()) {
                System.out.println("Last row: " + 
                                  resultSet.getInt("id") + "\t" + 
                                  resultSet.getString("name"));
            }
            
            // Get the row number
            int rowNum = resultSet.getRow();
            System.out.println("Row number: " + rowNum);
            
            // Check if a column value is NULL
            System.out.println("\n--- Checking for NULL values ---");
            resultSet.beforeFirst();
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String email = resultSet.getString("email");
                int age = resultSet.getInt("age");
                
                // Check if email is NULL
                if (resultSet.wasNull()) {
                    email = "NULL";
                }
                
                System.out.println(id + "\t" + name + "\t" + email + "\t" + age);
            }
            
            resultSet.close();
            statement.close();
            
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📋</div>
              <p>Table of results returned from query!</p>
            </div>
          </div>
          <p>Common ResultSet methods:</p>
          <table>
            <tr>
              <th>Method</th>
              <th>Description</th>
            </tr>
            <tr>
              <td><code>next()</code></td>
              <td>Moves the cursor forward one row</td>
            </tr>
            <tr>
              <td><code>previous()</code></td>
              <td>Moves the cursor backward one row (only for TYPE_SCROLL_INSENSITIVE or TYPE_SCROLL_SENSITIVE)</td>
            </tr>
            <tr>
              <td><code>first()</code></td>
              <td>Moves the cursor to the first row</td>
            </tr>
            <tr>
              <td><code>last()</code></td>
              <td>Moves the cursor to the last row</td>
            </tr>
            <tr>
              <td><code>beforeFirst()</code></td>
              <td>Moves the cursor to before the first row</td>
            </tr>
            <tr>
              <td><code>afterLast()</code></td>
              <td>Moves the cursor to after the last row</td>
            </tr>
            <tr>
              <td><code>absolute(int row)</code></td>
              <td>Moves the cursor to the specified row</td>
            </tr>
            <tr>
              <td><code>relative(int rows)</code></td>
              <td>Moves the cursor the specified number of rows from the current position</td>
            </tr>
            <tr>
              <td><code>getRow()</code></td>
              <td>Gets the current row number</td>
            </tr>
            <tr>
              <td><code>getType()</code></td>
              <td>Gets the type of the ResultSet (TYPE_FORWARD_ONLY, TYPE_SCROLL_INSENSITIVE, TYPE_SCROLL_SENSITIVE)</td>
            </tr>
            <tr>
              <td><code>wasNull()</code></td>
              <td>Checks if the last column read was NULL</td>
            </tr>
          </table>
          <p>ResultSet types:</p>
          <ul>
            <li><strong>TYPE_FORWARD_ONLY</strong>: The cursor can only move forward (default)</li>
            <li><strong>TYPE_SCROLL_INSENSITIVE</strong>: The cursor can move in any direction, but changes to the database are not reflected</li>
            <li><strong>TYPE_SCROLL_SENSITIVE</strong>: The cursor can move in any direction, and changes to the database are reflected</li>
          </ul>
          <p>ResultSet concurrency:</p>
            <ul>
            <li><strong>CONCUR_READ_ONLY</strong>: The ResultSet cannot be used to update the database (default)</li>
            <li><strong>CONCUR_UPDATABLE</strong>: The ResultSet can be used to update the database</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🚪 Closing Resources</h2>
          <div class="card-icon">🚪</div>
        </div>
        <div class="card-content">
          <p>Properly closing database resources is crucial to prevent resource leaks. Think of it as turning off the tap after use:</p>
          <div class="code-block">
import java.sql.*;

public class ClosingResources {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydatabase";
        String username = "root";
        String password = "password";
        
        // Method 1: Traditional way with try-catch-finally
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        
        try {
            connection = DriverManager.getConnection(url, username, password);
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM users");
            
            while (resultSet.next()) {
                System.out.println("ID: " + resultSet.getInt("id") + 
                                  ", Name: " + resultSet.getString("name"));
            }
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        } finally {
            // Close resources in reverse order of creation
            try {
                if (resultSet != null) resultSet.close();
            } catch (SQLException e) {
                System.out.println("Error closing ResultSet: " + e.getMessage());
            }
            
            try {
                if (statement != null) statement.close();
            } catch (SQLException e) {
                System.out.println("Error closing Statement: " + e.getMessage());
            }
            
            try {
                if (connection != null) connection.close();
            } catch (SQLException e) {
                System.out.println("Error closing Connection: " + e.getMessage());
            }
        }
        
        // Method 2: Try-with-resources (Java 7+)
        System.out.println("\n--- Using try-with-resources ---");
        
        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
            
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + 
                                  ", Name: " + rs.getString("name"));
            }
            
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        }
        // Resources are automatically closed
        
        // Method 3: Utility method for closing resources
        System.out.println("\n--- Using utility method ---");
        
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            conn = DriverManager.getConnection(url, username, password);
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT * FROM users");
            
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + 
                                  ", Name: " + rs.getString("name"));
            }
        } catch (SQLException e) {
            System.out.println("SQL error: " + e.getMessage());
        } finally {
            closeQuietly(rs);
            closeQuietly(stmt);
            closeQuietly(conn);
        }
    }
    
    // Utility method to close resources quietly
    public static void closeQuietly(AutoCloseable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (Exception e) {
                // Log the error or ignore it
                System.out.println("Error closing resource: " + e.getMessage());
            }
        }
    }
}
          </div>
          <div class="visual">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">🚪</div>
              <p>Turn off tap after use — prevent leaks!</p>
            </div>
          </div>
          <p>Methods for closing resources:</p>
          <ol>
            <li><strong>Traditional try-catch-finally</strong>:
              <ul>
                <li>Declare resources outside the try block</li>
                <li>Close each resource in a separate try-catch block in the finally block</li>
                <li>Close resources in reverse order of creation</li>
                <li>Verbose but works in all Java versions</li>
              </ul>
            </li>
            <li><strong>Try-with-resources (Java 7+)</strong>:
              <ul>
                <li>Declare resources in the try statement</li>
                <li>Resources are automatically closed when the try block exits</li>
                <li>Cleaner and less error-prone</li>
                <li>Recommended approach for Java 7 and above</li>
              </ul>
            </li>
            <li><strong>Utility method</strong>:
              <ul>
                <li>Create a helper method to close resources quietly</li>
                <li>Reduces code duplication</li>
                <li>Can be used in projects that need to support older Java versions</li>
              </ul>
            </li>
          </ol>
          <p>Best practices for closing resources:</p>
          <ul>
            <li>Always close resources when you're done with them</li>
            <li>Close resources in reverse order of creation</li>
            <li>Use try-with-resources when possible (Java 7+)</li>
            <li>Check for null before closing resources</li>
            <li>Handle exceptions when closing resources</li>
            <li>Consider using connection pooling in production applications</li>
          </ul>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>💬 Interactive: SQL Queries</h2>
          <div class="card-icon">💬</div>
        </div>
        <div class="card-content">
          <p>Fill in the blanks for SQL queries and see instant feedback:</p>
          <div class="interactive">
            <div id="sql-simulator">
              <div class="quiz-container">
                <div class="quiz-question">Complete the SELECT statement to get all columns from the 'users' table:</div>
                <div class="code-block">
SELECT ____ FROM users;
                </div>
                <div class="quiz-options">
                  <div class="quiz-option" onclick="selectSqlOption(this, 'all')">all</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, '*')">*</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'columns')">columns</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'everything')">everything</div>
                </div>
                <div class="quiz-feedback" id="sql-feedback-1"></div>
              </div>
              
              <div class="quiz-container">
                <div class="quiz-question">Complete the INSERT statement to add a new user with name 'John' and email 'john@example.com':</div>
                <div class="code-block">
INSERT INTO users (name, email) ____ ('John', 'john@example.com');
                </div>
                <div class="quiz-options">
                  <div class="quiz-option" onclick="selectSqlOption(this, 'adds')">adds</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'inserts')">inserts</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'VALUES')">VALUES</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'INTO')">INTO</div>
                </div>
                <div class="quiz-feedback" id="sql-feedback-2"></div>
              </div>
              
              <div class="quiz-container">
                <div class="quiz-question">Complete the UPDATE statement to change the email of user with id=1 to 'new@example.com':</div>
                <div class="code-block">
UPDATE users SET email = 'new@example.com' ____ id = 1;
                </div>
                <div class="quiz-options">
                  <div class="quiz-option" onclick="selectSqlOption(this, 'WHERE')">WHERE</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'WHEN')">WHEN</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'IF')">IF</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'FOR')">FOR</div>
                </div>
                <div class="quiz-feedback" id="sql-feedback-3"></div>
              </div>
              
              <div class="quiz-container">
                <div class="quiz-question">Complete the DELETE statement to remove users with age less than 18:</div>
                <div class="code-block">
DELETE FROM users ____ age < 18;
                </div>
                <div class="quiz-options">
                  <div class="quiz-option" onclick="selectSqlOption(this, 'WHERE')">WHERE</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'HAVING')">HAVING</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'WITH')">WITH</div>
                  <div class="quiz-option" onclick="selectSqlOption(this, 'IF')">IF</div>
                </div>
                <div class="quiz-feedback" id="sql-feedback-4"></div>
              </div>
              
              <div style="text-align: center; margin-top: 20px;">
                <button onclick="checkSqlAnswers()">Check All Answers</button>
                <button onclick="resetSqlQuiz()">Reset Quiz</button>
              </div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
    </section>
    
    <!-- Section 6: Final Review & Exam Prep -->
    <section id="section6" class="section">
      <div class="card">
        <div class="card-header">
          <h2>📚 Flashcards</h2>
          <div class="card-icon">📚</div>
        </div>
        <div class="card-content">
          <p>Test your knowledge with these flashcards. Click on a card to flip it and see the answer:</p>
          <div class="interactive">
            <div id="flashcards-container">
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is OOP?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Object-Oriented Programming</h3>
                  <p>A programming paradigm based on the concept of "objects", which can contain data and code. The four main principles are Encapsulation, Inheritance, Polymorphism, and Abstraction.</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is encapsulation?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Encapsulation</h3>
                  <p>The practice of hiding the internal details of an object and exposing only what is necessary. It's achieved by using private fields and public methods (getters and setters).</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is inheritance?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Inheritance</h3>
                  <p>A mechanism where a new class is derived from an existing class. The new class (subclass) inherits the fields and methods of the existing class (superclass).</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is polymorphism?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Polymorphism</h3>
                  <p>The ability of an object to take on many forms. In Java, it's achieved through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism).</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is an interface?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Interface</h3>
                  <p>A reference type in Java that can contain only constants, method signatures, default methods, static methods, and nested types. It defines a contract that implementing classes must follow.</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is an abstract class?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Abstract Class</h3>
                  <p>A class that cannot be instantiated and may contain abstract methods (methods without a body). It's used to provide a base class with common functionality.</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is the difference between checked and unchecked exceptions?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>Checked vs Unchecked Exceptions</h3>
                  <p>Checked exceptions are checked at compile-time and must be handled or declared with throws. Unchecked exceptions are not checked at compile-time and are usually programming errors.</p>
                </div>
              </div>
              
              <div class="flashcard" onclick="flipCard(this)">
                <div class="flashcard-front">
                  <h3>What is JDBC?</h3>
                  <p>Click to see answer</p>
                </div>
                <div class="flashcard-back">
                  <h3>JDBC</h3>
                  <p>Java Database Connectivity, an API that enables Java applications to interact with databases. It provides methods to query and update data in a database.</p>
                </div>
              </div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
              <button onclick="resetFlashcards()">Reset All Cards</button>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>❓ Mini Quiz</h2>
          <div class="card-icon">❓</div>
        </div>
        <div class="card-content">
          <p>Test your knowledge with this mini quiz:</p>
          <div class="interactive">
            <div id="quiz-container">
              <div class="quiz-question">1. Which of the following is NOT a feature of Java?</div>
              <div class="quiz-options">
                <div class="quiz-option" onclick="selectQuizOption(this, false)">Platform Independence</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">Object-Oriented</div>
                <div class="quiz-option" onclick="selectQuizOption(this, true)">Pointer Arithmetic</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">Automatic Memory Management</div>
              </div>
              <div class="quiz-feedback" id="quiz-feedback-1"></div>
              
              <div class="quiz-question">2. Which keyword is used to create a constant in Java?</div>
              <div class="quiz-options">
                <div class="quiz-option" onclick="selectQuizOption(this, false)">static</div>
                <div class="quiz-option" onclick="selectQuizOption(this, true)">final</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">const</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">constant</div>
              </div>
              <div class="quiz-feedback" id="quiz-feedback-2"></div>
              
              <div class="quiz-question">3. Which of the following is NOT a valid access modifier in Java?</div>
              <div class="quiz-options">
                <div class="quiz-option" onclick="selectQuizOption(this, false)">public</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">protected</div>
                <div class="quiz-option" onclick="selectQuizOption(this, true)">private protected</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">private</div>
              </div>
              <div class="quiz-feedback" id="quiz-feedback-3"></div>
              
              <div class="quiz-question">4. Which interface is used to sort objects in a collection?</div>
              <div class="quiz-options">
                <div class="quiz-option" onclick="selectQuizOption(this, false)">Serializable</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">Cloneable</div>
                <div class="quiz-option" onclick="selectQuizOption(this, true)">Comparable</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">Runnable</div>
              </div>
              <div class="quiz-feedback" id="quiz-feedback-4"></div>
              
              <div class="quiz-question">5. Which of the following is used to handle exceptions in Java?</div>
              <div class="quiz-options">
                <div class="quiz-option" onclick="selectQuizOption(this, false)">try-catch</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">throws</div>
                <div class="quiz-option" onclick="selectQuizOption(this, false)">throw</div>
                <div class="quiz-option" onclick="selectQuizOption(this, true)">All of the above</div>
              </div>
              <div class="quiz-feedback" id="quiz-feedback-5"></div>
              
              <div style="text-align: center; margin-top: 20px;">
                <button onclick="checkQuizAnswers()">Check Answers</button>
                <button onclick="resetQuiz()">Reset Quiz</button>
              </div>
              
              <div id="quiz-score" style="text-align: center; margin-top: 20px; font-weight: bold; display: none;"></div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📊 Progress Tracker</h2>
          <div class="card-icon">📊</div>
        </div>
        <div class="card-content">
          <p>Track your progress through the course:</p>
          <div class="interactive">
            <div id="progress-tracker">
              <h3>Section Progress</h3>
              <div class="progress-section">
                <div class="progress-label">Section 1: Welcome & Basics</div>
                <div class="progress-bar-container">
                  <div class="progress-bar-fill" id="section1-progress" style="width: 0%;"></div>
                </div>
                <div class="progress-percent" id="section1-percent">0%</div>
              </div>
              
              <div class="progress-section">
                <div class="progress-label">Section 2: OOP Core</div>
                <div class="progress-bar-container">
                  <div class="progress-bar-fill" id="section2-progress" style="width: 0%;"></div>
                </div>
                <div class="progress-percent" id="section2-percent">0%</div>
              </div>
              
              <div class="progress-section">
                <div class="progress-label">Section 3: Packages & Exceptions</div>
                <div class="progress-bar-container">
                  <div class="progress-bar-fill" id="section3-progress" style="width: 0%;"></div>
                </div>
                <div class="progress-percent" id="section3-percent">0%</div>
              </div>
              
              <div class="progress-section">
                <div class="progress-label">Section 4: GUI with Swing</div>
                <div class="progress-bar-container">
                  <div class="progress-bar-fill" id="section4-progress" style="width: 0%;"></div>
                </div>
                <div class="progress-percent" id="section4-percent">0%</div>
              </div>
              
              <div class="progress-section">
                <div class="progress-label">Section 5: Database with JDBC</div>
                <div class="progress-bar-container">
                  <div class="progress-bar-fill" id="section5-progress" style="width: 0%;"></div>
                </div>
                <div class="progress-percent" id="section5-percent">0%</div>
              </div>
              
              <div class="progress-section">
                <div class="progress-label">Section 6: Final Review</div>
                <div class="progress-bar-container">
                  <div class="progress-bar-fill" id="section6-progress" style="width: 0%;"></div>
                </div>
                <div class="progress-percent" id="section6-percent">0%</div>
              </div>
              
              <div style="text-align: center; margin-top: 20px;">
                <button onclick="updateProgressTracker()">Update Progress</button>
                <button onclick="resetProgress()">Reset Progress</button>
              </div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>📝 Summary PDF</h2>
          <div class="card-icon">📝</div>
        </div>
        <div class="card-content">
          <p>Download a summary PDF of all the key concepts covered in this course:</p>
          <div class="interactive">
            <div style="text-align: center; padding: 20px;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">📄</div>
              <p style="margin-bottom: 20px;">Get a comprehensive summary of all Java OOP concepts covered in this course.</p>
              <button onclick="downloadSummary()">Download Summary PDF</button>
              <p style="margin-top: 20px; font-size: 0.9rem; color: #666;">Note: This is a simulated download. In a real application, this would generate or link to an actual PDF file.</p>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2>🏆 Certificate</h2>
          <div class="card-icon">🏆</div>
        </div>
        <div class="card-content">
          <p>Congratulations on completing the OOPJ Buddy course! You've earned a certificate:</p>
          <div class="interactive">
            <div id="certificate-container">
              <div style="text-align: center; padding: 20px;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">🏆</div>
                <p style="margin-bottom: 20px;">Complete all sections to unlock your certificate!</p>
                <button onclick="checkCertificateEligibility()">Check Eligibility</button>
                <button onclick="showCertificate()" id="show-cert-btn" style="display: none;">Show Certificate</button>
              </div>
            </div>
          </div>
        </div>
        <div class="card-actions">
          <button onclick="markCardComplete(this)">✅ Got It!</button>
        </div>
      </div>
      
      <!-- Certificate (hidden by default) -->
      <div class="certificate" id="certificate">
        <div class="certificate-border">
          <h2>🏆 Certificate of Completion</h2>
          <p style="font-size: 1.2rem; margin: 1rem 0;">This is to certify that</p>
          <p style="font-size: 1.5rem; font-weight: bold; margin: 1rem 0;">Student Name</p>
          <p style="font-size: 1.2rem; margin: 1rem 0;">has successfully completed the</p>
          <p style="font-size: 1.5rem; font-weight: bold; margin: 1rem 0;">OOPJ Buddy: Learn Java Without Fear</p>
          <p style="font-size: 1.2rem; margin: 1rem 0;">course with distinction</p>
          <p style="font-size: 1rem; margin: 2rem 0;">Date: <span id="cert-date"></span></p>
        </div>
        <div class="certificate-actions">
          <button onclick="printCertificate()">Print Certificate</button>
          <button onclick="hideCertificate()">Close</button>
        </div>
      </div>
    </section>
  </main>
  
  <!-- Navigation -->
  <nav>
    <button id="prev" onclick="navigateCard(-1)">← Previous</button>
    <button id="next" onclick="navigateCard(1)">Next →</button>
  </nav>
  
  <!-- Mascot -->
  <div class="mascot">
    <div class="mascot-emoji">🤖</div>
    <div class="mascot-speech">Great job learning Java!</div>
  </div>
  
  <script>
    // Global variables
    let currentSection = 1;
    let currentCard = 0;
    let completedCards = {};
    let totalCards = {};
    
    // Initialize the app
    document.addEventListener('DOMContentLoaded', function() {
      // Count total cards in each section
      for (let i = 1; i <= 6; i++) {
        const section = document.getElementById(`section${i}`);
        if (section) {
          const cards = section.querySelectorAll('.card');
          totalCards[i] = cards.length;
          completedCards[i] = 0;
        }
      }
      
      // Load progress from localStorage
      loadProgress();
      
      // Update progress display
      updateProgress();
      
      // Initialize section tabs
      const sectionTabs = document.querySelectorAll('.section-tab');
      sectionTabs.forEach(tab => {
        tab.addEventListener('click', function() {
          const section = parseInt(this.getAttribute('data-section'));
          switchSection(section);
        });
      });
      
      // Initialize drag and drop for match game
      initializeDragAndDrop();
      
      // Set current date for certificate
      document.getElementById('cert-date').textContent = new Date().toLocaleDateString();
    });
    
    // Switch to a different section
    function switchSection(section) {
      // Hide current section
      document.getElementById(`section${currentSection}`).classList.remove('active');
      document.querySelector(`.section-tab[data-section="${currentSection}"]`).classList.remove('active');
      
      // Show new section
      currentSection = section;
      document.getElementById(`section${currentSection}`).classList.add('active');
      document.querySelector(`.section-tab[data-section="${currentSection}"]`).classList.add('active');
      
      // Reset card index
      currentCard = 0;
      
      // Update section name in progress bar
      const sectionNames = {
        1: "Welcome & Basics",
        2: "OOP Core",
        3: "Packages & Exceptions",
        4: "GUI with Swing",
        5: "Database with JDBC",
        6: "Final Review"
      };
      document.getElementById('current-section').textContent = `Section ${section}: ${sectionNames[section]}`;
      
      // Update progress
      updateProgress();
      
      // Save progress
      saveProgress();
    }
    
    // Navigate between cards
    function navigateCard(direction) {
      const section = document.getElementById(`section${currentSection}`);
      const cards = section.querySelectorAll('.card');
      
      if (direction === 1 && currentCard < cards.length - 1) {
        // Move to next card
        currentCard++;
      } else if (direction === -1 && currentCard > 0) {
        // Move to previous card
        currentCard--;
      } else if (direction === 1 && currentCard === cards.length - 1 && currentSection < 6) {
        // Move to next section
        switchSection(currentSection + 1);
        return;
      } else if (direction === -1 && currentCard === 0 && currentSection > 1) {
        // Move to previous section
        switchSection(currentSection - 1);
        currentCard = totalCards[currentSection] - 1;
        return;
      }
      
      // Scroll to current card
      cards[currentCard].scrollIntoView({ behavior: 'smooth', block: 'center' });
      
      // Update navigation buttons
      updateNavigationButtons();
    }
    
    // Update navigation buttons
    function updateNavigationButtons() {
      const prevButton = document.getElementById('prev');
      const nextButton = document.getElementById('next');
      
      // Disable previous button if on first card of first section
      prevButton.disabled = (currentSection === 1 && currentCard === 0);
      
      // Disable next button if on last card of last section
      const isLastCard = (currentCard === totalCards[currentSection] - 1);
      const isLastSection = (currentSection === 6);
      nextButton.disabled = (isLastCard && isLastSection);
    }
    
    // Mark a card as completed
    function markCardComplete(button) {
      const card = button.closest('.card');
      card.classList.add('completed');
      
      // Update completed cards count
      if (!completedCards[currentSection]) {
        completedCards[currentSection] = 0;
      }
      completedCards[currentSection]++;
      
      // Update progress
      updateProgress();
      
      // Save progress
      saveProgress();
      
      // Show mascot message
      showMascotMessage("Great job! Keep going!");
      
      // Auto-navigate to next card after a short delay
      setTimeout(() => {
        navigateCard(1);
      }, 500);
    }
    
    // Update progress display
    function updateProgress() {
      // Calculate total and completed cards
      let total = 0;
      let completed = 0;
      
      for (let i = 1; i <= 6; i++) {
        total += totalCards[i] || 0;
        completed += completedCards[i] || 0;
      }
      
      // Update progress bar
      const percent = total > 0 ? Math.round((completed / total) * 100) : 0;
      document.getElementById('progress-fill').style.width = percent + '%';
      document.getElementById('progress-percent').textContent = percent + '%';
      
      // Update navigation buttons
      updateNavigationButtons();
    }
    
    // Save progress to localStorage
    function saveProgress() {
      const progress = {
        currentSection: currentSection,
        currentCard: currentCard,
        completedCards: completedCards
      };
      localStorage.setItem('oopjBuddyProgress', JSON.stringify(progress));
    }
    
    // Load progress from localStorage
    function loadProgress() {
      const savedProgress = localStorage.getItem('oopjBuddyProgress');
      if (savedProgress) {
        const progress = JSON.parse(savedProgress);
        currentSection = progress.currentSection || 1;
        currentCard = progress.currentCard || 0;
        completedCards = progress.completedCards || {};
        
        // Restore completed card states
        for (let i = 1; i <= 6; i++) {
          const section = document.getElementById(`section${i}`);
          if (section) {
            const cards = section.querySelectorAll('.card');
            const completedCount = completedCards[i] || 0;
            
            for (let j = 0; j < completedCount && j < cards.length; j++) {
              cards[j].classList.add('completed');
            }
          }
        }
        
        // Switch to current section
        switchSection(currentSection);
        
        // Set current card
        const currentSectionElement = document.getElementById(`section${currentSection}`);
        if (currentSectionElement) {
          const cards = currentSectionElement.querySelectorAll('.card');
          if (cards[currentCard]) {
            cards[currentCard].scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
      }
    }
    
    // Show mascot message
    function showMascotMessage(message) {
      const mascotSpeech = document.querySelector('.mascot-speech');
      mascotSpeech.textContent = message;
      
      // Show the speech bubble temporarily
      mascotSpeech.style.display = 'block';
      setTimeout(() => {
        mascotSpeech.style.display = '';
      }, 3000);
    }
    
    // Initialize drag and drop for match game
    function initializeDragAndDrop() {
      // Match data types game
      const dragItems = document.querySelectorAll('#section1 .drag-item');
      const dropZones = document.querySelectorAll('#section1 .drop-zone');
      
      dragItems.forEach(item => {
        item.addEventListener('dragstart', function(e) {
          e.dataTransfer.setData('text/plain', this.getAttribute('data-type'));
          this.classList.add('dragging');
        });
        
        item.addEventListener('dragend', function() {
          this.classList.remove('dragging');
        });
      });
      
      dropZones.forEach(zone => {
        zone.addEventListener('dragover', function(e) {
          e.preventDefault();
          this.classList.add('drag-over');
        });
        
        zone.addEventListener('dragleave', function() {
          this.classList.remove('drag-over');
        });
        
        zone.addEventListener('drop', function(e) {
          e.preventDefault();
          this.classList.remove('drag-over');
          
          const dataType = e.dataTransfer.getData('text/plain');
          const acceptType = this.getAttribute('data-accept');
          
          if (dataType === acceptType) {
            this.classList.add('correct');
            this.textContent = dataType;
            this.setAttribute('data-filled', 'true');
          }
        });
      });
    }
    
    // Check match game answers
    function checkMatchGame() {
      const dropZones = document.querySelectorAll('#section1 .drop-zone');
      let allCorrect = true;
      
      dropZones.forEach(zone => {
        if (zone.getAttribute('data-filled') !== 'true') {
          allCorrect = false;
        }
      });
      
      const feedback = document.getElementById('match-feedback');
      if (allCorrect) {
        feedback.textContent = "Great job! All matches are correct!";
        feedback.style.color = 'green';
      } else {
        feedback.textContent = "Some matches are incorrect or incomplete. Please try again.";
        feedback.style.color = 'red';
      }
    }
    
    // Reset match game
    function resetMatchGame() {
      const dropZones = document.querySelectorAll('#section1 .drop-zone');
      const feedback = document.getElementById('match-feedback');
      
      dropZones.forEach(zone => {
        zone.classList.remove('correct');
        zone.textContent = zone.getAttribute('data-accept');
        zone.removeAttribute('data-filled');
      });
      
      feedback.textContent = '';
    }
    
    // Robot builder functions
    let selectedRobotType = '';
    let selectedCapabilities = [];
    
    function selectRobotType(type) {
      selectedRobotType = type;
      const options = document.querySelectorAll('#robot-builder .quiz-option');
      options.forEach(option => {
        if (option.textContent.toLowerCase().includes(type)) {
          option.classList.add('selected');
        } else {
          option.classList.remove('selected');
        }
      });
    }
    
    function toggleCapability(capability) {
      const index = selectedCapabilities.indexOf(capability);
      if (index === -1) {
        selectedCapabilities.push(capability);
      } else {
        selectedCapabilities.splice(index, 1);
      }
      
      const options = document.querySelectorAll('#robot-builder .quiz-option');
      options.forEach(option => {
        if (option.textContent.toLowerCase().includes(capability)) {
          option.classList.toggle('selected');
        }
      });
    }
    
    function generateRobotCode() {
      if (!selectedRobotType) {
        alert('Please select a robot type first!');
        return;
      }
      
      let code = '';
      
      if (selectedRobotType === 'basic') {
        code = `// Basic Robot
class BasicRobot {
    private String name;
    
    public BasicRobot(String name) {
        this.name = name;
    }
    
    public void introduce() {
        System.out.println("Hello, I'm " + name + ", a basic robot.");
    }
}`;
      } else {
        code = `// Advanced Robot
class AdvancedRobot {
    private String name;
    
    public AdvancedRobot(String name) {
        this.name = name;
    }
    
    public void introduce() {
        System.out.println("Hello, I'm " + name + ", an advanced robot.");
    }
    
    public void performDiagnostics() {
        System.out.println("Running self-diagnostics...");
    }
}`;
      }
      
      // Add interfaces for capabilities
      if (selectedCapabilities.length > 0) {
        code += '\n\n';
        
        // Create interfaces
        if (selectedCapabilities.includes('walk')) {
          code += `interface Walkable {
    void walk();
}

`;
        }
        
        if (selectedCapabilities.includes('talk')) {
          code += `interface Talkable {
    void talk(String message);
}

`;
        }
        
        if (selectedCapabilities.includes('fly')) {
          code += `interface Flyable {
    void fly();
}

`;
        }
        
        if (selectedCapabilities.includes('swim')) {
          code += `interface Swimmable {
    void swim();
}

`;
        }
        
        // Implement interfaces
        if (selectedRobotType === 'basic') {
          code += `class MyRobot extends BasicRobot `;
        } else {
          code += `class MyRobot extends AdvancedRobot `;
        }
        
        const implementsList = [];
        if (selectedCapabilities.includes('walk')) implementsList.push('Walkable');
        if (selectedCapabilities.includes('talk')) implementsList.push('Talkable');
        if (selectedCapabilities.includes('fly')) implementsList.push('Flyable');
        if (selectedCapabilities.includes('swim')) implementsList.push('Swimmable');
        
        if (implementsList.length > 0) {
          code += `implements ${implementsList.join(', ')} {\n`;
          code += `    public MyRobot(String name) {\n        super(name);\n    }\n\n`;
          
          if (selectedCapabilities.includes('walk')) {
            code += `    @Override\n    public void walk() {\n        System.out.println(name + " is walking.");\n    }\n\n`;
          }
          
          if (selectedCapabilities.includes('talk')) {
            code += `    @Override\n    public void talk(String message) {\n        System.out.println(name + " says: " + message);\n    }\n\n`;
          }
          
          if (selectedCapabilities.includes('fly')) {
            code += `    @Override\n    public void fly() {\n        System.out.println(name + " is flying.");\n    }\n\n`;
          }
          
          if (selectedCapabilities.includes('swim')) {
            code += `    @Override\n    public void swim() {\n        System.out.println(name + " is swimming.");\n    }\n\n`;
          }
          
          code += `}`;
        }
      }
      
      // Display the code
      document.getElementById('robot-code').style.display = 'block';
      document.getElementById('generated-code').textContent = code;
    }
    
    // Try-catch game functions
    function initializeTryCatchGame() {
      const dragItems = document.querySelectorAll('#try-catch-simulator .drag-item');
      const dropZones = document.querySelectorAll('#try-catch-simulator .drop-zone');
      
      dragItems.forEach(item => {
        item.addEventListener('dragstart', function(e) {
          e.dataTransfer.setData('text/plain', this.getAttribute('data-type'));
          this.classList.add('dragging');
        });
        
        item.addEventListener('dragend', function() {
          this.classList.remove('dragging');
        });
      });
      
      dropZones.forEach(zone => {
        zone.addEventListener('dragover', function(e) {
          e.preventDefault();
          this.classList.add('drag-over');
        });
        
        zone.addEventListener('dragleave', function() {
          this.classList.remove('drag-over');
        });
        
        zone.addEventListener('drop', function(e) {
          e.preventDefault();
          this.classList.remove('drag-over');
          
          const dataType = e.dataTransfer.getData('text/plain');
          const acceptType = this.getAttribute('data-accept');
          
          if (dataType === acceptType) {
            this.classList.add('correct');
            this.textContent = document.querySelector(`.drag-item[data-type="${dataType}"]`).textContent;
            this.setAttribute('data-filled', 'true');
          }
        });
      });
    }
    
    // Initialize try-catch game when section is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // This will be called when the DOM is loaded
      // We'll initialize the try-catch game when the section is activated
    });
    
    // Check try-catch game answers
    function checkTryCatchGame() {
      const dropZones = document.querySelectorAll('#try-catch-simulator .drop-zone');
      let allCorrect = true;
      
      dropZones.forEach(zone => {
        if (zone.getAttribute('data-filled') !== 'true') {
          allCorrect = false;
        }
      });
      
      const feedback = document.getElementById('try-catch-feedback');
      if (allCorrect) {
        feedback.textContent = "Great job! All blocks are in the correct order!";
        feedback.style.color = 'green';
      } else {
        feedback.textContent = "Some blocks are missing or in the wrong order. Please try again.";
        feedback.style.color = 'red';
      }
    }
    
    // Reset try-catch game
    function resetTryCatchGame() {
      const dropZones = document.querySelectorAll('#try-catch-simulator .drop-zone');
      const feedback = document.getElementById('try-catch-feedback');
      
      dropZones.forEach(zone => {
        zone.classList.remove('correct');
        zone.textContent = zone.getAttribute('data-accept');
        zone.removeAttribute('data-filled');
      });
      
      feedback.textContent = '';
    }
    
    // Initialize try-catch game when section 3 is activated
    const originalSwitchSection = switchSection;
    switchSection = function(section) {
      originalSwitchSection(section);
      
      if (section === 3) {
        initializeTryCatchGame();
      }
    };
    
    // Swing builder functions
    let canvasComponents = [];
    
    function initializeSwingBuilder() {
      const componentItems = document.querySelectorAll('.component-item');
      const canvas = document.getElementById('design-canvas');
      
      componentItems.forEach(item => {
        item.addEventListener('dragstart', function(e) {
          e.dataTransfer.setData('text/plain', this.getAttribute('data-component'));
        });
      });
      
      canvas.addEventListener('dragover', function(e) {
        e.preventDefault();
      });
      
      canvas.addEventListener('drop', function(e) {
        e.preventDefault();
        const componentType = e.dataTransfer.getData('text/plain');
        
        // Create a visual representation of the component
        const component = document.createElement('div');
        component.className = 'canvas-component';
        component.textContent = componentType;
        component.style.position = 'absolute';
        component.style.left = (e.offsetX - 50) + 'px';
        component.style.top = (e.offsetY - 15) + 'px';
        component.style.padding = '5px 10px';
        component.style.backgroundColor = '#e0f0ff';
        component.style.border = '1px solid #4a90e2';
        component.style.borderRadius = '4px';
        component.style.cursor = 'move';
        
        // Add to canvas
        this.appendChild(component);
        
        // Add to components list
        canvasComponents.push({
          type: componentType,
          x: e.offsetX - 50,
          y: e.offsetY - 15
        });
        
        // Make it draggable within the canvas
        makeComponentDraggable(component);
      });
    }
    
    function makeComponentDraggable(component) {
      let isDragging = false;
      let startX, startY, initialX, initialY;
      
      component.addEventListener('mousedown', function(e) {
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        initialX = parseInt(component.style.left);
        initialY = parseInt(component.style.top);
        
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', stopDrag);
      });
      
      function drag(e) {
        if (!isDragging) return;
        
        e.preventDefault();
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
        
        component.style.left = (initialX + dx) + 'px';
        component.style.top = (initialY + dy) + 'px';
      }
      
      function stopDrag() {
        isDragging = false;
        document.removeEventListener('mousemove', drag);
        document.removeEventListener('mouseup', stopDrag);
      }
    }
    
    function generateSwingCode() {
      if (canvasComponents.length === 0) {
        alert('Please add some components to the canvas first!');
        return;
      }
      
      let code = `import javax.swing.*;
import java.awt.*;

public class GeneratedSwingApp {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Generated App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(null);  // Absolute positioning
        
`;
      
      canvasComponents.forEach(comp => {
        code += `        // Create ${comp.type}\n`;
        
        switch(comp.type) {
          case 'JButton':
            code += `        JButton button${canvasComponents.indexOf(comp)} = new JButton("Button ${canvasComponents.indexOf(comp)}");\n`;
            break;
          case 'JLabel':
            code += `        JLabel label${canvasComponents.indexOf(comp)} = new JLabel("Label ${canvasComponents.indexOf(comp)}");\n`;
            break;
          case 'JTextField':
            code += `        JTextField textField${canvasComponents.indexOf(comp)} = new JTextField(20);\n`;
            break;
          case 'JTextArea':
            code += `        JTextArea textArea${canvasComponents.indexOf(comp)} = new JTextArea(5, 20);\n`;
            break;
          case 'JCheckBox':
            code += `        JCheckBox checkBox${canvasComponents.indexOf(comp)} = new JCheckBox("Check ${canvasComponents.indexOf(comp)}");\n`;
            break;
          case 'JRadioButton':
            code += `        JRadioButton radioButton${canvasComponents.indexOf(comp)} = new JRadioButton("Radio ${canvasComponents.indexOf(comp)}");\n`;
            break;
        }
        
        code += `        ${comp.type.toLowerCase()}${canvasComponents.indexOf(comp)}.setBounds(${comp.x}, ${comp.y}, 100, 30);\n`;
        code += `        frame.add(${comp.type.toLowerCase()}${canvasComponents.indexOf(comp)});\n\n`;
      });
      
      code += `        frame.setVisible(true);
    }
}`;
      
      document.getElementById('generated-swing-code').textContent = code;
    }
    
    function clearCanvas() {
      const canvas = document.getElementById('design-canvas');
      canvas.innerHTML = '<p style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #999;">Drag components here</p>';
      canvasComponents = [];
      document.getElementById('generated-swing-code').textContent = '// Generated code will appear here';
    }
    
    // Initialize swing builder when section 4 is activated
    switchSection = function(section) {
      originalSwitchSection(section);
      
      if (section === 4) {
        initializeSwingBuilder();
      }
    };
    
    // SQL quiz functions
    let sqlAnswers = {};
    
    function selectSqlOption(option, answer) {
      const parent = option.parentElement;
      const questionId = parent.getAttribute('data-question-id') || 
                         parent.parentElement.querySelector('.quiz-question').textContent;
      
      // Clear previous selections
      parent.querySelectorAll('.quiz-option').forEach(opt => {
        opt.classList.remove('selected');
      });
      
      // Select current option
      option.classList.add('selected');
      
      // Store answer
      sqlAnswers[questionId] = answer;
    }
    
    function checkSqlAnswers() {
      const correctAnswers = {
        "Complete the SELECT statement to get all columns from the 'users' table:": "*",
        "Complete the INSERT statement to add a new user with name 'John' and email 'john@example.com':": "VALUES",
        "Complete the UPDATE statement to change the email of user with id=1 to 'new@example.com':": "WHERE",
        "Complete the DELETE statement to remove users with age less than 18:": "WHERE"
      };
      
      let allCorrect = true;
      
      for (const question in correctAnswers) {
        const feedback = document.querySelector(`#sql-feedback-${Object.keys(correctAnswers).indexOf(question) + 1}`);
        
        if (sqlAnswers[question] === correctAnswers[question]) {
          feedback.textContent = "Correct!";
          feedback.className = "quiz-feedback correct";
        } else {
          feedback.textContent = "Incorrect. The correct answer is: " + correctAnswers[question];
          feedback.className = "quiz-feedback incorrect";
          allCorrect = false;
        }
      }
      
      if (allCorrect) {
        showMascotMessage("Perfect! You've mastered SQL queries!");
      }
    }
    
    function resetSqlQuiz() {
      const options = document.querySelectorAll('#sql-simulator .quiz-option');
      const feedbacks = document.querySelectorAll('#sql-simulator .quiz-feedback');
      
      options.forEach(option => {
        option.classList.remove('selected');
      });
      
      feedbacks.forEach(feedback => {
        feedback.textContent = '';
        feedback.className = 'quiz-feedback';
      });
      
      sqlAnswers = {};
    }
    
    // Flashcard functions
    function flipCard(card) {
      card.classList.toggle('flipped');
    }
    
    function resetFlashcards() {
      const flashcards = document.querySelectorAll('.flashcard');
      flashcards.forEach(card => {
        card.classList.remove('flipped');
      });
    }
    
    // Quiz functions
    let quizAnswers = {};
    
    function selectQuizOption(option, isCorrect) {
      const parent = option.parentElement;
      const questionId = parent.getAttribute('data-question-id') || 
                         parent.parentElement.querySelector('.quiz-question').textContent;
      
      // Clear previous selections
      parent.querySelectorAll('.quiz-option').forEach(opt => {
        opt.classList.remove('selected');
      });
      
      // Select current option
      option.classList.add('selected');
      
      // Store answer
      quizAnswers[questionId] = isCorrect;
    }
    
    function checkQuizAnswers() {
      let correctCount = 0;
      let totalCount = 0;
      
      for (const question in quizAnswers) {
        totalCount++;
        const feedback = document.querySelector(`#quiz-feedback-${Object.keys(quizAnswers).indexOf(question) + 1}`);
        
        if (quizAnswers[question]) {
          feedback.textContent = "Correct!";
          feedback.className = "quiz-feedback correct";
          correctCount++;
        } else {
          feedback.textContent = "Incorrect.";
          feedback.className = "quiz-feedback incorrect";
        }
      }
      
      const scoreElement = document.getElementById('quiz-score');
      scoreElement.textContent = `Your score: ${correctCount} out of ${totalCount} (${Math.round((correctCount / totalCount) * 100)}%)`;
      scoreElement.style.display = 'block';
      
      if (correctCount === totalCount) {
        showMascotMessage("Perfect score! You're ready for the exam!");
      } else if (correctCount >= totalCount * 0.8) {
        showMascotMessage("Great job! Just a little more practice!");
      } else {
        showMascotMessage("Keep studying! You'll get there!");
      }
    }
    
    function resetQuiz() {
      const options = document.querySelectorAll('#quiz-container .quiz-option');
      const feedbacks = document.querySelectorAll('#quiz-container .quiz-feedback');
      
      options.forEach(option => {
        option.classList.remove('selected');
      });
      
      feedbacks.forEach(feedback => {
        feedback.textContent = '';
        feedback.className = 'quiz-feedback';
      });
      
      document.getElementById('quiz-score').style.display = 'none';
      
      quizAnswers = {};
    }
    
    // Progress tracker functions
    function updateProgressTracker() {
      for (let i = 1; i <= 6; i++) {
        const total = totalCards[i] || 0;
        const completed = completedCards[i] || 0;
        const percent = total > 0 ? Math.round((completed / total) * 100) : 0;
        
        document.getElementById(`section${i}-progress`).style.width = percent + '%';
        document.getElementById(`section${i}-percent`).textContent = percent + '%';
      }
    }
    
    function resetProgress() {
      if (confirm('Are you sure you want to reset all progress? This cannot be undone.')) {
        // Clear completed cards
        completedCards = {};
        
        // Clear visual indicators
        document.querySelectorAll('.card').forEach(card => {
          card.classList.remove('completed');
        });
        
        // Update progress
        updateProgress();
        updateProgressTracker();
        
        // Save progress
        saveProgress();
        
        showMascotMessage("Progress reset. Start fresh!");
      }
    }
    
    // Summary PDF functions
    function downloadSummary() {
      showMascotMessage("Downloading summary PDF...");
      
      // Simulate download delay
      setTimeout(() => {
        showMascotMessage("Summary PDF downloaded successfully!");
      }, 2000);
    }
    
    // Certificate functions
    function checkCertificateEligibility() {
      let allCompleted = true;
      
      for (let i = 1; i <= 6; i++) {
        const total = totalCards[i] || 0;
        const completed = completedCards[i] || 0;
        
        if (completed < total) {
          allCompleted = false;
          break;
        }
      }
      
      if (allCompleted) {
        document.getElementById('show-cert-btn').style.display = 'inline-block';
        showMascotMessage("Congratulations! You've earned your certificate!");
      } else {
        showMascotMessage("Complete all sections to unlock your certificate!");
      }
    }
    
    function showCertificate() {
      document.getElementById('certificate').classList.add('active');
    }
    
    function hideCertificate() {
      document.getElementById('certificate').classList.remove('active');
    }
    
    function printCertificate() {
      window.print();
    }
    
    // Add CSS for flashcards
    const style = document.createElement('style');
    style.textContent = `
      .flashcard {
        width: 300px;
        height: 200px;
        margin: 1rem auto;
        perspective: 1000px;
        cursor: pointer;
      }
      
      .flashcard-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
      }
      
      .flashcard.flipped .flashcard-inner {
        transform: rotateY(180deg);
      }
      
      .flashcard-front, .flashcard-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 1rem;
      }
      
      .flashcard-front {
        background-color: var(--primary);
        color: white;
      }
      
      .flashcard-back {
        background-color: var(--secondary);
        color: white;
        transform: rotateY(180deg);
      }
      
      .component-item {
        padding: 10px;
        margin: 5px;
        background-color: var(--primary);
        color: white;
        border-radius: 4px;
        cursor: grab;
        text-align: center;
      }
      
      .component-item:active {
        cursor: grabbing;
      }
      
      .canvas-component {
        user-select: none;
      }
      
      .progress-section {
        margin-bottom: 1rem;
      }
      
      .progress-bar-container {
        height: 10px;
        background-color: #ddd;
        border-radius: 5px;
        overflow: hidden;
        display: inline-block;
        width: 70%;
        vertical-align: middle;
      }
      
      .progress-label {
        display: inline-block;
        width: 25%;
      }
      
      .progress-percent {
        display: inline-block;
        width: 5%;
        text-align: right;
      }
    `;
    document.head.appendChild(style);
    
    // Add CSS for drag and drop
    const dragStyle = document.createElement('style');
    dragStyle.textContent = `
      .dragging {
        opacity: 0.5;
      }
      
      .drag-over {
        background-color: #e0f0ff;
      }
    `;
    document.head.appendChild(dragStyle);
  </script>
</body>
</html>