<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Justin's Playground - Interactive Project Showcase</title>
    
    <!-- Three.js CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    
    <!-- GSAP for advanced animations -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        /* CSS Variables for Theme */
        :root {
            --primary-color: #0a0a0f;
            --secondary-color: #1a1a2e;
            --accent-color: #16213e;
            --highlight-color: #e94560;
            --neon-blue: #00d4ff;
            --neon-purple: #9d4edd;
            --text-color: #ffffff;
            --text-secondary: #8892b0;
            --card-bg: rgba(22, 33, 62, 0.6);
            --transition-speed: 0.3s;
        }
        
        /* Dark Mode Variables */
        [data-theme="light"] {
            --primary-color: #f8f9fa;
            --secondary-color: #e9ecef;
            --accent-color: #dee2e6;
            --highlight-color: #e94560;
            --neon-blue: #0066cc;
            --neon-purple: #6f42c1;
            --text-color: #212529;
            --text-secondary: #6c757d;
            --card-bg: rgba(255, 255, 255, 0.9);
        }
        
        /* Global Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        html {
            scroll-behavior: smooth;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background-color: var(--primary-color);
            color: var(--text-color);
            overflow-x: hidden;
            cursor: none;
        }
        
        /* Custom Cursor */
        .cursor {
            width: 20px;
            height: 20px;
            border: 2px solid var(--highlight-color);
            border-radius: 50%;
            position: fixed;
            pointer-events: none;
            z-index: 9999;
            transition: all 0.1s ease;
            mix-blend-mode: difference;
        }
        
        .cursor-follower {
            width: 40px;
            height: 40px;
            background: rgba(233, 69, 96, 0.1);
            border-radius: 50%;
            position: fixed;
            pointer-events: none;
            z-index: 9998;
            transition: all 0.3s ease;
        }
        
        .cursor.hover {
            transform: scale(2);
            background: rgba(233, 69, 96, 0.5);
        }
        
        /* Loading Screen */
        #loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary-color);
            z-index: 10000;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            transition: opacity 0.5s ease;
        }
        
        .loader-content {
            text-align: center;
        }
        
        .loader-logo {
            font-size: 4rem;
            font-weight: 900;
            background: linear-gradient(45deg, var(--highlight-color), var(--neon-blue), var(--neon-purple));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin-bottom: 2rem;
            animation: glitch 2s infinite;
        }
        
        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 var(--highlight-color), -2px -2px 0 var(--neon-blue); }
            25% { text-shadow: -2px 2px 0 var(--neon-purple), 2px -2px 0 var(--highlight-color); }
            50% { text-shadow: 2px -2px 0 var(--neon-blue), -2px 2px 0 var(--neon-purple); }
            75% { text-shadow: -2px -2px 0 var(--highlight-color), 2px 2px 0 var(--neon-blue); }
        }
        
        .loader-bar {
            width: 300px;
            height: 4px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
            overflow: hidden;
            position: relative;
        }
        
        .loader-progress {
            height: 100%;
            background: linear-gradient(90deg, var(--highlight-color), var(--neon-blue), var(--neon-purple));
            width: 0%;
            animation: loadProgress 3s forwards;
        }
        
        @keyframes loadProgress {
            to { width: 100%; }
        }
        
        .loader-text {
            margin-top: 1rem;
            color: var(--text-secondary);
            font-size: 0.9rem;
            letter-spacing: 2px;
        }
        
        /* Three.js Canvas */
        #three-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
        
        /* Navigation Dots */
        .nav-dots {
            position: fixed;
            right: 30px;
            top: 50%;
            transform: translateY(-50%);
            z-index: 100;
        }
        
        .nav-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            margin: 15px 0;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .nav-dot.active {
            background: var(--highlight-color);
            transform: scale(1.5);
        }
        
        .nav-dot:hover {
            background: var(--neon-blue);
            transform: scale(1.3);
        }
        
        .nav-dot::after {
            content: attr(data-title);
            position: absolute;
            right: 25px;
            top: 50%;
            transform: translateY(-50%);
            background: var(--card-bg);
            padding: 5px 10px;
            border-radius: 5px;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            font-size: 0.8rem;
        }
        
        .nav-dot:hover::after {
            opacity: 1;
        }
        
        /* Full Screen Sections */
        .section {
            min-height: 100vh;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            padding: 80px 20px;
        }
        
        /* Hero Section */
        .hero {
            background: radial-gradient(ellipse at center, rgba(233, 69, 96, 0.1) 0%, transparent 70%);
        }
        
        .hero-content {
            text-align: center;
            z-index: 2;
            max-width: 1200px;
        }
        
        .hero-title {
            font-size: clamp(3rem, 8vw, 6rem);
            font-weight: 900;
            line-height: 1.1;
            margin-bottom: 1rem;
        }
        
        .hero-title span {
            display: inline-block;
            background: linear-gradient(45deg, var(--highlight-color), var(--neon-blue), var(--neon-purple));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
        
        .hero-subtitle {
            font-size: clamp(1.2rem, 3vw, 1.8rem);
            color: var(--text-secondary);
            margin-bottom: 3rem;
        }
        
        .hero-stats {
            display: flex;
            justify-content: center;
            gap: 4rem;
            margin-top: 3rem;
            flex-wrap: wrap;
        }
        
        .stat-item {
            text-align: center;
            min-width: 120px;
        }
        
        .stat-number {
            font-size: 3rem;
            font-weight: 900;
            background: linear-gradient(45deg, var(--highlight-color), var(--neon-blue));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            display: block;
        }
        
        .stat-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin-top: 0.5rem;
        }
        
        .scroll-indicator {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            animation: bounce 2s infinite;
            cursor: pointer;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateX(-50%) translateY(0); }
            40% { transform: translateX(-50%) translateY(-10px); }
            60% { transform: translateX(-50%) translateY(-5px); }
        }
        
        .scroll-indicator i {
            font-size: 2rem;
            color: var(--highlight-color);
        }
        
        /* Projects Section */
        .projects {
            background: linear-gradient(135deg, rgba(22, 33, 62, 0.3) 0%, transparent 100%);
        }
        
        .projects-container {
            width: 100%;
            max-width: 1400px;
        }
        
        .section-header {
            text-align: center;
            margin-bottom: 4rem;
        }
        
        .section-title {
            font-size: clamp(2.5rem, 5vw, 4rem);
            font-weight: 900;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, var(--highlight-color), var(--neon-blue));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
        
        .section-subtitle {
            color: var(--text-secondary);
            font-size: 1.2rem;
        }
        
        /* Filter Pills */
        .filter-container {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 3rem;
            flex-wrap: wrap;
        }
        
        .filter-pill {
            padding: 0.8rem 1.5rem;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 30px;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            position: relative;
            overflow: hidden;
        }
        
        .filter-pill::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: linear-gradient(135deg, var(--highlight-color), var(--neon-blue));
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.5s ease;
        }
        
        .filter-pill:hover::before,
        .filter-pill.active::before {
            width: 100%;
            height: 100%;
            border-radius: 30px;
        }
        
        .filter-pill span {
            position: relative;
            z-index: 1;
        }
        
        .filter-pill.active {
            color: white;
            border-color: var(--highlight-color);
        }
        
        /* Project Carousel */
        .project-carousel {
            position: relative;
            height: 600px;
            perspective: 1200px;
            margin: 0 auto;
        }
        
        .carousel-track {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .project-slide {
            position: absolute;
            width: 400px;
            height: 500px;
            background: var(--card-bg);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            transform-style: preserve-3d;
            display: flex;
            flex-direction: column;
        }
        
        .project-slide.active {
            transform: translateZ(0) scale(1);
            opacity: 1;
            z-index: 10;
        }
        
        .project-slide.prev {
            transform: translateX(-120%) translateZ(-200px) rotateY(25deg);
            opacity: 0.7;
            z-index: 5;
        }
        
        .project-slide.next {
            transform: translateX(120%) translateZ(-200px) rotateY(-25deg);
            opacity: 0.7;
            z-index: 5;
        }
        
        .project-slide.hidden {
            transform: translateZ(-400px) scale(0.8);
            opacity: 0;
            pointer-events: none;
        }
        
        .project-slide:hover {
            border-color: var(--highlight-color);
            box-shadow: 0 20px 40px rgba(233, 69, 96, 0.3);
        }
        
        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.5rem;
        }
        
        .project-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--highlight-color);
            line-height: 1.2;
        }
        
        .project-status {
            padding: 0.3rem 0.8rem;
            background: rgba(46, 213, 115, 0.2);
            color: #2ed573;
            border-radius: 20px;
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            white-space: nowrap;
        }
        
        .project-description {
            color: var(--text-secondary);
            line-height: 1.6;
            margin-bottom: 1.5rem;
            flex-grow: 1;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 4;
            -webkit-box-orient: vertical;
        }
        
        .project-tech {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }
        
        .tech-tag {
            padding: 0.4rem 0.8rem;
            background: linear-gradient(135deg, rgba(233, 69, 96, 0.2), rgba(0, 212, 255, 0.2));
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 25px;
            font-size: 0.85rem;
            color: var(--text-color);
            transition: all 0.3s ease;
        }
        
        .tech-tag:hover {
            background: linear-gradient(135deg, rgba(233, 69, 96, 0.4), rgba(0, 212, 255, 0.4));
            transform: translateY(-2px);
        }
        
        .project-links {
            display: flex;
            gap: 1rem;
            margin-top: auto;
        }
        
        .project-link {
            flex: 1;
            padding: 0.8rem;
            background: linear-gradient(135deg, var(--highlight-color), var(--neon-blue));
            color: white;
            text-align: center;
            border-radius: 10px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .project-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.2);
            transition: left 0.3s ease;
        }
        
        .project-link:hover::before {
            left: 100%;
        }
        
        .project-link:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(233, 69, 96, 0.4);
        }
        
        /* Carousel Controls */
        .carousel-controls {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 100%;
            display: flex;
            justify-content: space-between;
            padding: 0 2rem;
            pointer-events: none;
        }
        
        .carousel-btn {
            width: 60px;
            height: 60px;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            pointer-events: all;
            color: var(--text-color);
            font-size: 1.5rem;
        }
        
        .carousel-btn:hover {
            background: var(--highlight-color);
            transform: scale(1.1);
        }
        
        .carousel-btn:active {
            transform: scale(0.95);
        }
        
        .carousel-indicators {
            position: absolute;
            bottom: -50px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1rem;
        }
        
        .indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .indicator.active {
            background: var(--highlight-color);
            transform: scale(1.5);
        }
        
        .indicator:hover {
            background: var(--neon-blue);
            transform: scale(1.3);
        }
        
        /* About Section */
        .about {
            background: radial-gradient(ellipse at top, rgba(0, 212, 255, 0.1) 0%, transparent 70%);
        }
        
        .about-content {
            max-width: 800px;
            text-align: center;
        }
        
        .about-text {
            font-size: 1.2rem;
            line-height: 1.8;
            color: var(--text-secondary);
            margin-bottom: 2rem;
        }
        
        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }
        
        .skill-item {
            text-align: center;
            padding: 2rem;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            transition: all 0.3s ease;
        }
        
        .skill-item:hover {
            transform: translateY(-10px);
            border-color: var(--highlight-color);
            box-shadow: 0 20px 40px rgba(233, 69, 96, 0.2);
        }
        
        .skill-icon {
            font-size: 3rem;
            color: var(--highlight-color);
            margin-bottom: 1rem;
        }
        
        .skill-name {
            font-weight: 600;
            color: var(--text-color);
        }
        
        /* Contact Section */
        .contact {
            background: linear-gradient(135deg, rgba(157, 78, 221, 0.1) 0%, transparent 100%);
        }
        
        .contact-content {
            text-align: center;
            max-width: 800px;
        }
        
        .social-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }
        
        .social-card {
            padding: 2rem;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            text-decoration: none;
            color: var(--text-color);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }
        
        .social-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(233, 69, 96, 0.1), transparent);
            transform: rotate(45deg);
            transition: all 0.5s ease;
        }
        
        .social-card:hover::before {
            animation: shimmer 0.5s ease;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }
        
        .social-card:hover {
            transform: translateY(-10px);
            border-color: var(--highlight-color);
            box-shadow: 0 20px 40px rgba(233, 69, 96, 0.3);
        }
        
        .social-icon {
            font-size: 3rem;
            color: var(--highlight-color);
        }
        
        .social-label {
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        /* Floating Controls */
        .floating-controls {
            position: fixed;
            left: 30px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 1rem;
            z-index: 100;
        }
        
        .control-btn {
            width: 50px;
            height: 50px;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--text-color);
            font-size: 1.2rem;
        }
        
        .control-btn:hover {
            background: var(--highlight-color);
            transform: scale(1.1);
        }
        
        .control-btn:active {
            transform: scale(0.95);
        }
        
        .control-btn.active {
            background: var(--highlight-color);
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .nav-dots {
                right: 15px;
            }
            
            .floating-controls {
                left: 15px;
            }
            
            .project-slide {
                width: 90%;
                max-width: 350px;
                height: auto;
                min-height: 500px;
            }
            
            .carousel-controls {
                padding: 0 1rem;
            }
            
            .carousel-btn {
                width: 50px;
                height: 50px;
            }
            
            .hero-stats {
                gap: 2rem;
            }
            
            .skills-grid,
            .social-grid {
                grid-template-columns: 1fr;
            }
            
            .filter-container {
                padding: 0 1rem;
            }
        }
        
        /* Scrollbar Styling */
        ::-webkit-scrollbar {
            width: 10px;
        }
        
        ::-webkit-scrollbar-track {
            background: var(--primary-color);
        }
        
        ::-webkit-scrollbar-thumb {
            background: var(--highlight-color);
            border-radius: 5px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: var(--neon-blue);
        }
    </style>
</head>
<body>
    <!-- Custom Cursor -->
    <div class="cursor"></div>
    <div class="cursor-follower"></div>
    
    <!-- Loading Screen -->
    <div id="loader">
        <div class="loader-content">
            <div class="loader-logo">JUSTIN'S PLAYGROUND</div>
            <div class="loader-bar">
                <div class="loader-progress"></div>
            </div>
            <div class="loader-text">INITIALIZING EXPERIENCE</div>
        </div>
    </div>
    
    <!-- Three.js Canvas -->
    <div id="three-canvas"></div>
    
    <!-- Navigation Dots -->
    <div class="nav-dots">
        <div class="nav-dot active" data-section="hero" data-title="Home"></div>
        <div class="nav-dot" data-section="projects" data-title="Projects"></div>
        <div class="nav-dot" data-section="about" data-title="About"></div>
        <div class="nav-dot" data-section="contact" data-title="Contact"></div>
    </div>
    
    <!-- Floating Controls -->
    <div class="floating-controls">
        <button class="control-btn" id="theme-toggle" aria-label="Toggle Theme">
            <i class="fas fa-moon"></i>
        </button>
        <button class="control-btn active" id="particle-toggle" aria-label="Toggle Particles">
            <i class="fas fa-sparkles"></i>
        </button>
        <button class="control-btn" id="sound-toggle" aria-label="Toggle Sound">
            <i class="fas fa-volume-mute"></i>
        </button>
        <button class="control-btn" id="fullscreen-toggle" aria-label="Toggle Fullscreen">
            <i class="fas fa-expand"></i>
        </button>
    </div>
    
    <!-- Hero Section -->
    <section class="section hero" id="hero">
        <div class="hero-content">
            <h1 class="hero-title">
                <span>Welcome to</span><br>
                <span>Justin's</span><br>
                <span>Playground</span>
            </h1>
            <p class="hero-subtitle">Where Innovation Meets Imagination</p>
            <div class="hero-stats">
                <div class="stat-item">
                    <span class="stat-number" data-target="15">0</span>
                    <span class="stat-label">Projects</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" data-target="50">0</span>
                    <span class="stat-label">Technologies</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" data-target="500">0</span>
                    <span class="stat-label">Hours</span>
                </div>
            </div>
        </div>
        <div class="scroll-indicator" onclick="scrollToSection('projects')">
            <i class="fas fa-chevron-down"></i>
        </div>
    </section>
    
    <!-- Projects Section -->
    <section class="section projects" id="projects">
        <div class="projects-container">
            <div class="section-header">
                <h2 class="section-title">Featured Projects</h2>
                <p class="section-subtitle">Explore my latest creations and experiments</p>
            </div>
            
            <div class="filter-container">
                <div class="filter-pill active" data-filter="all"><span>All Projects</span></div>
                <div class="filter-pill" data-filter="web-apps"><span>Web Apps</span></div>
                <div class="filter-pill" data-filter="tools"><span>Tools</span></div>
                <div class="filter-pill" data-filter="experiments"><span>Experiments</span></div>
                <div class="filter-pill" data-filter="games"><span>Games</span></div>
            </div>
            
            <div class="project-carousel">
                <div class="carousel-track" id="carousel-track">
                    <!-- Project slides will be dynamically inserted here -->
                </div>
                <div class="carousel-controls">
                    <button class="carousel-btn" id="prev-btn">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="carousel-btn" id="next-btn">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                <div class="carousel-indicators" id="carousel-indicators">
                    <!-- Indicators will be dynamically inserted here -->
                </div>
            </div>
        </div>
    </section>
    
    <!-- About Section -->
    <section class="section about" id="about">
        <div class="about-content">
            <div class="section-header">
                <h2 class="section-title">About This Playground</h2>
                <p class="section-subtitle">Passion-driven development and continuous learning</p>
            </div>
            <p class="about-text">
                This is my experimental space where I build and showcase various web projects, tools, and interactive experiences. 
                Each project represents a unique challenge and learning opportunity, pushing the boundaries of what's possible on the web.
            </p>
            <p class="about-text">
                From cybersecurity tools to creative visualizations, every project here is crafted with attention to detail, 
                performance optimization, and user experience in mind.
            </p>
            
            <div class="skills-grid">
                <div class="skill-item">
                    <div class="skill-icon"><i class="fas fa-code"></i></div>
                    <div class="skill-name">Frontend</div>
                </div>
                <div class="skill-item">
                    <div class="skill-icon"><i class="fas fa-server"></i></div>
                    <div class="skill-name">Backend</div>
                </div>
                <div class="skill-item">
                    <div class="skill-icon"><i class="fas fa-shield-alt"></i></div>
                    <div class="skill-name">Security</div>
                </div>
                <div class="skill-item">
                    <div class="skill-icon"><i class="fas fa-cube"></i></div>
                    <div class="skill-name">3D Graphics</div>
                </div>
                <div class="skill-item">
                    <div class="skill-icon"><i class="fas fa-brain"></i></div>
                    <div class="skill-name">AI/ML</div>
                </div>
                <div class="skill-item">
                    <div class="skill-icon"><i class="fas fa-mobile-alt"></i></div>
                    <div class="skill-name">Mobile</div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Contact Section -->
    <section class="section contact" id="contact">
        <div class="contact-content">
            <div class="section-header">
                <h2 class="section-title">Let's Connect</h2>
                <p class="section-subtitle">Feel free to reach out and collaborate</p>
            </div>
            
            <div class="social-grid">
                <a href="https://github.com/username" class="social-card" target="_blank">
                    <div class="social-icon"><i class="fab fa-github"></i></div>
                    <div class="social-label">GitHub</div>
                </a>
                <a href="https://linkedin.com/in/username" class="social-card" target="_blank">
                    <div class="social-icon"><i class="fab fa-linkedin"></i></div>
                    <div class="social-label">LinkedIn</div>
                </a>
                <a href="mailto:contact@example.com" class="social-card">
                    <div class="social-icon"><i class="fas fa-envelope"></i></div>
                    <div class="social-label">Email</div>
                </a>
                <a href="https://twitter.com/username" class="social-card" target="_blank">
                    <div class="social-icon"><i class="fab fa-twitter"></i></div>
                    <div class="social-label">Twitter</div>
                </a>
            </div>
        </div>
    </section>
    
    <script>
        // Project Data
        const projects = [
    {
        name: "J-CODE Java Learning Platform",
        description: "Mobile-first Java learning companion with structured 10-day course covering basics to advanced topics including OOP, inheritance, and JavaFX programming.",
        path: "/project/code.htm",
        demo: "/project/code.htm",
        github: "https://github.com/username/j-code",
        technologies: ["HTML", "CSS", "JavaScript", "Java"],
        category: "education",
        status: "Active",
        featured: true
    },
    {
        name: "CodeStart Programming Logic",
        description: "Interactive platform teaching basic programming logic, conditional statements, and control flow with visual flowcharts and hands-on exercises.",
        path: "/project/core.htm",
        demo: "/project/core.htm",
        github: "https://github.com/username/codestart",
        technologies: ["HTML", "CSS", "JavaScript", "Java"],
        category: "education",
        status: "Active",
        featured: false
    },
    {
        name: "ECHO Prompt Engineering Platform",
        description: "Comprehensive workshop platform for mastering prompt engineering and AI agents, featuring live labs and hands-on AI workflow design.",
        path: "/project/echo.htm",
        demo: "/project/echo.htm",
        github: "https://github.com/username/echo-platform",
        technologies: ["HTML", "CSS", "JavaScript", "AI/ML"],
        category: "ai-platforms",
        status: "Active",
        featured: true
    },
    {
        name: "Kerala Gold & Silver Rates",
        description: "Real-time gold and silver price tracking application for Kerala merchants with live updates, charts, news, and admin dashboard.",
        path: "/project/g.htm",
        demo: "/project/g.htm",
        github: "https://github.com/username/gold-rates",
        technologies: ["HTML", "CSS", "JavaScript", "API Integration"],
        category: "web-apps",
        status: "Active",
        featured: false
    },
    {
        name: "ABABA Gold Trading Platform",
        description: "Comprehensive gold trading platform with user authentication, product management, ad marketplace, chat functionality, and merchant services.",
        path: "/project/gold.htm",
        demo: "/project/gold.htm",
        github: "https://github.com/username/ababa-trading",
        technologies: ["HTML", "CSS", "JavaScript", "Database"],
        category: "web-apps",
        status: "Demo",
        featured: false
    },
    {
        name: "IEDC IESCE Innovation Cell",
        description: "Official website for Innovation and Entrepreneurship Development Cell at IES College of Engineering featuring events, workshops, and startup resources.",
        path: "/project/iedce.htm",
        demo: "/project/iedce.htm",
        github: "https://github.com/username/iedc-iesce",
        technologies: ["HTML", "CSS", "JavaScript"],
        category: "web-apps",
        status: "Active",
        featured: false
    },
    {
        name: "J-Random Password Generator",
        description: "Secure password generation tool with glass-morphism UI, local database storage, password strength analysis, and cross-platform compatibility.",
        path: "/project/j.htm",
        demo: "/project/j.htm",
        github: "https://github.com/username/j-random",
        technologies: ["HTML", "CSS", "JavaScript", "Security"],
        category: "tools",
        status: "Active",
        featured: false
    },
    {
        name: "OOPJ Buddy Java Learning",
        description: "Beginner-friendly Java learning platform teaching fundamental concepts, data types, and object-oriented programming with interactive examples.",
        path: "/project/oop.htm",
        demo: "/project/oop.htm",
        github: "https://github.com/username/oopj-buddy",
        technologies: ["HTML", "CSS", "JavaScript", "Java"],
        category: "education",
        status: "Active",
        featured: false
    },
    {
        name: "Chronon-SQL Physics Research",
        description: "Theoretical physics research platform presenting the Chronon-Super Quantum Level Model exploring discrete spacetime and quantum gravity.",
        path: "/project/sql2.html",
        demo: "/project/sql2.html",
        github: "https://github.com/username/chronon-sql",
        technologies: ["HTML", "CSS", "JavaScript", "Physics"],
        category: "research",
        status: "Active",
        featured: true
    },
    {
        name: "Python Lab Handbook",
        description: "Comprehensive Python programming guide for Data Science students with simplified explanations, examples, and memory tricks.",
        path: "/project/psm.htm",
        demo: "/project/psm.htm",
        github: "https://github.com/username/python-handbook",
        technologies: ["HTML", "CSS", "JavaScript", "Python"],
        category: "education",
        status: "Active",
        featured: false
    },
    {
        name: "Quantum Computing Research",
        description: "Academic documentation covering quantum information fundamentals, qubits, superposition, and quantum computing concepts.",
        path: "/project/q-safe-db.htm",
        demo: "/project/q-safe-db.htm",
        github: "https://github.com/username/quantum-research",
        technologies: ["HTML", "CSS", "JavaScript", "Quantum Computing"],
        category: "research",
        status: "Active",
        featured: false
    },
    {
        name: "ZENORIX 2025 Tech Festival",
        description: "Official website for technical festival featuring competitions, workshops, and AI innovation summit at IES College of Engineering.",
        path: "/project/techfest.htm",
        demo: "/project/techfest.htm",
        github: "https://github.com/username/zenorix-2025",
        technologies: ["HTML", "CSS", "JavaScript"],
        category: "web-apps",
        status: "Active",
        featured: false
    },
    {
        name: "GitHub Onboarding Tutorial",
        description: "Step-by-step guide for OOPJ students to create GitHub accounts, repositories, and upload code with detailed screenshots and instructions.",
        path: "/project/coxe.htm",
        demo: "/project/coxe.htm",
        github: "https://github.com/username/github-tutorial",
        technologies: ["HTML", "CSS", "JavaScript"],
        category: "education",
        status: "Active",
        featured: false
    },
    {
        name: "Glassy File Explorer",
        description: "Modern file management interface with GitHub integration for storing and accessing documents and files.",
        path: "/project/ds-core.htm",
        demo: "/project/ds-core.htm",
        github: "https://github.com/username/glassy-explorer",
        technologies: ["HTML", "CSS", "JavaScript", "GitHub API"],
        category: "tools",
        status: "Active",
        featured: false
    },
    {
        name: "C Programming Infix Converter",
        description: "C program implementation for converting infix mathematical expressions to postfix notation using stack operations.",
        path: "/project/C.html",
        demo: "/project/C.html",
        github: "https://github.com/username/infix-converter",
        technologies: ["C", "Algorithms", "Data Structures"],
        category: "programming",
        status: "Complete",
        featured: false
    }
];
        // Global Variables
        let currentSlide = 0;
        let filteredProjects = [...projects];
        let isAnimating = false;
        let particlesEnabled = true;
        let soundEnabled = false;
        
        // Three.js Variables
        let scene, camera, renderer, particleSystem, geometricShapes;
        let mouseX = 0, mouseY = 0;
        
        // Initialize Everything
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize GSAP
            gsap.registerPlugin(ScrollTrigger);
            
            // Initialize Three.js
            initThreeJS();
            
            // Initialize Custom Cursor
            initCustomCursor();
            
            // Initialize Carousel
            initCarousel();
            
            // Initialize Navigation
            initNavigation();
            
            // Initialize Controls
            initControls();
            
            // Initialize Loading
            initLoading();
            
            // Initialize Scroll Animations
            initScrollAnimations();
            
            // Start Animation Loop
            animate();
        });
        
        // Custom Cursor
        function initCustomCursor() {
            const cursor = document.querySelector('.cursor');
            const follower = document.querySelector('.cursor-follower');
            
            document.addEventListener('mousemove', (e) => {
                cursor.style.left = e.clientX + 'px';
                cursor.style.top = e.clientY + 'px';
                
                setTimeout(() => {
                    follower.style.left = e.clientX - 10 + 'px';
                    follower.style.top = e.clientY - 10 + 'px';
                }, 100);
            });
            
            // Add hover effect
            const hoverElements = document.querySelectorAll('a, button, .project-slide, .filter-pill, .nav-dot, .indicator, .scroll-indicator');
            hoverElements.forEach(elem => {
                elem.addEventListener('mouseenter', () => cursor.classList.add('hover'));
                elem.addEventListener('mouseleave', () => cursor.classList.remove('hover'));
            });
        }
        
        // Three.js Initialization
        function initThreeJS() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.z = 500;
            
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            document.getElementById('three-canvas').appendChild(renderer.domElement);
            
            // Create particle system
            createParticleSystem();
            
            // Add lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            const pointLight1 = new THREE.PointLight(0xe94560, 1);
            pointLight1.position.set(200, 200, 200);
            scene.add(pointLight1);
            
            const pointLight2 = new THREE.PointLight(0x00d4ff, 1);
            pointLight2.position.set(-200, -200, 200);
            scene.add(pointLight2);
            
            // Event listeners
            window.addEventListener('resize', onWindowResize);
            document.addEventListener('mousemove', onDocumentMouseMove);
        }
        
        function createParticleSystem() {
            const geometry = new THREE.BufferGeometry();
            const vertices = [];
            const colors = [];
            
            const particleCount = 800;
            
            for (let i = 0; i < particleCount; i++) {
                const x = (Math.random() - 0.5) * 2000;
                const y = (Math.random() - 0.5) * 2000;
                const z = (Math.random() - 0.5) * 2000;
                
                vertices.push(x, y, z);
                
                const colorChoice = Math.random();
                let r, g, b;
                
                if (colorChoice < 0.33) {
                    r = 0.91; g = 0.27; b = 0.38;
                } else if (colorChoice < 0.66) {
                    r = 0; g = 0.83; b = 1;
                } else {
                    r = 0.62; g = 0.49; b = 0.86;
                }
                
                colors.push(r, g, b);
            }
            
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
            
            const material = new THREE.PointsMaterial({
                size: 3,
                vertexColors: true,
                transparent: true,
                opacity: 0.8,
                blending: THREE.AdditiveBlending
            });
            
            particleSystem = new THREE.Points(geometry, material);
            scene.add(particleSystem);
            
            // Add geometric shapes
            addGeometricShapes();
        }
        
        function addGeometricShapes() {
            geometricShapes = [];
            const shapeTypes = ['box', 'sphere', 'tetrahedron', 'octahedron'];
            
            for (let i = 0; i < 15; i++) {
                const shapeType = shapeTypes[Math.floor(Math.random() * shapeTypes.length)];
                let geometry;
                
                switch (shapeType) {
                    case 'box':
                        geometry = new THREE.BoxGeometry(20, 20, 20);
                        break;
                    case 'sphere':
                        geometry = new THREE.SphereGeometry(15, 16, 16);
                        break;
                    case 'tetrahedron':
                        geometry = new THREE.TetrahedronGeometry(20);
                        break;
                    case 'octahedron':
                        geometry = new THREE.OctahedronGeometry(15);
                        break;
                }
                
                const material = new THREE.MeshPhongMaterial({
                    color: new THREE.Color().setHSL(Math.random(), 0.7, 0.5),
                    emissive: new THREE.Color(0x0f3460),
                    emissiveIntensity: 0.2,
                    transparent: true,
                    opacity: 0.6
                });
                
                const mesh = new THREE.Mesh(geometry, material);
                
                mesh.position.x = (Math.random() - 0.5) * 1000;
                mesh.position.y = (Math.random() - 0.5) * 1000;
                mesh.position.z = (Math.random() - 0.5) * 1000;
                
                mesh.rotation.x = Math.random() * Math.PI;
                mesh.rotation.y = Math.random() * Math.PI;
                
                const scale = 0.5 + Math.random() * 1.5;
                mesh.scale.set(scale, scale, scale);
                
                geometricShapes.push(mesh);
                scene.add(mesh);
            }
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        function onDocumentMouseMove(event) {
            mouseX = (event.clientX - window.innerWidth / 2) / 100;
            mouseY = (event.clientY - window.innerHeight / 2) / 100;
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            if (particlesEnabled && particleSystem) {
                particleSystem.rotation.x += 0.001;
                particleSystem.rotation.y += 0.002;
                particleSystem.rotation.x += mouseY * 0.0001;
                particleSystem.rotation.y += mouseX * 0.0001;
                
                if (geometricShapes) {
                    geometricShapes.forEach((shape, index) => {
                        shape.rotation.x += 0.01 * (index % 2 === 0 ? 1 : -1);
                        shape.rotation.y += 0.01 * (index % 3 === 0 ? 1 : -1);
                        shape.position.y += Math.sin(Date.now() * 0.001 + index) * 0.3;
                    });
                }
            }
            
            renderer.render(scene, camera);
        }
        
        // Carousel Initialization
        function initCarousel() {
            renderCarousel();
            
            // Navigation buttons
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            
            if (prevBtn) {
                prevBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    if (!isAnimating) navigateCarousel('prev');
                });
            }
            
            if (nextBtn) {
                nextBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    if (!isAnimating) navigateCarousel('next');
                });
            }
            
            // Filter pills
            document.querySelectorAll('.filter-pill').forEach(pill => {
                pill.addEventListener('click', () => {
                    document.querySelectorAll('.filter-pill').forEach(p => p.classList.remove('active'));
                    pill.classList.add('active');
                    
                    const filter = pill.dataset.filter;
                    if (filter === 'all') {
                        filteredProjects = [...projects];
                    } else {
                        filteredProjects = projects.filter(p => p.category === filter);
                    }
                    
                    currentSlide = 0;
                    renderCarousel();
                });
            });
        }
        
        function renderCarousel() {
            const track = document.getElementById('carousel-track');
            const indicators = document.getElementById('carousel-indicators');
            
            if (!track || !indicators) return;
            
            track.innerHTML = '';
            indicators.innerHTML = '';
            
            if (filteredProjects.length === 0) {
                track.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">No projects found in this category.</p>';
                return;
            }
            
            filteredProjects.forEach((project, index) => {
                // Create slide
                const slide = document.createElement('div');
                slide.className = 'project-slide';
                slide.innerHTML = `
                    <div class="project-header">
                        <h3 class="project-title">${project.name}</h3>
                        <span class="project-status">${project.status}</span>
                    </div>
                    <p class="project-description">${project.description}</p>
                    <div class="project-tech">
                        ${project.technologies.map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                    </div>
                    <div class="project-links">
                        <a href="${project.demo}" class="project-link" target="_blank">
                            <i class="fas fa-external-link-alt"></i> View Demo
                        </a>
                        
                    </div>
                `;
                
                track.appendChild(slide);
                
                // Create indicator
                const indicator = document.createElement('div');
                indicator.className = 'indicator';
                if (index === 0) indicator.classList.add('active');
                indicator.addEventListener('click', () => {
                    currentSlide = index;
                    updateCarousel();
                });
                indicators.appendChild(indicator);
            });
            
            updateCarousel();
        }
        
        function navigateCarousel(direction) {
            if (filteredProjects.length === 0) return;
            
            isAnimating = true;
            
            if (direction === 'next') {
                currentSlide = (currentSlide + 1) % filteredProjects.length;
            } else {
                currentSlide = (currentSlide - 1 + filteredProjects.length) % filteredProjects.length;
            }
            
            updateCarousel();
            
            setTimeout(() => {
                isAnimating = false;
            }, 600);
        }
        
        function updateCarousel() {
            const slides = document.querySelectorAll('.project-slide');
            const indicators = document.querySelectorAll('.indicator');
            
            slides.forEach((slide, index) => {
                slide.classList.remove('active', 'prev', 'next', 'hidden');
                
                if (index === currentSlide) {
                    slide.classList.add('active');
                } else if (index === (currentSlide - 1 + filteredProjects.length) % filteredProjects.length) {
                    slide.classList.add('prev');
                } else if (index === (currentSlide + 1) % filteredProjects.length) {
                    slide.classList.add('next');
                } else {
                    slide.classList.add('hidden');
                }
            });
            
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === currentSlide);
            });
        }
        
        // Navigation
        function initNavigation() {
            const navDots = document.querySelectorAll('.nav-dot');
            
            navDots.forEach(dot => {
                dot.addEventListener('click', () => {
                    const sectionId = dot.dataset.section;
                    scrollToSection(sectionId);
                });
            });
            
            // Update active dot on scroll
            let ticking = false;
            function updateActiveSection() {
                const sections = document.querySelectorAll('.section');
                let currentSection = '';
                
                sections.forEach(section => {
                    const rect = section.getBoundingClientRect();
                    if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {
                        currentSection = section.id;
                    }
                });
                
                navDots.forEach(dot => {
                    dot.classList.toggle('active', dot.dataset.section === currentSection);
                });
                
                ticking = false;
            }
            
            window.addEventListener('scroll', () => {
                if (!ticking) {
                    requestAnimationFrame(updateActiveSection);
                    ticking = true;
                }
            });
        }
        
        // Scroll to section
        function scrollToSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.scrollIntoView({ behavior: 'smooth' });
            }
        }
        
        // Controls
        function initControls() {
            // Theme toggle
            const themeToggle = document.getElementById('theme-toggle');
            if (themeToggle) {
                themeToggle.addEventListener('click', () => {
                    const currentTheme = document.documentElement.getAttribute('data-theme');
                    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                    
                    document.documentElement.setAttribute('data-theme', newTheme);
                    themeToggle.querySelector('i').className = newTheme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
                    localStorage.setItem('theme', newTheme);
                });
            }
            
            // Load saved theme
            const savedTheme = localStorage.getItem('theme') || 'dark';
            document.documentElement.setAttribute('data-theme', savedTheme);
            if (themeToggle) {
                themeToggle.querySelector('i').className = savedTheme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
            }
            
            // Particle toggle
            const particleToggle = document.getElementById('particle-toggle');
            if (particleToggle) {
                particleToggle.addEventListener('click', () => {
                    particlesEnabled = !particlesEnabled;
                    
                    if (particleSystem) {
                        particleSystem.visible = particlesEnabled;
                    }
                    if (geometricShapes) {
                        geometricShapes.forEach(shape => shape.visible = particlesEnabled);
                    }
                    
                    particleToggle.classList.toggle('active', particlesEnabled);
                });
            }
            
            // Sound toggle (placeholder)
            const soundToggle = document.getElementById('sound-toggle');
            if (soundToggle) {
                soundToggle.addEventListener('click', () => {
                    soundEnabled = !soundEnabled;
                    soundToggle.classList.toggle('active', soundEnabled);
                    soundToggle.querySelector('i').className = soundEnabled ? 'fas fa-volume-up' : 'fas fa-volume-mute';
                });
            }
            
            // Fullscreen toggle
            const fullscreenToggle = document.getElementById('fullscreen-toggle');
            if (fullscreenToggle) {
                fullscreenToggle.addEventListener('click', () => {
                    if (!document.fullscreenElement) {
                        document.documentElement.requestFullscreen();
                        fullscreenToggle.querySelector('i').className = 'fas fa-compress';
                    } else {
                        document.exitFullscreen();
                        fullscreenToggle.querySelector('i').className = 'fas fa-expand';
                    }
                });
            }
        }
        
        // Loading Screen
        function initLoading() {
            setTimeout(() => {
                const loader = document.getElementById('loader');
                if (loader) {
                    loader.style.opacity = '0';
                    
                    setTimeout(() => {
                        loader.style.display = 'none';
                        startHeroAnimations();
                    }, 500);
                }
            }, 3000);
        }
        
        // Hero Animations
        function startHeroAnimations() {
            // Animate title
            gsap.to('.hero-title span', {
                opacity: 1,
                y: 0,
                duration: 1,
                stagger: 0.2,
                ease: 'power3.out'
            });
            
            // Animate subtitle
            gsap.to('.hero-subtitle', {
                opacity: 1,
                y: 0,
                duration: 1,
                delay: 0.5,
                ease: 'power3.out'
            });
            
            // Animate stats
            gsap.to('.hero-stats', {
                opacity: 1,
                duration: 1,
                delay: 0.8,
                ease: 'power3.out'
            });
            
            // Animate stat numbers
            document.querySelectorAll('.stat-number').forEach(stat => {
                const target = parseInt(stat.dataset.target);
                gsap.to(stat, {
                    textContent: target,
                    duration: 2,
                    delay: 1,
                    ease: 'power2.out',
                    snap: { textContent: 1 },
                    onUpdate: function() {
                        stat.textContent = Math.ceil(stat.textContent);
                    }
                });
            });
        }
        
        // Scroll Animations
        function initScrollAnimations() {
            // Section headers
            gsap.utils.toArray('.section-title').forEach(title => {
                gsap.fromTo(title, {
                    opacity: 0,
                    y: 50
                }, {
                    opacity: 1,
                    y: 0,
                    duration: 1,
                    scrollTrigger: {
                        trigger: title,
                        start: 'top 80%',
                        end: 'bottom 20%',
                        toggleActions: 'play none none reverse'
                    }
                });
            });
            
            // About text
            gsap.utils.toArray('.about-text').forEach(text => {
                gsap.fromTo(text, {
                    opacity: 0,
                    y: 30
                }, {
                    opacity: 1,
                    y: 0,
                    duration: 1,
                    scrollTrigger: {
                        trigger: text,
                        start: 'top 80%',
                        end: 'bottom 20%',
                        toggleActions: 'play none none reverse'
                    }
                });
            });
            
            // Skills grid
            gsap.utils.toArray('.skill-item').forEach((item, index) => {
                gsap.fromTo(item, {
                    opacity: 0,
                    scale: 0.8,
                    y: 50
                }, {
                    opacity: 1,
                    scale: 1,
                    y: 0,
                    duration: 0.6,
                    delay: index * 0.1,
                    scrollTrigger: {
                        trigger: item,
                        start: 'top 80%',
                        end: 'bottom 20%',
                        toggleActions: 'play none none reverse'
                    }
                });
            });
            
            // Social cards
            gsap.utils.toArray('.social-card').forEach((card, index) => {
                gsap.fromTo(card, {
                    opacity: 0,
                    y: 50,
                    rotationY: -90
                }, {
                    opacity: 1,
                    y: 0,
                    rotationY: 0,
                    duration: 0.8,
                    delay: index * 0.1,
                    scrollTrigger: {
                        trigger: card,
                        start: 'top 80%',
                        end: 'bottom 20%',
                        toggleActions: 'play none none reverse'
                    }
                });
            });
        }
        
        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft' && !isAnimating) {
                navigateCarousel('prev');
            } else if (e.key === 'ArrowRight' && !isAnimating) {
                navigateCarousel('next');
            }
        });
    </script>
</body>
</html>